var T$=Object.defineProperty;var C$=(J,Q)=>{for(var Z in Q)T$(J,Z,{get:Q[Z],enumerable:!0,configurable:!0,set:(Y)=>Q[Z]=()=>Y})};class J1{constructor(){this.packLookup={},this.packData={},this.packProcessing=!1}get defaultCompendia(){return[...game.packs.keys()].filter((J)=>J.startsWith("pf1.")||J.startsWith("pf1e-archetypes")||J.startsWith("pf-content")||J.startsWith("pf1-statblock-converter"))}async registerDefaultCompendia(){_.log("Registering default compendia..."),await this.processCompendiums(this.defaultCompendia,{bypassLock:!0})}async processCompendiums(J=[],{reset:Q=!1,bypassLock:Z=!1}={}){if(this.packProcessing&&!Z)return;if(!Array.isArray(J))J=[J];if(J.length===0)return;if(this.packProcessing=!0,this.packData&&Q)this.packData={},this.packLookup={},await this.registerDefaultCompendia();for(let Y of J){let H=await game.packs.get(Y);if(H){await H.getIndex(),H.fuzzyIndex=_.sortArrayByName([...H.index]),this.packData[Y]=H;for(let X of H.fuzzyIndex){let G=X.type,W=X.system?.subType??null;if(G==="feat"&&!W)W="feat";let z={name:X.name,uuid:X.uuid,classes:X.system?.associations?.classes??[],tags:X.system?.tags??[],subType:W};if(!this.packLookup[Y])this.packLookup[Y]={};if(!this.packLookup[Y][G])this.packLookup[Y][G]={items:[]};if(this.packLookup[Y][G].items.push(z),W){if(!(W in this.packLookup[Y][G]))this.packLookup[Y][G][W]=[];this.packLookup[Y][G][W].push(z)}}}}this.packProcessing=!1}isKnownCompendium(J){return!!this.packLookup[J]||!1}uniquePermutations(J){let Q=new Set;if(J.length>7)return console.warn("Array too large. Not attempting.",J),!1;for(let Z=0;Z<J.length;Z=Z+1){let Y=this.uniquePermutations(J.slice(0,Z).concat(J.slice(Z+1)));if(!Y.length)Q.add([J[Z]]);else for(let H=0;H<Y.length;H=H+1)Q.add([J[Z]].concat(Y[H]))}return[...Q]}async findInCompendia(J,Q){if(!J)return;let Z;if(Q?.packs&&Q.packs.length)Z=Q.packs.flatMap((z)=>game.packs.get(z)??[]);else Z=game.packs.filter((z)=>!Q?.type||z.metadata.type==Q.type);J=J.toLocaleLowerCase();let Y,H,X=Q.itemTypes,G=[];for(let z of Z){let K=z.metadata.id,q=this.packData[K];if(!q)_.log(`Pack ${K} not found in cache. Processing...`),await this.processCompendiums(K),q=this.packData[K];for(let j of X){if(!this.packLookup[K]?.[j])continue;let F=Q.itemSubTypes??Object.keys(this.packLookup[K][j]);for(let L of F){let E=this.packLookup[K][j][L]??[];E=E.filter((O)=>{let B=O.classes?.length>0?Q.classes?.length!==void 0?O.classes.some((P)=>{try{return Q.classes.includes(pf1.utils.createTag(P))}catch(M){return console.log(`There was an error in creating a class tag for "${P}".`),console.error(M),!1}}):!0:!0,N=O.tags?.length>0&&j==="feat"&&O.subType==="racial"?Q?.race?.length>0?O.tags.some((P)=>pf1.utils.createTag(P)===Q.race):!1:!0;return B&&N}),G=G.concat(E)}}}if(G=_.sortArrayByName(G),G.length>0){if(Y=pf1.utils.binarySearch(G,J,(z,K)=>{return z.localeCompare(K.name,void 0,{ignorePunctuation:!0})}),Y>-1)H=G[Y].uuid}if(H)return H;let W=this.uniquePermutations(J.split(/[ _-]/));if(W)W=W.map((z)=>z.join(" "));else W=[null],W.push(J.split(/[ _-]/).reverse().join(" ")),W.push(J.split(/[,;] ?/).reverse().flatMap((z)=>z.split(" ")).join(" "));for(let z=1;z<W.length;z++)if(Y=pf1.utils.binarySearch(G,W[z],(K,q)=>K.localeCompare(q.name,void 0,{ignorePunctuation:!0})),Y>-1)H=G[Y].uuid;if(H)return H;return null}async searchCompendia(J,Q={}){if(!J)return null;let Z,Y={};if(Q=Object.assign({packs:[],type:"Item",itemTypes:[],itemSubTypes:null,classes:void 0},Q),!J.search)J.search=new Set;else if(typeof J.search==="string")J.search=new Set([J.search]);else if(Array.isArray(J.search))J.search=new Set(J.search);let H=J.search;if(H.add(J.name).add(J.shortName).add(J.altName).add(J.altName2),H=[...H].filter((W)=>!!W),J.item==="Scribe Scroll")console.log(Q);for(let W of H)if(_.log(`Searching compendium for "${W}" (item: ${J.item}) in packs:`,Q.packs),Z=await this.findInCompendia(W,Q),Z)break;if(_.log(`Search Result for "${J.item}": `,Z||"<none>"),!Z)return null;Y=await fromUuid(Z);let X=Y.toObject();return X.flags.core={sourceId:Z},new Item.implementation(X)}async findEntityInCompendia(J,Q={}){if(Q.itemType)Q.itemTypes=Array.isArray(Q.itemType)?Q.itemType:[Q.itemType],delete Q.itemType;if(Q.itemSubType)Q.itemSubTypes=Array.isArray(Q.itemSubType)?Q.itemSubType:[Q.itemSubType],delete Q.itemSubType;let Z=Object.values(this.packData),Y=new Set,H=new Set,X=new Set;Z.forEach((z)=>{switch(z.metadata.package){case"pf1":Y.add(z.metadata.id);break;case"pf1e-archetypes":case"pf-content":case"pf1-statblock-converter":H.add(z.metadata.id);break;default:X.add(z.metadata.id);break}});let G=game.settings.get(window.SBC.config.modData.mod,"customCompendiums")?.split(/[,;]/g).filter((z)=>!this.packData[z])??[];return await this.processCompendiums(G),(await Promise.all([await this.searchCompendia(J,foundry.utils.mergeObject(Q,{packs:X})),await this.searchCompendia(J,foundry.utils.mergeObject(Q,{packs:H})),await this.searchCompendia(J,foundry.utils.mergeObject(Q,{packs:Y}))])).reduce((z,K)=>z||K,null)}}var A$={hooves:{img:"systems/pf1/icons/items/inventory/monster-hoof.jpg",isPrimaryAttack:!1,damageTypes:"B"},tail:{img:"systems/pf1/icons/items/inventory/monster-tail.jpg",isPrimaryAttack:!1,damageTypes:"B"},other:{img:"systems/pf1/icons/items/inventory/monster-cat.jpg",isPrimaryAttack:!1,damageTypes:"P, B or S"}},M0=A$;var h$=["Jotund Troll","Troll"],B1=h$;var g$={"Agent of the Grave":{hd:8,bab:"low",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["blf","hea","int","kar","khi","kre","lin","spl","umd"],img:"systems/pf1/icons/skills/affliction_08.jpg",offset:"@classes.agentOfTheGrave.level - 1"},"Aldori Swordlord":{hd:10,bab:"high",fort:"low",ref:"high",will:"low",skillsPerLevel:2,classSkills:["acr","blf","dip","int","kno","prf","sen"],img:"systems/pf1/icons/skills/weapon_25.jpg"},"Arcane Archer":{hd:10,bab:"high",fort:"high",ref:"high",will:"low",skillsPerLevel:4,classSkills:["per","rid","ste","sur"],img:"systems/pf1/icons/skills/weapon_03.jpg",offset:"@classes.arcaneArcher.level - ceil(@classes.arcaneArcher.level / 4)",castingType:["arcane"]},"Arcane Trickster":{hd:6,bab:"low",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","blf","clm","dip","dev","dis","esc","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","per","sen","slt","spl","ste","swm"],img:"systems/pf1/icons/skills/violet_28.jpg",offset:"@classes.arcaneTrickster.level",castingType:["arcane"]},"Arclord of Nex":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["dip","lin","sen","umd"],img:"systems/pf1/icons/skills/red_09.jpg",offset:"@classes.arclordOfNex.level",castingType:["arcane"]},"Argent Dramaturge":{hd:6,bab:"low",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["blf","dip","esc","fly","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","prf","per","sen","spl","umd"],img:"systems/pf1/icons/items/inventory/lute.jpg",offset:"@classes.argentDramaturge.level"},Asavir:{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["blf","crf","han","int","kna","kre","per","rid","sen","sur"],img:"systems/pf1/icons/feats/ride-by-attack.jpg"},"Ashavic Dancer":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","dip","fly","kpl","kre","per","prf","sen","spl","sur"],img:"systems/pf1/icons/spells/wind-grasp-magenta-2.jpg",offset:"@classes.ashavicDancer.level - 1"},"Aspis Agent":{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:4,classSkills:["blf","dis","kar","khi","sen","slt","umd"],img:"systems/pf1/icons/skills/yellow_41.jpg"},Assassin:{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","blf","clm","dev","dip","dis","esc","int","lin","per","sen","slt","ste","swm","umd"],img:"systems/pf1/icons/skills/weapon_43.jpg"},"Battle Herald":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["blf","crf","dip","han","hea","int","ken","khi","klo","kno","per","prf","rid","sen"],img:"systems/pf1/icons/skills/red_05.jpg"},"Bellflower Tiller":{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:6,classSkills:["acr","blf","dip","dis","esc","hea","int","kge","klo","per","sen","slt","ste","sur"],img:"systems/pf1/icons/skills/red_06.jpg"},"Blackfire Adept":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.blackfireAdept.level - ceil(@classes.blackfireAdept.level / 4)"},Bloatmage:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.bloatmage.level",castingType:["arcane"]},Brewkeeper:{hd:8,bab:"med",fort:"high",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.brewkeeper.level - 1",castingType:["alchemy"]},"Brother of the Seal":{hd:8,bab:"med",fort:"high",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Champion of Irori":{hd:8,bab:"high",fort:"high",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Chernasardo Warden":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Crimson Templar":{hd:10,bab:"high",fort:"high",ref:"high",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Cyphermage:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.cyphermage.level",castingType:["arcane"]},"Daggermark Poisoner":{hd:8,bab:"med",fort:"high",ref:"low",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Daivrat:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.daivrat.level - 1",castingType:["arcane"]},Darechaser:{hd:10,bab:"high",fort:"high",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Dawnflower Anchorite":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.dawnflowerAnchorite.level - 1"},"Dawnflower Dissident":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.dawnflowerDissident.level",castingType:["divine"]},"Death Slayer":{hd:8,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.deathSlayer.level - ceil(@classes.deathSlayer.level / 5)"},Demoniac:{hd:8,bab:"med",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.demoniac.level - 1"},"Devoted Muse":{hd:10,bab:"high",fort:"low",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Diabolist:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.diabolist.level - 1"},"Divine Scion":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.divineScion.level",castingType:["divine"]},"Dragon Disciple":{hd:12,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.dragonDisciple.level - ceil(@classes.dragonDisciple.level / 4)",castingType:["arcane"]},Duelist:{hd:10,bab:"high",fort:"low",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Eldritch Knight":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.eldritchKnight.level - 1",castingType:["arcane"]},"Enchanting Courtesan":{hd:6,bab:"low",fort:"high",ref:"low",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.enchantingCourtesan.level - 1"},"Envoy of Balance":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.envoyOfBalance.level"},"Esoteric Knight":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"floor(@classes.esotericKnight.level / 2)",castingType:["psychic"]},Evangelist:{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Exalted:{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.exalted.level",castingType:["divine"]},Feysworn:{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.feysworn.level - 1"},"Genie Binder":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"floor(@classes.genieBinder.level / 2) + floor(@classes.genieBinder.level / 5)"},"Golden Legionnaire":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Gray Corsair":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Gray Gardener":{hd:8,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.grayGardener.level - ceil(@classes.grayGardener.level / 4)",castingType:["divine"]},"Green Faith Acolyte":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.greenFaithAcolyte.level",castingType:["divine"]},"Halfling Opportunist":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Harrower:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.harrower.level"},"Hellknight Signifer":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.hellknightSignifer.level"},Hellknight:{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Heritor Knight":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Hinterlander:{hd:10,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.hinterlander.level - 1"},"Holy Vindicator":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.holyVindicator.level - ceil(@classes.holyVindicator.level / 4)",castingType:["divine"]},"Horizon Walker":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Inheritor's Crusader":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:1,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.inheritorsCrusader.level",castingClass:["cleric","paladin"]},"Inner Sea Pirate":{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Knight of Ozem":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Lantern Bearer":{hd:10,bab:"high",fort:"high",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Lion Blade":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Living Monolith":{hd:8,bab:"med",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Loremaster:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.loremaster.level"},"Low Templar":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Magaambyan Arcanist":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.magaambyanArcanist.level",castingType:["arcane"]},"Mammoth Rider":{hd:12,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Master Chymist":{hd:10,bab:"high",fort:"high",ref:"high",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.masterChymist.level - floor(@classes.masterChymist.level / 4) - 1",castingType:["alchemy"]},"Master Spy":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Mortal Usher":{hd:8,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Mystery Cultist":{hd:8,bab:"med",fort:"low",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.mysteryCultist.level - 1"},"Mystic Theurge":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.mysticTheurge.level",castingType:["arcane","divine"]},"Nature Warden":{hd:8,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.natureWarden.level - ceil(@classes.natureWarden.level / 4)",castingType:["divine"]},"Noble Scion":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Pain Taster":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Pathfinder Chronicler":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:8,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Pathfinder Delver":{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:8,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Pathfinder Field Agent":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Pathfinder Savant":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.pathfinderSavant.level - 1"},"Pit Fighter":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Proctor:{hd:8,bab:"med",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.proctor.level - 1"},"Prophet of Kalistrade":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Pure Legion Enforcer":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Rage Prophet":{hd:10,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.rageProphet.level - (floor((@classes.rageProphet.level + 3) / 8) + floor(@classes.rageProphet.level / 8) + 1)"},"Razmiran Priest":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.razmiranPriest.level - ceil(@classes.razmiranPriest.level / 4)",castingType:["arcane"]},"Red Mantis Assassin":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Riftwarden:{hd:8,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.riftwarden.level - ceil(@classes.riftwarden.level / 4)"},Ritualist:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.ritualist.level"},"Rivethun Emissary":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.rivethunEmissary.level - ceil(@classes.rivethunEmissary.level / 4)"},"Rose Warden":{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Runeguard:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.runeguard.level - 1"},"Sacred Sentinel":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Sanguine Angel":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Scar Seeker":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"floor(@classes.scarSeeker.level / 2)"},Sentinel:{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Shadowdancer:{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Shieldmarshal:{hd:10,bab:"high",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Skyseeker:{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.skyseeker.level - ceil(@classes.skyseeker.level / 4)",castingType:["divine"]},"Sleepless Detective":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Soul Warden":{hd:8,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.soulWarden.level"},Souldrinker:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.souldrinker.level - ceil(@classes.souldrinker.level / 5)"},"Sphere Singer":{hd:8,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.sphereSinger.level - floor((@classes.sphereSinger.level + 7) / 8)"},"Stalwart Defender":{hd:12,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},Stargazer:{hd:6,bab:"med",fort:"low",ref:"high",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.stargazer.level"},"Steel Falcon":{hd:10,bab:"high",fort:"high",ref:"low",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Storm Kindler":{hd:8,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.stormKindler.level - ceil(@classes.stormKindler.level / 4)"},"Student of Perfection":{hd:10,bab:"high",fort:"high",ref:"high",will:"low",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Student of War":{hd:10,bab:"high",fort:"low",ref:"low",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Tattooed Mystic":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.tattooedMystic.level - ceil(@classes.tattooedMystic.level / 4)"},Technomancer:{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.technomancer.level - 1",castingType:["arcane"]},"Thuvian Alchemist":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.thuvianAlchemist.level",castingType:["arcane"]},"Twilight Talon":{hd:8,bab:"med",fort:"low",ref:"low",will:"high",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Ulfen Guard":{hd:10,bab:"high",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Umbral Court Agent":{hd:8,bab:"med",fort:"high",ref:"low",will:"high",skillsPerLevel:4,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.umbralCourtAgent.level - ceil(@classes.umbralCourtAgent.level / 4)"},"Veiled Illusionist":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.veiledIllusionist.level"},"Westcrown Devil":{hd:8,bab:"med",fort:"low",ref:"high",will:"low",skillsPerLevel:6,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg"},"Winter Witch":{hd:6,bab:"low",fort:"low",ref:"low",will:"high",skillsPerLevel:2,classSkills:["acr","apr","art","blf","clm","crf","dev","dip","dis","esc","fly","han","hea","int","kar","kdu","ken","kge","khi","klo","kna","kno","kpl","kre","lin","lor","per","prf","pro","rid","sen","slt","spl","ste","sur","swm","umd"],img:"systems/pf1/icons/items/inventory/monster-eyes.jpg",offset:"@classes.winterWitch.level - 1",castingClass:["witch"]}},Z1=g$;var D$=["all-around vision","carrion sense","deepsight","deathwatch","dragon senses","greensight","lifesense","minesight","water sense"],E1=D$;var y$=["Abjurer","Conjurer","Diviner","Enchanter","Evoker","Illusionist","Necromancer","Transmuter","Universalist"],Q1=y$;var d$=["Apocalyptic","Aquatic","Ascendant","Authoritative","Benthic","Blissful","Bouncing","Brackish","Brisk","Burning","Centered","Cherry Blossom","Coaxing","Concussive","Conditional","Consecrate","Contagious","Contingent","Crypt","Dazing","Delayed","Disruptive","Echoing","Eclipsed","Ectoplasmic","Elemental","Empower","Empowered","Encouraging","Enlarge","Enlarged","Extend","Extended","Familiar","Fearsome","Flaring","Fleeting","Focused","Furious","Heighten","Heightened","Intensified","Intuitive","Jinxed","Latent Curse","Lingering","Logical","Maximize","Maximized","Merciful","Murky","Persistent","Piercing","Quicken","Quickened","Reach","Rime","Scarring","Scouting Summons","Seeking","Selective","Shadow Grasp","Sickening","Silent","Snuffing","Solar","Solid Shadows","Stable","Steam","Still","Stilled","Studied","Stygian","Stylized","Tenacious","Tenebrous","Thanatopic","Threatening Illusion","Threnodic","Thundering","Toppling","Toxic","Traumatic","Trick","Tumultuous","Umbral","Ursurping","Vast","Verdant","Widen","Widened","Yai-Mimic"],O0=d$;var b$=["Black","Blue","Brown","Gray","Green","Orange","Prismatic","Red","White"],N1=b$;var Y1={};C$(Y1,{Prefixes:()=>k$,Auras:()=>V,Abilities:()=>m$});var V=Object.freeze({Abjuration:"abj",Conjuration:"con",Divination:"div",Enchantment:"enc",Evocation:"evo",Illusion:"ill",Necromancy:"nec",Transmutation:"trs",Universal:"uni"}),k$=["Normal","Lesser","Improved","Greater","Light","Moderate","Heavy"],m$={Concealed:{staticCost:7500,cl:10,available:{lightWeapon:!0,oneHanded:!0},aura:V.Transmutation},Dueling:{staticCost:14000,cl:5,available:{melee:!0},aura:V.Transmutation},LesserConcealed:{staticCost:3000,cl:5,available:{lightWeapon:!0,oneHanded:!0},aura:V.Transmutation},Prehensile:{staticCost:2500,cl:7,available:{specific:"whip"},aura:V.Enchantment},Shrinking:{staticCost:1000,cl:5,available:{melee:!0},aura:V.Transmutation},Sneaky:{staticCost:5000,cl:7,available:{melee:!0},aura:V.Necromancy},Transformative:{staticCost:1e4,cl:10,available:{melee:!0},aura:V.Transmutation},Agile:{bonus:1,cl:7,available:{melee:!0},aura:V.Transmutation},Answering:{bonus:1,cl:7,available:{melee:!0},aura:V.Enchantment},BloodSong:{bonus:1,cl:6,available:{melee:!0,damageTypes:["slashing","piercing"]},aura:V.Transmutation},Countering:{bonus:1,cl:5,available:{melee:!0},aura:V.Transmutation},Courageous:{bonus:1,cl:3,available:{melee:!0},aura:V.Enchantment},DazzlingRadiance:{bonus:1,cl:7,available:{melee:!0},aura:"misc"},Deadly:{bonus:1,cl:5,available:{melee:!0,damage:["nonlethal"]},aura:V.Necromancy},Defending:{bonus:1,cl:8,available:{melee:!0},aura:V.Abjuration},Disjoining:{bonus:1,cl:7,available:{melee:!0},aura:V.Necromancy},FateStealing:{bonus:1,cl:5,available:{melee:!0},aura:V.Necromancy},Flamboyant:{bonus:1,cl:8,available:{lightWeapon:!0,oneHanded:!0,damageTypes:["piercing"]},aura:V.Transmutation},Fortuitous:{bonus:1,cl:8,available:{melee:!0},aura:V.Transmutation},Furious:{bonus:1,cl:8,available:{melee:!0},aura:V.Enchantment},GrayFlame:{bonus:1,cl:6,available:{melee:!0},aura:V.Transmutation},Grounding:{bonus:1,cl:5,available:{melee:!0},aura:V.Transmutation},Growing:{bonus:1,cl:6,available:{melee:!0},aura:V.Transmutation},Guardian:{bonus:1,cl:8,available:{melee:!0},aura:V.Abjuration},Guided:{bonus:1,cl:7,available:{weapon:!0},aura:V.Evocation},HeartSeeker:{bonus:1,cl:7,available:{melee:!0},aura:V.Necromancy},Injecting:{bonus:1,cl:5,available:{melee:!0},aura:V.Conjuration},Keen:{bonus:1,cl:10,available:{melee:!0,damage:["piercing","slashing"]},aura:V.Transmutation},KiFocus:{bonus:1,cl:8,available:{melee:!0},aura:V.Transmutation},Leveraging:{bonus:1,cl:6,available:{melee:!0},aura:V.Transmutation},Menacing:{bonus:1,cl:10,available:{melee:!0},aura:"misc"},MightyCleaving:{bonus:1,cl:8,available:{melee:!0},aura:V.Evocation},Mimetic:{bonus:1,cl:5,available:{melee:!0},aura:V.Abjuration},Neutralizing:{bonus:1,cl:5,available:{melee:!0},aura:V.Transmutation},Ominous:{bonus:1,cl:5,available:{melee:!0},aura:V.Evocation},Pitfall:{bonus:1,cl:5,available:{melee:!0},aura:V.Transmutation},Quenching:{bonus:1,cl:5,available:{melee:!0},aura:V.Transmutation},Sapping:{bonus:1,cl:5,available:{weapon:!0,damage:["nonlethal"]},aura:V.Enchantment},Seaborne:{bonus:1,cl:7,available:{melee:!0},aura:V.Transmutation},Skewering:{bonus:1,cl:5,available:{lightWeapon:!0,oneHanded:!0,damageTypes:["piercing"]},aura:V.Divination},Slithering:{bonus:1,cl:11,available:{melee:!0},aura:V.Transmutation},Smashing:{bonus:1,cl:10,available:{melee:!0,damage:["bludgeoning"]},aura:V.Conjuration},Sticky:{bonus:1,cl:8,available:{melee:!0,special:["reach"]},aura:V.Transmutation},Thawing:{bonus:1,cl:5,available:{melee:!0},aura:V.Transmutation},Throwing:{bonus:1,cl:5,available:{melee:!0},aura:V.Transmutation},Underwater:{bonus:1,cl:5,available:{melee:!0,damage:["bludgeoning","slashing"]},aura:V.Divination},Valiant:{bonus:1,cl:5,available:{melee:!0},aura:V.Divination},Vampiric:{bonus:1,cl:5,available:{melee:!0,damage:["slashing","piercing"]},aura:V.Necromancy},Vicious:{bonus:1,cl:9,available:{melee:!0},aura:V.Necromancy},Culling:{bonus:2,cl:8,available:{melee:!0,damage:["slashing"]},aura:V.Evocation},Disruption:{bonus:2,cl:14,available:{melee:!0,damage:["bludgeoning"]},aura:V.Conjuration},Furyborn:{bonus:2,cl:7,available:{melee:!0},aura:V.Enchantment},Glorious:{bonus:2,cl:5,available:{melee:!0},aura:V.Evocation},GreaterVampiric:{bonus:2,cl:8,available:{weapon:!0},aura:V.Necromancy},Harvesting:{bonus:2,cl:9,available:{melee:!0},aura:V.Necromancy},Impact:{bonus:2,cl:9,available:{oneHanded:!0,twoHanded:!0},aura:V.Transmutation},Invigorating:{bonus:2,cl:5,available:{melee:!0},aura:V.Enchantment},KiIntensifying:{bonus:2,cl:12,available:{melee:!0},aura:V.Transmutation},LegBreaker:{bonus:2,cl:7,available:{melee:!0,damage:["bludgeoning"]},aura:V.Transmutation},Liberating:{bonus:2,cl:12,available:{melee:!0},aura:V.Abjuration},LifeSurge:{bonus:2,cl:8,available:{melee:!0},aura:V.Conjuration},Negating:{bonus:2,cl:5,available:{melee:!0},aura:V.Abjuration},Obliviating:{bonus:2,cl:10,available:{melee:!0,damageTypes:["bludgeoning"]},aura:V.Enchantment},Quaking:{bonus:2,cl:6,available:{melee:!0,damageTypes:["bludgeoning"]},aura:V.Evocation},Truthful:{bonus:2,cl:11,available:{melee:!0},aura:V.Abjuration},Unseen:{bonus:2,cl:7,available:{melee:!0},aura:"misc"},Wounding:{bonus:2,cl:10,available:{melee:!0},aura:V.Evocation},Exhausting:{bonus:3,cl:12,available:{melee:!0},aura:V.Necromancy},GreaterFlamboyant:{bonus:3,cl:5,available:{lightWeapon:!0,oneHanded:!0,damageTypes:["piercing"]},aura:V.Transmutation},Nullifying:{bonus:3,cl:12,available:{melee:!0},aura:V.Abjuration},Repositioning:{bonus:3,cl:10,available:{melee:!0},aura:V.Enchantment},SpellStealing:{bonus:3,cl:13,available:{melee:!0},aura:V.Divination},Umbral:{bonus:3,cl:9,available:{melee:!0},aura:V.Evocation},Dancing:{bonus:4,cl:15,available:{melee:!0},aura:V.Transmutation},Flying:{bonus:5,cl:16,available:{melee:!0},aura:V.Transmutation},SpellSiphon:{bonus:5,cl:15,available:{melee:!0},aura:V.Transmutation},Vorpal:{bonus:5,cl:18,available:{melee:!0,damageTypes:["slashing"]},aura:"misc"},Adaptive:{staticCost:1000,cl:1,available:{specific:"composite bow"},aura:V.Transmutation},GreaterTransformative:{staticCost:15000,cl:15,available:{weapon:!0},aura:V.Transmutation},LiberatingWMH:{staticCost:7000,cl:10,available:{weapon:!0},aura:V.Abjuration},Resizing:{staticCost:4000,cl:5,available:{weapon:!0},aura:V.Transmutation},Sacrosanct:{staticCost:5000,cl:8,available:{weapon:!0},aura:V.Evocation},GreaterSniping:{staticCost:16875,cl:15,available:{ranged:!0},aura:"misc"},ImprovedSniping:{staticCost:7500,cl:10,available:{ranged:!0},aura:"misc"},NormalSniping:{staticCost:1875,cl:5,available:{ranged:!0},aura:"misc"},Ambushing:{bonus:1,cl:7,available:{ranged:!0},aura:V.Transmutation},Beaming:{bonus:1,cl:10,available:{ranged:!0},aura:V.Evocation},Conserving:{bonus:1,cl:7,available:{firearm:!0},aura:V.Conjuration},Distance:{bonus:1,cl:6,available:{ranged:!0},aura:V.Divination},Driving:{bonus:1,cl:10,available:{ranged:!0},aura:V.Evocation},Huntsman:{bonus:1,cl:7,available:{ranged:!0},aura:V.Divination},Inspired:{bonus:1,cl:7,available:{simple:!0,specific:["hand crossbow","rapier","shortbow","short sword","sword cane"]},aura:V.Enchantment},Jurist:{bonus:1,cl:4,available:{weapon:!0},aura:V.Transmutation},Lucky:{bonus:1,cl:8,available:{firearm:!0},aura:V.Transmutation},Plummeting:{bonus:1,cl:7,available:{ranged:!0},aura:V.Transmutation},Reliable:{bonus:1,cl:8,available:{firearm:!0},aura:V.Transmutation},Returning:{bonus:1,cl:7,available:{thrown:!0},aura:V.Transmutation},Sacred:{bonus:1,cl:16,available:{weapon:!0},aura:V.Transmutation},Seeking:{bonus:1,cl:12,available:{ranged:!0},aura:V.Divination},ShadowShooting:{bonus:1,cl:8,available:{ranged:!0},aura:V.Conjuration},SpellHurling:{bonus:1,cl:8,available:{thrown:!0},aura:V.Evocation},Training:{bonus:1,cl:3,available:{weapon:!0},aura:V.Transmutation},Unaligned:{bonus:1,cl:5,available:{weapon:!0},aura:V.Abjuration},Veering:{bonus:1,cl:5,available:{ranged:!0},aura:V.Evocation},Anchoring:{bonus:2,cl:10,available:{melee:!0,thrown:!0},aura:V.Transmutation},EndlessAmmunition:{bonus:2,cl:9,available:{bow:!0,crossbow:!0},aura:V.Conjuration},GlitterWake:{bonus:2,cl:12,available:{ranged:!0},aura:V.Conjuration},Potent:{bonus:2,cl:12,available:{weapon:!0},aura:V.Transmutation},Sharding:{bonus:2,cl:10,available:{melee:!0,thrown:!0},aura:V.Conjuration},Sniping:{bonus:2,cl:7,available:{ranged:!0},aura:V.Transmutation},Stalking:{bonus:2,cl:10,available:{weapon:!0},aura:V.Divination},GreaterLucky:{bonus:3,cl:12,available:{firearm:!0},aura:V.Enchantment},GreaterReliable:{bonus:3,cl:12,available:{firearm:!0},aura:V.Enchantment},Speed:{bonus:3,cl:7,available:{weapon:!0},aura:V.Transmutation},Tailwind:{bonus:3,cl:12,available:{ranged:!0},aura:V.Evocation},NimbleShot:{bonus:4,cl:11,available:{ranged:!0},aura:V.Abjuration},SecondChance:{bonus:4,cl:11,available:{bow:!0},aura:V.Abjuration},HeartPiercing:{bonus:5,cl:10,available:{ranged:!0,damageTypes:["piercing"]},aura:V.Evocation},Interfering:{bonus:5,cl:18,available:{ranged:!0},aura:V.Transmutation},DryLoad:{staticCost:1500,cl:3,available:{firearm:!0},aura:V.Abjuration},Exclusionary:{staticCost:3750,cl:1,available:{weapon:!0},aura:V.Necromancy},PhantomAmmunition:{staticCost:2000,cl:7,available:{ammunition:!0},aura:V.Transmutation},Allying:{bonus:1,cl:5,available:{weapon:!0},aura:V.Transmutation},Bane:{bonus:1,cl:8,hasSpecialTerm:!0,available:{weapon:!0},aura:V.Conjuration},Bewildering:{bonus:1,cl:7,available:{weapon:!0},aura:V.Transmutation},BloodHunting:{bonus:1,cl:8,available:{weapon:!0},aura:V.Conjuration},Breaking:{bonus:1,cl:5,available:{weapon:!0},aura:V.Evocation},Called:{bonus:1,cl:9,available:{weapon:!0},aura:V.Conjuration},Catalytic:{bonus:1,cl:12,available:{weapon:!0},aura:V.Evocation},ClusterShot:{bonus:1,cl:5,available:{ranged:!0},aura:V.Transmutation},Compassionate:{bonus:1,cl:7,available:{weapon:!0},aura:V.Conjuration},Conductive:{bonus:1,cl:8,available:{weapon:!0},aura:V.Necromancy},Confounding:{bonus:1,cl:5,available:{weapon:!0},aura:V.Transmutation},Corrosive:{bonus:1,cl:10,available:{weapon:!0},aura:V.Evocation},Cruel:{bonus:1,cl:5,available:{weapon:!0},aura:V.Necromancy},Cunning:{bonus:1,cl:6,available:{weapon:!0},aura:V.Divination},Debilitating:{bonus:1,cl:7,available:{weapon:!0},aura:V.Necromancy},Deceptive:{bonus:1,cl:9,available:{weapon:!0},aura:"misc"},Dispelling:{bonus:1,cl:10,available:{weapon:!0},aura:V.Abjuration},Distracting:{bonus:1,cl:5,available:{weapon:!0},aura:V.Enchantment},DrowScourge:{bonus:1,cl:8,available:{weapon:!0},aura:V.Conjuration},DuelingPSFG:{bonus:1,cl:7,available:{weapon:!0},aura:V.Transmutation},Fervent:{bonus:1,cl:8,available:{weapon:!0},aura:V.Conjuration},Flaming:{bonus:1,cl:10,available:{weapon:!0},aura:V.Evocation},Frost:{bonus:1,cl:8,available:{weapon:!0},aura:V.Evocation},HealersSorrow:{bonus:1,cl:5,available:{weapon:!0},aura:V.Necromancy},KinSlayer:{bonus:1,cl:8,available:{weapon:!0},aura:V.Conjuration},Limning:{bonus:1,cl:5,available:{weapon:!0},aura:V.Evocation},Merciful:{bonus:1,cl:5,available:{weapon:!0},aura:V.Conjuration},Miserable:{bonus:1,cl:8,hasSpecialTerm:!0,available:{weapon:!0},aura:V.Conjuration},MythicBane:{bonus:1,cl:8,available:{weapon:!0},aura:V.Evocation},Patriotic:{bonus:1,cl:10,available:{weapon:!0},aura:V.Conjuration},Planar:{bonus:1,cl:9,available:{weapon:!0},aura:V.Conjuration},Rusting:{bonus:1,cl:7,available:{weapon:!0},aura:V.Transmutation},Shock:{bonus:1,cl:8,available:{weapon:!0},aura:V.Evocation},SparkflyCrystalArrow:{bonus:1,cl:3,available:{ammunition:!0},aura:V.Evocation},SpiritHunting:{bonus:1,cl:8,available:{weapon:!0},aura:V.Conjuration},SummonBane:{bonus:1,cl:8,available:{weapon:!0},aura:V.Conjuration},Thundering:{bonus:1,cl:5,available:{weapon:!0},aura:V.Necromancy},Virulent:{bonus:1,cl:5,available:{weapon:!0},aura:V.Necromancy},Anarchic:{bonus:2,cl:7,available:{weapon:!0},aura:V.Evocation},Axiomatic:{bonus:2,cl:7,available:{weapon:!0},aura:V.Evocation},Burning:{bonus:2,cl:12,available:{weapon:!0},aura:V.Evocation},CorrosiveBurst:{bonus:2,cl:12,available:{weapon:!0},aura:V.Evocation},Cyclonic:{bonus:2,cl:12,available:{ranged:!0},aura:V.Conjuration},Dazzling:{bonus:2,cl:8,available:{firearm:!0},aura:V.Evocation},LesserDesignating:{bonus:2,cl:7,available:{ranged:!0},aura:V.Enchantment},DispellingBurst:{bonus:2,cl:12,available:{weapon:!0},aura:V.Abjuration},FlamingBurst:{bonus:2,cl:12,available:{weapon:!0},aura:V.Evocation},GreaterDistracting:{bonus:2,cl:8,available:{weapon:!0},aura:V.Enchantment},Heretical:{bonus:2,cl:9,available:{weapon:!0},aura:V.Evocation},Holy:{bonus:2,cl:7,available:{weapon:!0},aura:V.Evocation},IcyBurst:{bonus:2,cl:10,available:{weapon:!0},aura:V.Evocation},Igniting:{bonus:2,cl:12,available:{weapon:!0},aura:V.Evocation},Peaceful:{bonus:2,cl:8,available:{weapon:!0},aura:V.Enchantment},Penetrating:{bonus:2,cl:9,available:{ammunition:!0},aura:V.Evocation},PhaseLocking:{bonus:2,cl:7,available:{weapon:!0},aura:V.Abjuration},Planestriking:{bonus:2,cl:9,available:{weapon:!0},aura:V.Abjuration},RuneForged:{bonus:2,cl:13,available:{weapon:!0},aura:"misc"},Shattering:{bonus:2,cl:8,available:{weapon:!0},aura:V.Evocation},ShockingBurst:{bonus:2,cl:10,available:{weapon:!0},aura:V.Evocation},Silencing:{bonus:2,cl:8,available:{weapon:!0},aura:"misc"},Toxic:{bonus:2,cl:7,available:{weapon:!0},aura:V.Transmutation},Treasonous:{bonus:2,cl:12,available:{weapon:!0},aura:V.Conjuration},Unholy:{bonus:2,cl:7,available:{weapon:!0},aura:V.Evocation},Gory:{bonus:3,cl:15,available:{weapon:!0},aura:V.Necromancy},Redeemed:{bonus:3,cl:12,available:{weapon:!0},aura:"misc"},SonicBoom:{bonus:3,cl:8,available:{firearm:!0},aura:V.Evocation},BrilliantEnergy:{bonus:4,cl:16,available:{weapon:!0},aura:V.Transmutation},GreaterDesignating:{bonus:4,cl:12,available:{ranged:!0},aura:V.Enchantment},Adhesive:{staticCost:7000,cl:10,available:{armor:!0},aura:V.Transmutation},Amorphous:{staticCost:4500,cl:8,available:{armor:!0},aura:V.Transmutation},AquaDynamic:{staticCost:3750,cl:5,available:{armor:!0},aura:"misc"},BuoyantLight:{staticCost:1000,cl:5,available:{lightArmor:!0},aura:V.Transmutation},BuoyantMediumHeavy:{staticCost:2000,cl:5,available:{mediumArmor:!0,heavyArmor:!0},aura:V.Transmutation},Burdenless:{staticCost:4000,cl:5,available:{armor:!0},aura:V.Transmutation},Cloudburst:{staticCost:5000,cl:5,available:{armor:!0},aura:"misc"},Comfort:{staticCost:5000,cl:5,available:{armor:!0},aura:V.Transmutation},Corsair:{staticCost:5000,cl:5,available:{armor:!0},aura:V.Transmutation},Creeping:{staticCost:5000,cl:7,available:{armor:!0},aura:"misc"},Cushioned:{staticCost:1000,cl:1,available:{armor:!0},aura:V.Transmutation},Deceiving:{staticCost:5000,cl:7,available:{armor:!0},aura:V.Evocation},Delving:{staticCost:1e4,cl:5,available:{armor:!0},aura:V.Transmutation},Etherealness:{staticCost:49000,cl:13,available:{armor:!0},aura:V.Transmutation},Expeditious:{staticCost:4000,cl:5,available:{armor:!0},aura:V.Transmutation},Fitting:{staticCost:2000,cl:5,available:{armor:!0,shield:!0},aura:V.Transmutation},Glamered:{staticCost:2700,cl:10,available:{armor:!0},aura:"misc"},GreaterAquaDynamic:{staticCost:33750,cl:5,available:{armor:!0},aura:"misc"},GreaterShadow:{staticCost:33750,cl:15,available:{armor:!0},aura:"misc"},GreaterSlick:{staticCost:33750,cl:15,available:{armor:!0},aura:V.Conjuration},Harmonizing:{staticCost:15000,cl:7,available:{armor:!0},aura:"misc"},ImprovedAquaDynamic:{staticCost:15000,cl:5,available:{armor:!0},aura:"misc"},ImprovedShadow:{staticCost:15000,cl:10,available:{armor:!0},aura:"misc"},ImprovedSlick:{staticCost:15000,cl:10,available:{armor:!0},aura:V.Conjuration},Jousting:{staticCost:3750,cl:5,available:{armor:!0},aura:V.Transmutation},Locksmith:{staticCost:6500,cl:3,available:{lightArmor:!0},aura:V.Transmutation},Malevolent:{staticCost:5000,cl:7,available:{armor:!0},aura:V.Evocation},Martyring:{staticCost:18000,cl:9,available:{armor:!0},aura:V.Conjuration},MentalFocus:{staticCost:3000,cl:5,available:{armor:!0},aura:V.Evocation},PhaseLurching:{staticCost:9100,cl:13,available:{lightArmor:!0},aura:V.Conjuration},Putrid:{staticCost:1e4,cl:5,available:{armor:!0},aura:V.Conjuration},RadiantFlight:{staticCost:15000,cl:10,available:{heavyArmor:!0},aura:V.Transmutation},Restful:{staticCost:4500,cl:5,available:{armor:!0},aura:V.Necromancy},Righteous:{staticCost:27000,cl:10,available:{armor:!0},aura:V.Transmutation},Shadow:{staticCost:3750,cl:5,available:{armor:!0},aura:"misc"},Slick:{staticCost:3750,cl:4,available:{armor:!0},aura:V.Conjuration},SpiritBonded:{staticCost:6000,cl:9,available:{mediumArmor:!0},aura:V.Conjuration},Spiteful:{staticCost:7000,cl:7,available:{armor:!0},aura:V.Enchantment},Trackless:{staticCost:7500,cl:5,available:{armor:!0},aura:V.Transmutation},Unbound:{staticCost:27000,cl:10,available:{armor:!0},aura:V.Transmutation},Unrighteous:{staticCost:27000,cl:10,available:{armor:!0},aura:V.Transmutation},VenomEating:{staticCost:15000,cl:5,available:{armor:!0},aura:V.Transmutation},Vigilant:{staticCost:27000,cl:10,available:{armor:!0},aura:V.Transmutation},Advancing:{bonus:1,cl:5,available:{heavyArmor:!0},aura:V.Necromancy},Balanced:{bonus:1,cl:3,available:{mediumArmor:!0},aura:V.Evocation},Benevolent:{bonus:1,cl:5,available:{armor:!0},aura:V.Enchantment},Billowing:{bonus:1,cl:3,available:{armor:!0},aura:V.Conjuration},Bitter:{bonus:1,cl:5,available:{armor:!0},aura:V.Transmutation},Bolstering:{bonus:1,cl:5,available:{mediumArmor:!0,heavyArmor:!0,shield:!0},aura:V.Enchantment},Calming:{bonus:1,cl:5,available:{armor:!0},aura:V.Enchantment},Champion:{bonus:1,cl:5,available:{armor:!0},aura:V.Abjuration},Cocooning:{bonus:1,cl:9,available:{armor:!0},aura:V.Transmutation},Crusading:{bonus:1,cl:5,available:{armor:!0},aura:V.Abjuration},Dastard:{bonus:1,cl:5,available:{armor:!0},aura:V.Abjuration},Deathless:{bonus:1,cl:7,available:{armor:!0},aura:V.Abjuration},Evolving:{bonus:1,cl:7,available:{armor:!0},aura:V.Transmutation},Poisoning:{bonus:1,cl:7,available:{armor:!0},aura:V.Necromancy},Resonating:{bonus:1,cl:7,available:{armor:!0},aura:V.Abjuration},SpellStoring:{bonus:1,cl:12,available:{armor:!0},aura:V.Evocation},SpellSink:{bonus:1,cl:6,available:{armor:!0,shield:!0},aura:V.Abjuration},Stanching:{bonus:1,cl:7,available:{armor:!0},aura:V.Transmutation},TerrainStriding:{bonus:1,cl:13,available:{armor:!0},aura:V.Enchantment},TrapWarding:{bonus:1,cl:5,available:{armor:!0},aura:V.Transmutation},VouchSafing:{bonus:1,cl:9,available:{armor:!0},aura:V.Abjuration},Warding:{bonus:1,cl:12,available:{armor:!0},aura:V.Abjuration},Withstanding:{bonus:1,cl:10,available:{armor:!0},aura:V.Enchantment},Adamant:{bonus:2,cl:9,available:{heavyArmor:!0},aura:V.Conjuration},Bloodthirsty:{bonus:2,cl:7,available:{lightArmor:!0,mediumArmor:!0},aura:V.Enchantment},Frosted:{bonus:2,cl:3,available:{armor:!0,shield:!0},aura:V.Transmutation},GhostSpike:{bonus:2,cl:10,available:{armor:!0},aura:V.Evocation},Jarring:{bonus:2,cl:6,available:{armor:!0,shield:!0},aura:V.Evocation},MindButtressing:{bonus:2,cl:12,available:{mediumArmor:!0,heavyArmor:!0},aura:V.Abjuration},Phantasmal:{bonus:2,cl:7,available:{lightArmor:!0},aura:"misc"},Rampaging:{bonus:2,cl:3,available:{heavyArmor:!0},aura:"misc"},ShadowBlending:{bonus:2,cl:11,available:{armor:!0},aura:"misc"},SpellDodging:{bonus:2,cl:4,available:{armor:!0},aura:V.Abjuration},Steaming:{bonus:2,cl:3,available:{mediumArmor:!0,heavyArmor:!0},aura:V.Evocation},Volcanic:{bonus:2,cl:14,available:{heavyArmor:!0},aura:V.Evocation},ArrowCollecting:{bonus:3,cl:11,available:{mediumArmor:!0},aura:"misc"},Brawling:{bonus:3,cl:5,available:{lightArmor:!0},aura:V.Transmutation},Cotraveling:{bonus:3,cl:14,available:{armor:!0},aura:V.Conjuration},Invulnerability:{bonus:3,cl:18,available:{armor:!0},aura:"misc"},Sensing:{bonus:3,cl:14,available:{armor:!0},aura:V.Divination},Titanic:{bonus:3,cl:7,available:{armor:!0},aura:V.Transmutation},Denying:{bonus:4,cl:13,available:{armor:!0},aura:V.Abjuration},DreadWing:{bonus:5,cl:15,available:{armor:!0,specific:["full plate","hellknight plate"]},aura:V.Transmutation},Unbowed:{bonus:5,cl:9,available:{armor:!0},aura:"misc"},BuoyantShield:{staticCost:1000,cl:5,available:{shield:!0},aura:V.Transmutation},Channeling:{staticCost:18000,cl:8,available:{shield:!0},aura:V.Conjuration},Determination:{staticCost:30000,cl:10,available:{shield:!0,armor:!0},aura:V.Conjuration},EnergyResistance:{staticCost:18000,cl:3,available:{shield:!0,armor:!0},aura:V.Abjuration},GreaterEnergyResistance:{staticCost:66000,cl:11,available:{shield:!0,armor:!0},aura:V.Abjuration},Hosteling:{staticCost:7500,cl:9,available:{shield:!0,armor:!0},aura:V.Conjuration},ImprovedEnergyResistance:{staticCost:42000,cl:7,available:{shield:!0,armor:!0},aura:V.Abjuration},PoisonResistant:{staticCost:2250,cl:7,available:{shield:!0,armor:!0},aura:V.Conjuration},Radiant:{staticCost:7500,cl:6,available:{shield:!0,armor:!0},aura:V.Evocation},Rallying:{staticCost:5000,cl:5,available:{shield:!0,armor:!0},aura:V.Abjuration},UndeadControlling:{staticCost:49000,cl:13,available:{shield:!0,armor:!0},aura:V.Necromancy},WyrmsBreath:{staticCost:5000,cl:5,available:{shield:!0},aura:V.Evocation},ArrowCatching:{bonus:1,cl:8,available:{shield:!0},aura:V.Abjuration},Assiduous:{bonus:1,cl:1,available:{shield:!0},aura:"misc"},Bashing:{bonus:1,cl:8,available:{shield:!0},aura:V.Transmutation},Blinding:{bonus:1,cl:7,available:{shield:!0},aura:V.Evocation},Clangorous:{bonus:1,cl:7,available:{shield:!0,armor:!0},aura:V.Evocation},Defiant:{bonus:1,cl:8,hasSpecialTerm:!0,available:{shield:!0,armor:!0},aura:V.Conjuration},Folding:{bonus:1,cl:13,available:{shield:!0},aura:"misc"},LightFortification:{bonus:1,cl:13,available:{shield:!0,armor:!0},aura:V.Abjuration},Grinding:{bonus:1,cl:5,available:{shield:!0,armor:!0},aura:V.Transmutation},Guarding:{bonus:1,cl:8,available:{shield:!0},aura:V.Abjuration},Heraldric:{bonus:1,cl:13,available:{shield:!0},aura:V.Enchantment},Impervious:{bonus:1,cl:7,available:{shield:!0,armor:!0},aura:V.Transmutation},Mirrored:{bonus:1,cl:8,available:{shield:!0,armor:!0},aura:V.Abjuration},Ramming:{bonus:1,cl:5,available:{shield:!0},aura:V.Evocation},Rebounding:{bonus:1,cl:5,available:{shield:!0},aura:V.Abjuration},Singing:{bonus:1,cl:10,available:{shield:!0},aura:V.Evocation},Spellrending:{bonus:1,cl:9,available:{shield:!0},aura:V.Abjuration},Animated:{bonus:2,cl:12,available:{shield:!0},aura:V.Transmutation},ArrowDeflection:{bonus:2,cl:5,available:{shield:!0},aura:V.Abjuration},GreaterGuarding:{bonus:2,cl:12,available:{shield:!0},aura:V.Abjuration},Jawbreaker:{bonus:2,cl:9,available:{shield:!0},aura:V.Necromancy},Mastering:{bonus:2,cl:13,available:{shield:!0},aura:"misc"},Merging:{bonus:2,cl:10,available:{shield:!0},aura:V.Transmutation},SpellResistance13:{bonus:2,cl:15,available:{armor:!0,shield:!0},aura:V.Abjuration},Weeping:{bonus:2,cl:10,available:{shield:!0},aura:V.Enchantment},Deflecting:{bonus:3,cl:13,available:{shield:!0},aura:V.Abjuration},ModerateFortification:{bonus:3,cl:13,available:{armor:!0,shield:!0},aura:V.Abjuration},GhostTouch_:{bonus:1,cl:9,available:{weapon:!0},aura:V.Conjuration},GhostTouch:{bonus:3,cl:15,available:{armor:!0,shield:!0},aura:V.Transmutation},SpellResistance15:{bonus:3,cl:15,available:{armor:!0,shield:!0},aura:V.Abjuration},Wild:{bonus:3,cl:9,available:{armor:!0},aura:V.Transmutation},Bastion:{bonus:4,cl:15,available:{shield:!0},aura:V.Abjuration},SpellResistance17:{bonus:4,cl:15,available:{armor:!0,shield:!0},aura:V.Abjuration},HeavyFortification:{bonus:5,cl:13,available:{armor:!0,shield:!0},aura:V.Abjuration},Reflecting:{bonus:5,cl:14,available:{shield:!0},aura:V.Abjuration},SpellResistance19:{bonus:5,cl:15,available:{armor:!0,shield:!0},aura:V.Abjuration}};var u$=["A(?:[AM]|A2|SoL|[CPR]G)","AP:?(?:CC|CoT|CotCT|JR|K|LoF|RotR|S[DS])","BotD[123]","BM","C(?:o[GS]|RB|C[TH]R|EoD)","D(?:E|ou?)G","D(?:HB|DR)","EoG","F[FG]","G(?:aM|MG|n?oG|ttRK)","H(?:uo?G|otJ|[AH])","IS(?:WG|[MPBGCR])","L(?:otLK|CoG)","M:?(?:AoS|CH?|CoGD|CotED?|CotRS|FoR|FStS|G?H|GoD|Mot(?:LG|FF)|M[MR]?|RotFQ|RPT|TotIM|WBG|WL)","NPCG","O(?:oG|LoP|[AO])","P(?:A|otIS|&P|FSG)","QGttE","R(?:G|oF)","S(?:tLC|D|oS)","T(?:EoG|G)","U(?:[CEMRIW]|SH)","(!STATISTICS)CS"],M1=u$;var p$=["aberration","animal","construct","dragon","fey","magical beast","monstrous humanoid","humanoid","ooze","outsider","plant","undead","vermin"],R1=p$;var o$=["adlet","aeon","aether","agathion","air","android","angel","aquatic","archon","astomoi","asura","augmented","azata","behemoth","blight","catfolk","changeling","chaotic","clockwork","cold","colossus","daemon","darkfolk","deepone","demodand","demon","derro","devil","div","dwarf","earth","elemental","elf","evil","extraplanar","fire","giant","gnome","goblinoid","good","gray","greatoldone","grippli","halfling","hive","human","incorporeal","inevitable","kaiju","kami","kasatha","kitsune","kyton","lawful","leshy","manasaputra","mortic","munavri","mythic","native","nightshade","oni","orc","phantom","protean","psychopomp","qlippoth","rakshasa","ratfolk","reptilian","robot","sahkil","samsaran","sasquatch","shapechanger","skinwalker","spawnofrovagug","swarm","troop","vanara","vishkanya","water","wayang","wildhunt"],v1=o$;var l$=["Brutally weighted","Dual-balanced","Jagged hooks?","Razor-Sharp","Serrated Edge","Tactically Adapted","Verstaille Design","Burnished","Deflecting","Double-plated","Jarring","Nimble","Razored","Slumbering","Throwing Shield","Vitalguard","With Armor Spikes?","Spiked(?! Chain(?:\b|$)| Gauntlet)"],U1=l$;var c$={construct:{damage:["nonlethal"],conditions:["mindAffecting","bleed","disease","deathEffects","paralyze","poison","sleep","stun","fatigue","exhausted","energyDrain"],custom:["Necromancy Effects","Effects that require a Fort. save","Ability Damage","Ability Drain","Massive Damage"]},dragon:{conditions:["paralyze","sleep"]},ooze:{damage:["precision"],condition:["mindAffecting","poison","sleep","paralyze","polymorph","stun"],custom:["Gaze Attacks","Visual Effects","Illusions","Attack forms that rely on sight","Flanking","Critical Hits"]},plant:{condition:["mindAffecting","paralyze","polymorph","poison","sleep","stun"]},undead:{damage:["nonlethal"],condition:["mindAffecting","bleed","deathEffects","disease","paralyze","poison","sleep","stun","exhausted","fatigue"],custom:["Ability Drain","Energy Drain","Damage to phys. Ability Scores","Effects that require a Fort. save","Massive Damage","Raise Dead","Reincarnate"]},vermin:{condition:["mindAffecting"]}},x1=c$;var i$={"sandals of elvenkind":"Boots of Elvenkind","sawtooth sabre":"Sawtoothed Sabre","resist (?:fire|cold|acid|electric(?:ity)?|sonic)":"Resist Energy","^backpack$":"Backpack, common","pale lavender ioun stone":"pale lavender ellipsoid ioun stone","robes of the archmagi":"robe of the archmagi","^ambrosia$":"Ambrosia (Vial)","^Rations \\((\\d+) days\\)$":"Trail Rations","Winter Blanket":"Blanket","spherewalker staff":"Spherewalker's Staff","coat of resistance":"Cloak of Resistance"},S1=i$;function $0(J,Q={}){if(Q=Object.assign({pluralize:!1,matchStart:!1,matchEnd:!1,wordBoundary:!0,capture:!0,escape:!0,append:"",prepend:"",flags:"gi",appendMatch:""},Q),!Array.isArray(J))J=Object.values(J);return J=J.filter((Z,Y,H)=>H.indexOf(Z)===Y).sort((Z,Y)=>Y.length-Z.length).map((Z)=>Q.escape?J0(Z):Z).map((Z)=>Q.appendMatch?Z+Q.appendMatch:Z).filter((Z)=>Z.length>0),new RegExp((Q.matchStart?"^":"")+Q.prepend+(Q.wordBoundary?"\\b":"")+(Q.capture?typeof Q.capture==="string"?`(?<${Q.capture}>`:"(":"(?:")+(J.length?J.join(Q.pluralize?"s?|":"|"):"_")+(Q.pluralize?"s?":"")+")"+(Q.wordBoundary?"\\b":"")+Q.append+(Q.matchEnd?"$":""),Q.flags)}function J0(J){return J.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}function R0(J=!0){let Q=window.SBC.config.classes.concat(window.SBC.config.prestigeClasses).concat(window.SBC.config.mythicPaths).concat(Q1);return $0(Q,{capture:"class",prepend:J?"(?<exClass>Ex-)?":"",append:J?"(\\s+of\\s+(?<deity>[a-z- ]+))?\\s*(?: \\((?<archetype>.*)\\))?\\s+(?<level>\\d+)":""})}function p1(){return $0(window.SBC.config.classes)}function o1(){return $0(window.SBC.config.prestigeClasses)}function T0(){return $0(Q1)}function l1(){return $0(window.SBC.config.mythicPaths)}function c1(){return $0(window.SBC.config.armorBonusTypes)}function Y0(J=!1){let Q=Object.values(pf1.registry.damageTypes.getLabels()).concat(Object.values(pf1.registry.materials.getLabels())).concat(Object.values(pf1.config.damageResistances));return $0(Q,J?{matchStart:!0,matchEnd:!0}:{})}function H1(){return $0(pf1.config.conditionTypes)}function i1(){return $0(pf1.registry.conditions.getLabels())}function X1(){let J=window.SBC.config.naturalAttacks.concat(Object.keys(M0));return $0(J,{pluralize:!0,wordBoundary:!1})}function r1(){return $0(pf1.registry.materials.contents.filter((J)=>J.addon===!1).map((J)=>J.name))}function n1(){return $0(pf1.registry.materials.contents.filter((J)=>J.basic).map((J)=>J.name))}function C0(){return $0(pf1.registry.materials.contents.filter((J)=>J.addon===!1&&J.basic===!1).map((J)=>J.name))}function v0(){return $0(pf1.registry.materials.contents.filter((J)=>J.addon===!0).map((J)=>J.name))}function w1(){return $0(pf1.config.skills,{wordBoundary:!1})}function s1(){return $0(pf1.config.skills,{capture:"name",prepend:"\\+?(?<value>-?\\d*)\\s*",append:"(?<context>.*)",flags:"i",wordBoundary:!1})}function a1(){return/\d+d\d+|\d+\s?(?:hp|damage|minutes?)|[AD]C\s?\d+|\d+\s*(?:rounds)?\/(?:day|week|month|year)|at[ -]will|constant|\d+-ft|\d+\s*natural|(lesser|greater|minor|major)|[-+]?\d/i}function P0(){return/(?<uses>\d+(?!\d*,\s*))\s*(?<useTerm>.*?)?\/(?<period>day|week|month|year)/i}function e1(){let J=Object.values(pf1.config.languages).map((Q)=>Q.toLowerCase());return $0(J)}function G1(){return/(potion|wand|scroll|oil)s?\s+of\s+(.+)/i}function W1(){return $0(window.SBC.config.techColors,{append:"(?!\\s+Powder)"})}function t1(){return $0(window.SBC.config.techTiers,{escape:!1})}function $$(){return/^(Vial|Keg|Dose|Cup)s? of (.*)$/gi}function f1(){let J=Object.keys(window.SBC.config.magicalAbilities.Abilities).map((Z)=>{return Z.replace("_","").replace(/([A-Z])/g," $1").trim().replaceAll(" ","[ -]?")}),Q=window.SBC.config.magicalAbilities.Prefixes;return $0(J,{escape:!1,capture:"ability",prepend:`(?<prefix>(?:${Q.join("|")})\\s+)?`,append:`(?<postfix>(?:\\s+\\(|,\\s+)(?:${Q.join("|")})\\)?)?`})}function J$(){return $0(window.SBC.config.itemModifications,{escape:!1})}function Z$(){return/(?:(?<pp>\d+)\s*pp)?\s*(?:(?<gp>\d+)\s*gp)?\s*(?:(?<sp>\d+)\s*sp)?\s*(?:(?<cp>\d+)\s*cp)?/i}function Q$(){return/\((--|S[UP]|EX)\)/i}function Y$(){return/^(?<name>.+?)\s*\((?<type>--|S[UP]|EX)\)\s*(?<description>.+?)$/i}function H$(){return/(?<type>Fort|Ref|Will)\s*(?<value>[+-]?\d+)/i}function U0(){return $0(pf1.config.actorSizes)}function I1(){return/\b(?:fe)?male\b/i}function _1(){return/^(Any Alignment|\\*A|[LNC][GE]|[LC]?N)\b/i}function X$(){return $0(window.SBC.config.creatureTypes)}function T1(){return new RegExp("\\b(?:"+Object.values(pf1.config.actorSizes).join("|")+")\\b\\s*\\b("+Object.values(window.SBC.config.creatureTypes).join(".*|")+")\\b","i")}function z1(){return/(?<type>Fortitude|Reflex|Will)?\s*DC\s*(?<dc>\d+)?\s*(?<effect>.*)?/i}function K1(){return/(?<formula>\d+d\d+\s*\+?\s*\d*)\s*(?<type>.*damage?)?\s*(?<effect>.*)/i}function q1(){return/(?<range>\d+).*?ft.*\s*(?<type>cone|ray|radius|diameter)/i}function G$(){return $0(["battered","ragged and torn","tattered"],{matchStart:!0,wordBoundary:!1})}class g{constructor(J){this.app=J}get parserGroup(){return"Parser"}get parserType(){return"base"}async _parse(J,Q,Z){return!0}throwError(J,Q,Z,Y,...H){J&&window.SBC.settings.getSetting("debug")&&console.error(J);let X=_.translate(Q,{value:Z,line:Y,...H}),G=new I(I.ERRORLEVELS.ERROR,this.parserGroup,X,Y,Z);this.app.processData.errors.push(G)}logInfo(J,Q,Z,Y){let H=_.translate(J,{value:Q,line:Z,...Y}),X=new I(I.ERRORLEVELS.INFO,this.parserGroup,H,Z,Q);this.app.processData.errors.push(X)}throwParseError(J,Q,Z,Y){this.throwError(J,`parser.${this.parserType}.error`,Q,Z,Y)}async parse(J,Q,Z=void 0){try{return _.log(_.translate(`parser.${this.parserType}.status`,{value:J,line:Q,type:Z})),await this._parse(J,Q,Z)}catch(Y){return this.throwParseError(Y,J,Q,Z),!1}}splitText(J,Q=!0){let Z=[],Y=J.replace(/(\d)(,)(\d)/g,"$1$3").trim();if(Y.search(/[,;]/g)===-1)Z=Y.replace(/\)\s/,");").split(/;/);else if(Y.match(/([^,;]+\([^(]+?[,;][^(]+?\))+?/gi)===null)Z=Y.split(/[,;]/g);else{let H=Y.match(/([^,;]+\([^(]+?[,;][^(]+?\)[^,]*)+?/gi),X=Object.keys(H);for(let W=0;W<X.length;W++){let z=X[W],K=H[z].trim();if(Q){let j=/^(?<name>.*?)(?:\s\((?<parens>.*)\)(?<bonus>.*))?$/g.exec(K),{name:F,parens:L,bonus:E}=j.groups;if(["change shape","witch's familiar","hex","hexes","bardic performances","rogue talents"].includes(F.toLowerCase()))Z.push(K);else{let O=L.split(", "),B=0;for(let N=1;N<O.length;N++){let P=O[N].trim();if(!a1().test(P)){B=0;continue}let M=(O[N-++B]+`, ${P}`).replace(/,\s*,/g,",");O[N-B]=M,O[N]=""}O=O.filter((N)=>N!==""),O.forEach((N)=>{N=N.trim(),N=`${F} (${N})${E}`,Z.push(N)})}}else Z.push(K);let q=new RegExp(J0(K),"i");Y=Y.replace(q,"").replace(/,\s*,/,",").replace(/^,/,"").trim()}let G=[];if(Y!=="")G=Y.replace(/,\s*,/,",").replace(/[;,]\s*$/,"").split(/[,;]/g);if(G.length>0){for(let W=0;W<G.length;W++)G[W]=G[W].trim();Z=G.concat(...Z)}}return Z.map((H)=>H.trim())}fixSplitGroup(J){let Q=J.reverse();return Q.map((Z,Y)=>{if(Y>0&&Q[Y-1].startsWith("+"))return`${Z} ${Q[Y-1]}`;if(!Z.startsWith("+"))return Z}).filter((Z)=>!!Z).reverse()}}class B0 extends g{get parserGroup(){return"Parser/Offense"}get parserType(){return"attack"}async _parse(J,Q,Z){if(!J)return!1;let H=J.replace(/, or/g," or").replace(/, \band\b /g," and ").replace(/\band\b (?![^(]*\)|\()/g,",").split(/\bor\b/g),X=Object.keys(H),G=window.SBC.actor.itemTypes.feat.find((j)=>j.name==="Multiattack"||j.system.tag==="multiAttack"),W=window.SBC.actor.itemTypes.class.find((j)=>{return j.system.tag==="monkUnchained"||j.flags.core?.sourceId==="Compendium.pf1.classes.Item.5mQIOIw4hDhlREPo"}),z=window.SBC.actor.itemTypes.class.find((j)=>{return j.system.tag==="monk"||j.flags.core?.sourceId==="Compendium.pf1.classes.Item.W8dxwZ1CZiwLKsqr"}),K=W?!0:!1,q=W?W:z;console.log("FS| Unchained Monk",W,z,K,q);for(let j=0;j<X.length;j++){let F=this.fixSplitGroup(this.splitText(H[j]));console.log("FS| Attack Group",F,this.splitText(H[j]));for(let L=0;L<F.length;L++)console.log(F[L],L,Q,Z),await this._processAttack(F[L].trim(),L,Q,Z,G,K,q)}return!0}fixSplitGroup(J){let Q=J.reverse();return Q.map((Z,Y)=>{if(Y>0&&Q[Y-1].startsWith("+"))return`${Z} ${Q[Y-1]}`;if(!/^[\d+-]+\//.test(Z))return Z}).filter((Z)=>!!Z).reverse()}async _processAttack(J,Q,Z,Y,H,X,G){console.log("FS| Processing Attack",J,Q,Z,Y,H,X,G);let W=window.SBC.actor,z={attackName:"",formattedAttackName:"",actions:[],img:"",subType:"weapon",attackNotes:"",effectNotes:[],specialEffects:"",isMasterwork:!1,enhancementBonus:null,isPrimaryAttack:!0,held:"normal",isTouch:!1,isNonlethal:!1,isNatural:!1,isBroken:!1,baseTypes:[],weaponGroups:{value:[],custom:""},material:null,addons:{}},K={numberOfAttacks:1,numberOfIterativeAttacks:0,iterativeFormula:"",attackParts:[],formulaicAttacksCountFormula:"",formulaicAttacksBonusFormula:"",inputAttackModifier:0,calculatedAttackBonus:0,attackAbilityType:"",attackAbilityModifier:0,defaultAttackAbility:"",damage:"",damageAbilityType:"",numberOfDamageDice:0,damageDie:0,damageBonus:0,damageModifier:0,damageParts:[],nonCritParts:[],defaultDamageType:"",damageTypes:new Set,specialDamageType:"",hasSpecialDamageType:!1,weaponSpecial:"-",critRange:20,critMult:2,damageMult:1,attackRangeUnits:"",attackRangeIncrement:"",useOriginalDamage:!1,featAttackBonus:0,featDamageBonus:0,featAttackBonusString:"",featDamageBonusString:"",hasMultiattack:H,isUnchainedMonk:X,flurryClass:G,isFlurryOfBlows:!1,flurryOfBlowsType:null},q,j,F,L={attackName:"",weaponGroups:{value:[],custom:""},isMasterwork:!1,attackAbilityType:"",attackAbilityModifier:0,damageAbilityType:"",damageAbilityMax:null,damageBonus:0,damageMult:1,critRange:20,critMult:2,iterativeFormula:"",damageFormula:"",originalDamageFormula:"",featAttackBonus:0,featDamageBonus:0,featAttackBonusString:"",featDamageBonusString:"",baseMaterial:null,material:null,addons:[]},E={statblockIterativeFormula:"",statblockDamageFormula:"",statblockDamageBonus:0,statblockFullFormula:"",statblockEnhancementBonus:0,itemExists:!1,itemIterativeFormula:"",itemDamageFormula:"",itemDamageBonus:0,itemFullFormula:"",itemEnhancementBonus:0};if(console.log("FS| Input Attack",J),J=this._processFlurryOfBlows(J,z),J=this._processAttackProperties(J,z,Q),this._processEnhancementBonus(J,z,E),[q,j,F]=this._processMaterialsAndAddons(J,z),!F)F="steel",z.baseMaterial="steel";this._processAttackName(J,z,q,j,F,Z);let O=await this._acquireWeapon(z,q);if(!O)O=await this._acquireWeapon(z,q,!1);console.log("FS| Weapon",O);let B=null;if(O){if(!z.isNatural){let M=pf1.documents.item.ItemAttackPF.fromItem(O);B=(await W.createEmbeddedDocuments("Item",[M]))[0]}else B=(await D(O))[1];z.attackName=O.name.replace(/^\+\d/,z.enhancementBonus?`+${z.enhancementBonus}`:"").trim();let P=null;if((P=O.name.match(new RegExp("\\b"+pf1.config.actorSizes[window.SBC.actor.system.traits.size.base]+"\\b")))!==null)z.attackName=O.name.replace(P[0],"").trim();z.formattedAttackName=z.attackName}console.log("FS| New Attack",B);let N=z.isNatural;if(B)Y=await this._processWeaponDetails(E,z,L,O,B,Y);if(console.log("FS| Weapon Attack Details",L),this._processAttackModifier(J,K,z,Z),this._processNumberOfIterativeAttacks(J,K,z,E),this._processAttackDamage(J,z,K,E),E.itemExists){if(_.log(`FS| Comparing statblock data to attack item:
Iterative Formula: ${E.statblockIterativeFormula} vs ${E.itemIterativeFormula}
Damage Formula: ${E.statblockDamageFormula} vs ${E.itemDamageFormula}
Damage Bonus: ${E.statblockDamageBonus} vs ${E.itemDamageBonus}
Enhancement Bonus: ${E.statblockEnhancementBonus} vs ${E.itemEnhancementBonus}
Full Formula: ${E.statblockFullFormula} vs ${E.itemFullFormula}
`),E.statblockIterativeFormula===E.itemIterativeFormula&&E.statblockDamageFormula===E.itemDamageFormula&&E.statblockDamageBonus===E.itemDamageBonus&&E.statblockEnhancementBonus===E.itemEnhancementBonus&&E.statblockFullFormula===E.itemFullFormula)N=!0}if(E.itemExists&&N&&!z.isNatural){if(!window.SBC.settings.getSetting("createAttacks"))console.log("FS| Attack already exists and is identical to the statblock. Skipping creation."),await window.SBC.actor.deleteEmbeddedDocuments("Item",[B?.id].filter((P)=>!!P))}else{if(E.itemExists)Object.assign(K,{attackAbilityType:L.attackAbilityType,attackAbilityModifier:L.attackAbilityModifier,damageAbilityType:L.damageAbilityType,featAttackBonus:L.featAttackBonus,featDamageBonus:L.featDamageBonus,featAttackBonusString:L.featAttackBonusString,featDamageBonusString:L.featDamageBonusString,useOriginalDamage:E.statblockDamageFormula===E.itemDamageFormula});switch(Y){case"mwak":this._processMeleeAttackData(B,K,z);break;case"rwak":this._processRangedAttackData(B,K,z,J);break;case"twak":this._processThrownAttackData(B,K,z,J);break;default:if(z.isNatural)this._processNaturalAttackData(B,K,z);break}if(z.attackName.search(/\bSwarm\b/i)!==-1)Y="other";if(J.match(/^\d+/)!==null)K.numberOfAttacks=parseInt(J.match(/(^\d+)/)[1]),z.attackNotes=K.numberOfAttacks+" "+z.attackNotes;if(this._processBaseTypes(B,z,K),!E.itemExists)await this._processFeatBonuses(z,K);this._calculateAttackBonus(K,z);let P=this._calculateDamageBonus(K,z,L);this._processDamageTypes(B,O,z,K),K.damageParts.push({formula:P,types:K.damageTypes});for(let h=1;h<K.numberOfAttacks;h++){let w=h+1+window.SBC.config.const.suffixMultiples[Math.min(3,h)];K.attackParts.push({formula:"",name:w+" "+z.attackName.replace(/e?s$/,"").capitalize()})}let M=null,R=null;[M,R]=this._prepareNewAttackData(B,M,z,K,Y,R),console.log("FS| New Attack Data",M),console.log("FS| Attack Updates",R);let T=null;T=await this._prepareNewAction(B,T,K,z,Y),console.log("FS| New Action Data",T);let S=await this._createFinalAttack(B,M,T,z,R,Y);if(O&&O.isOwned)console.log(S),O.createItemLink("children",S)}}_processFlurryOfBlows(J,Q){let Z=J.match(/flurry of blows\s*\((.*?)\)/i);if(Z)console.log("FS| Flurry of Blows 0",J),J=J.replace(/flurry of blows\s*\((.*?)\)/i,Z[1]).trim(),Q.isFlurryOfBlows=!0,console.log("FS| Flurry of Blows 1",Z,J);else if(J.search(/flurry of blows/i)!==-1)J=J.replace(/flurry of blows/i,"unarmed strike"),Q.isFlurryOfBlows=!0;return J}_processAttackProperties(J,Q,Z){if(J.search(/\d+\s*.*((?:ranged|melee|\+\d+)?\s+touch)\b\s+\(/i)!==-1){if(Q.isTouch=!0,J=J.replace(/((?:ranged|melee|(\+\d+))?\s+touch)\b/i,"$2"),!/[a-z](?![^(]*\))/i.test(J))Q.attackName="Attack "+(Z+1)}if(J.search(/\d+\s*((?:(?:ranged|melee)\s*)?nonlethal)/i)!==-1){if(Q.isNonlethal=!0,J=J.replace(/((?:(?:ranged|melee)\s*)?nonlethal)/i,""),!/[a-z](?![^(]*\))/i.test(J))Q.attackName="Attack "+(Z+1)}if(J.search(/\bbroken\b/i)!==-1){if(Q.isBroken=!0,!/[a-z](?![^(]*\))/i.test(J))Q.attackName="Attack "+(Z+1)}return J}_processEnhancementBonus(J,Q,Z){let Y=J.match(/(?:\W\+|^\+)(\d+)\s+(?!\(|(?:ranged |melee )?touch)/);if(Y)Q.enhancementBonus=parseInt(Y[1]),Q.attackNotes="+"+Q.enhancementBonus+" "+Q.attackNotes,Z.statblockEnhancementBonus=+Q.enhancementBonus;if(J.match(/\bmwk\b/i)!==null)Q.isMasterwork=!0,Q.attackNotes="mwk "+Q.attackNotes}_processMaterialsAndAddons(J,Q){let Z=[],Y="",H="",X=J.match(n1());if(X)Q.baseMaterial=X[0],H=Q.baseMaterial;let G=J.match(C0());if(G)Q.material=G[0],Y=Q.material,Q.material=pf1.registry.materials.contents.find((z)=>z.name===Q.material.capitalize()||z.id===Q.material)?.id??null;let W=J.match(v0());if(W)Z=W,Z.forEach((z,K)=>{Z[K]=pf1.registry.materials.contents.find((q)=>q.name===z.capitalize()||q.id===z.toLowerCase().replace(/\s/,""))?.id??null}),Z=Z.filter((z)=>!!z),Q.addons={},Z.forEach((z)=>{z=z.toLowerCase().replace(/\s/,""),Q.addons[z]=z});return[Z,Y,H]}_processAttackName(J,Q,Z,Y,H,X){if(/((?:[+1-5a-zA-Z’']| (?=[+1-5a-zA-Z’'])|\*)+)[ +0-9(/]+\(*/.test(J)&&!Q.attackName){if(console.log("FS| Attack Name 1",J),Q.attackName=J.match(/((?:[+1-5a-zA-Z’'-]| (?=[+1-5a-zA-Z’'-])|\*)+)[ +0-9(/]+\(*/)[1].replace(/^ | $|\bmwk\b |\*|\+$/gi,"").replace(/\+[1-5]$/,"").replace(/^\d+/,"").trim().replace(/(^\+[1-5])|(\+[1-5]+$)/g,"").trim().replace(new RegExp(`(?<!Magic\\s)${Y}`,"i"),"").replace(new RegExp(`(?<!Magic\\s)${H}`,"i"),"").replace(new RegExp(`\\b(${Z.join("|")})\\b`),""),(Y.toLowerCase()==="stone"||H.toLowerCase()==="stone")&&Z.includes("magic"))Q.attackName=Q.attackName.replace(/stone/i,"Magic Stone").trim();Q.attackNotes+=Q.attackName+" "}Q.attackName=Q.attackName.trim(),Q.formattedAttackName=Q.attackNotes.trim()}async _acquireWeapon(J,Q,Z=!0){let H=window.SBC.compendiumSearch,X=window.SBC.actor.itemTypes.weapon.find((G)=>{let W=G.name.replace(`+${G.system.enh}`,"").replace(pf1.registry.materials.get(G.system.material.normal.value)?.name??"","").replace(/\s{2,}/g," ").replace("Masterwork ","").trim().toLowerCase(),z=J.attackName.toLowerCase(),K=_.stringSimilarity(z,W);if(console.log("Comparing weapon:",W,"item:",z,"similarity:",K),K<0.65){let q=W.replace(`${pf1.config.actorSizes[window.SBC.actor.system.traits.size.base].toLowerCase()} `,"");if(_.stringSimilarity(z,q)<0.65)return!1}if(console.log("Comparing weapon properties..."),J.isMasterwork&&!G.system.masterwork)return console.log("Masterwork status did not match."),!1;if(J.isBroken&&!G.system.broken)return console.log("Broken status did not match."),!1;if(Z&&J.enhancementBonus&&+J.enhancementBonus!==G.system.enh)return console.log("Enhancement bonus did not match."),!1;if(Q.length>0){let q=G.system.material.addon;for(let j of Q)if(!q.includes(j))return console.log("Addon did not match."),!1}return!0});if(!X){if(X1().test(J.attackName)){J.isNatural=!0,J.subType="natural";let G="";G=J.attackName.match(X1())[0].split(" ").map((z)=>z.capitalize()).join(" ");let W=G.replace(/s$/,"");if(Object.values(window.SBC.config.naturalAttacks).find((z)=>z===G||z===W))X=await H.findEntityInCompendia({name:G,altName:G.replace(/s$/,""),item:G},{itemType:"attack"})}}return X}async _processWeaponDetails(J,Q,Z,Y,H,X){if(J.itemExists=!0,Z.attackName=H.name,Z.weaponGroups=Y.system.weaponGroups,!Q.isBroken&&Y.system.broken)Z.isBroken=!0;if(Y.system.material)Z.material=Y.system.material.normal.value,Z.addons=Y.system.material.addon;for(let N of Z.weaponGroups.standard)if(this.app.processData.characterData.weaponGroups[N])Z.featAttackBonus=this.app.processData.characterData.weaponGroups[N],Z.featDamageBonus=this.app.processData.characterData.weaponGroups[N],Z.featAttackBonusString=`${Z.featAttackBonus}[${_.translate("feat.weaponTrainingBonus",{bonus:N})}]`,Z.featDamageBonusString=`${Z.featDamageBonus}[${_.translate("feat.weaponTrainingBonus",{bonus:N})}]`;for(let N of Y.system.baseTypes??[]){N=N.toLowerCase();let P=this._parseWeaponBonuses("attack",N),M=this._parseWeaponBonuses("damage",N);if(P[0])Z.featAttackBonus+=+P[0],Z.featAttackBonusString+=Z.featAttackBonusString.length===0?P[1]:` + ${P[1]}`;if(M[0])Z.featDamageBonus+=+M[0],Z.featDamageBonusString+=Z.featDamageBonusString.length===0?M[1]:` + ${M[1]}`}let G=H.actionTypes.indexOf(X);if(G===-1&&X==="rwak")if(G=H.actionTypes.indexOf("twak"),G!==-1)X="twak";else G=0;else G=0;let W=H.actions.contents[G];Z.attackAbilityType=W.ability.attack,Z.attackAbilityModifier=+_.getModifier(this.app.processData.notes.statistics[Z.attackAbilityType]),Z.damageAbilityType=W.ability.damage,Z.damageAbilityMax=W.ability.max??-100,Z.damageBonus=Z.damageAbilityMax>=0?Math.min(Z.damageAbilityMax,+_.getModifier(this.app.processData.notes.statistics[Z.damageAbilityType])):+_.getModifier(this.app.processData.notes.statistics[Z.damageAbilityType]),Z.damageMult=W.ability.damageMult,Z.critMult=W.ability?.critMult,Z.critRange=W.ability?.critRange;let z=W.getAttacks().map((N)=>N.bonus),K="";z.forEach((N,P)=>{if(isNaN(N))N=0;if(Y.system.masterwork)N++;if(Y.system.masterwork&&Y.system.enh)N--;if(N>-1)K+="+";if(K+=N,P!==z.length-1)K+="/"}),Z.iterativeFormula=K,J.itemIterativeFormula=K;let q=H.getAllDamageSources(W.id),j=Math.floor(Z.damageBonus*Z.damageMult),F="";if(Z.critRange!==20)F+=`/${Z.critRange}-20`;if(Z.critMult!==2)F+=`/x${Z.critMult}`;q.forEach((N)=>{if(N.modifier==="enh")j+=N.value,J.itemEnhancementBonus=N.value;else if(N.flavor==="Broken")j+=N.value;else F+=` plus ${N.formula}`}),J.itemDamageBonus=+j;let L=W.damage.parts[0]?.formula,E=null,O=null,B=window.SBC.actor.system.traits.size.base;if(L){let N=L.match(/sizeRoll\((?<num>\d+),\s?(?<size>\d+),?.*\)/);if(N){E=N.groups.num,O=N.groups.size,B=Object.keys(pf1.config.sizeChart).indexOf(B);let P=pf1.utils.roll.sizeRoll(+E,+O,+B),M=Roll.fromTerms(P).formula;console.log(`Results for ${H.name}: `,"Real Formula: ",L,"Results: ",N,"Processed Roll: ",P,"Formula: ",M),J.itemDamageFormula=M;let R=j>-1?"+":"";F=`${M} ${R}${j}${F}`,J.itemFullFormula=F,Z.originalDamageFormula=L}}return delete H.img,delete H.subType,delete H.held,X}_processAttackDamage(J,Q,Z,Y){let H=J.match(/\(([^)]*)\)(?=[^(]*$)/);if(H!==null){let X=H[1].match(/(\d+)d(\d+)/);if(X!==null)Z.numberOfDamageDice=parseInt(X[1]),Z.damageDie=parseInt(X[2]),Q.attackNotes+=" ("+Z.numberOfDamageDice+"d"+Z.damageDie,Y.statblockDamageFormula=`${Z.numberOfDamageDice}d${Z.damageDie}`;else if((X=H[1].match(/^(\d+)/))!==null)Z.numberOfDamageDice=1,Z.damageDie=parseInt(X[1]),Q.attackNotes+=" ("+Z.damageDie,Y.statblockDamageFormula=`${Z.damageDie}`;else Z.numberOfDamageDice=0,Z.damageDie=0;let G=J.match(/d\d+(\+\d+|-\d+)/);if(G!==null)Z.damageBonus=parseInt(G[1]),Q.attackNotes+=`${Z.damageBonus>=0?"+":"-"}${Z.damageBonus}`,Y.statblockDamageBonus=+Z.damageBonus;else Z.damageAbilityType="";let W=J.match(/\/(\d+)-\d+/);if(W!==null)Z.critRange=parseInt(W[1]),Q.attackNotes+="/"+Z.critRange+"-20";let z=J.match(/\/x(\d+)/);if(z!==null)Z.critMult=parseInt(z[1]),Q.attackNotes+="/x"+Z.critMult;let K=X?H[0].match(/\(\d+d\d+[+\d/\-x\s]*([^)\n]*)(?:$|\))/):[null,H[1]];if(K!==null){let F=K[1];if(Q.specialEffects=F,F=F.replace(/(\s+\b(?:and|plus)\b\s+)/gi,",").replace(/(^,|,$)/g,"").split(","),F.length>0){for(let L=0;L<F.length;L++){let E=F[L];if(E!=="")Q.effectNotes.push(E)}if(Q.effectNotes.length>0&&Z.damageDie>0)Q.attackNotes+=(Z.damageDie>0?" plus ":"")+Q.effectNotes.join(", ")}}if(Z.damageDie>0)Q.attackNotes+=")";let q="";if(Z.critRange!==20)q+=`/${Z.critRange}-20`;if(Z.critMult!==2)q+=`/x${Z.critMult}`;if(Q.specialEffects)q+=` ${Q.specialEffects}`;let j=Y.statblockDamageBonus>-1?"+":"";Y.statblockFullFormula=`${Y.statblockDamageFormula} ${j}${Y.statblockDamageBonus}${q}`}else if(J.match(/\(([^)]*)\)/)!==null){let X=J.replace(/\s+/g," ").match(/\(([^)]*)\)/)[1];Q.attackNotes+=" ("+X+")",Q.effectNotes.push(X)}else _.log("Kind of embarrassing, but this should never happen.")}_processNumberOfIterativeAttacks(J,Q,Z,Y){let H=J.match(/(\/\+\d+)/);if(H!==null){Q.numberOfIterativeAttacks=H.length;for(let X=Q.numberOfIterativeAttacks;X>1;X--){let G=+Q.numberOfIterativeAttacks+1-X,W=+Q.inputAttackModifier-5*G>-1?`/+${+Q.inputAttackModifier-5*G}`:`/${+Q.inputAttackModifier-5*G}`;Q.iterativeFormula+=W,Z.attackNotes+=W}}Y.statblockIterativeFormula=Q.iterativeFormula}_processAttackModifier(J,Q,Z,Y){if(J.match(/(\+\d+|-\d+)[+0-9/ ]*\(*/)!==null){if(J.match(/(?!^)(\+\d+|-\d+)[+0-9/ ]*\(+/)!==null)Q.inputAttackModifier=parseInt(J.match(/(?!^)(\+\d+|-\d+)[+0-9/ ]*\(+/)[1]);else if(J.match(/(?!^)(\+\d+|-\d+)[+0-9/ ]*/)!==null)Q.inputAttackModifier=parseInt(J.match(/(?!^)(\+\d+|-\d+)[+0-9/ ]*/)[1]);else{let H="Failed to find a usable attack modifier",X=new I(I.ERRORLEVELS.ERROR,"Parse/Offense",H,Y);this.app.processData.errors.push(X)}Q.iterativeFormula=`${Q.inputAttackModifier>0?"+":""}`+Q.inputAttackModifier,Z.attackNotes+=Q.inputAttackModifier}}_processMeleeAttackData(J,Q,Z){if(!J)Z.img="systems/pf1/icons/items/weapons/elven-curve-blade.PNG",Q.damageAbilityType="str",Q.attackRangeUnits="melee";if(!this.app.processData.flags.noStr){if(Q.attackAbilityModifier=+_.getModifier(this.app.processData.notes.statistics.str),!J)Q.attackAbilityType=window.SBC.actor.system.attributes?.attack?.meleeAbility||"str"}else if(!J)Q.attackAbilityType="dex",Q.attackAbilityModifier=+_.getModifier(this.app.processData.notes.statistics.dex);if(this.app.processData.flags.hasWeaponFinesse)Q.attackAbilityModifier=+_.getModifier(this.app.processData.notes.statistics.dex),Q.attackAbilityType="dex"}_processRangedAttackData(J,Q,Z,Y){if(!J)Z.img="systems/pf1/icons/items/weapons/thorn-bow.PNG";if(!this.app.processData.flags.noDex){if(Q.attackAbilityModifier=+_.getModifier(this.app.processData.notes.statistics.dex),Q.attackAbilityType=window.SBC.actor.system.attributes?.attack?.rangedAbility||"dex",!J){if(Y.search(/(bow\b)/i)!==-1&&Y.search(/\bcomposite\b/i)===-1)Q.damageAbilityType="";else Q.damageAbilityType="str";Q.attackRangeUnits="ft",Q.attackRangeIncrement="5"}}}_processThrownAttackData(J,Q,Z,Y){if(!J)Z.img="systems/pf1/icons/items/weapons/thorn-bow.PNG";if(!this.app.processData.flags.noDex){if(Q.attackAbilityModifier=+_.getModifier(this.app.processData.notes.statistics.dex),Q.attackAbilityType=window.SBC.actor.system.attributes?.attack?.rangedAbility||"dex",Q.damageAbilityType="str",Q.damageMult=1,!J){if(Y.search(/(bow\b)/i)!==-1&&Y.search(/\bcomposite\b/i)===-1)Q.damageAbilityType="";else Q.damageAbilityType="str";Q.attackRangeUnits="ft",Q.attackRangeIncrement="5"}}}_processNaturalAttackData(J,Q,Z){let Y=Z.attackName.match(X1())[0];if(Object.keys(M0).find((H)=>H===Y)){let H=M0[Y.replace(/s$/,"").toLowerCase()];Z.subType="natural",Z.isPrimaryAttack=H.isPrimaryAttack,Z.img=H.img}}_processBaseTypes(J,Q,Z){if(J&&J.type!=="attack")Q.baseTypes=J.system.baseTypes;else Q.baseTypes=[Q.formattedAttackName.replace(/(^\+[1-5])|(\+[1-5]$)/g,"").trim()];if(Q.isNatural)Q.baseTypes.push("natural")}async _processFeatBonuses(J,Q){for(let Z of J.weaponGroups.standard)if(this.app.processData.characterData.weaponGroups[Z])Q.featAttackBonus=this.app.processData.characterData.weaponGroups[Z],Q.featDamageBonus=this.app.processData.characterData.weaponGroups[Z],Q.featAttackBonusString=`${Q.featAttackBonus}[${_.translate("feat.weaponTrainingBonus",{bonus:Z})}]`,Q.featDamageBonusString=`${Q.featDamageBonus}[${_.translate("feat.weaponTrainingBonus",{bonus:Z})}]`;for(let Z of J.baseTypes??[]){let Y=this._parseWeaponBonuses("attack",Z.toLowerCase()),H=this._parseWeaponBonuses("damage",Z.toLowerCase());if(Y[0])Q.featAttackBonus+=Y[0],Q.featAttackBonusString+=Y[1];if(H[0])Q.featDamageBonus+=H[0],Q.featDamageBonusString+=H[1]}}_calculateAttackBonus(J,Q){let Z=+this.app.processData.characterData.conversionValidation.attributes.bab;if(Q.isFlurryOfBlows)if(Z+=+J.flurryClass.system.level-+J.flurryClass.system.babBase,J.isUnchainedMonk)J.flurryOfBlowsType="unflurry";else J.flurryOfBlowsType="flurry",Z-=2;let Y=Z+ +pf1.config.sizeMods[window.SBC.actor.system.traits.size.base]+ +J.attackAbilityModifier+ +J.featAttackBonus+(Q.isBroken?-2:0);if(Q.isMasterwork)Y++;else if(Q.enhancementBonus>0)Y+=+Q.enhancementBonus;let H=J.hasMultiattack?2:5;if(Q.isNatural&&Y-J.inputAttackModifier===H)Q.isPrimaryAttack=!1;if(!Q.isPrimaryAttack)Y-=5;if(+Y!==+J.inputAttackModifier)J.calculatedAttackBonus=+J.inputAttackModifier-+Y}_calculateDamageBonus(J,Q,Z){let Y=0;if(J.damageAbilityType==="str")Y=Z.damageAbilityMax>=0?Math.min(Z.damageAbilityMax,+_.getModifier(this.app.processData.notes.statistics.str)):+_.getModifier(this.app.processData.notes.statistics.str);let H=+Y+ +Q.enhancementBonus+ +J.featDamageBonus+(Q.isBroken?-2:0);if(+J.damageBonus-+H===Math.floor(Y/2)&&Y>0)H+=Math.floor(Y/2),J.damageMult=1.5,Q.held="2h";else if(+J.damageBonus-+H===-Math.ceil(Y/2)&&Y>0)H-=Math.ceil(Y/2),J.damageMult=0.5,Q.held="oh";J.damageModifier=+J.damageBonus-+H;let G;if(!J.useOriginalDamage){if(G=`sizeRoll(${J.numberOfDamageDice}, ${J.damageDie}, @size, ${window.SBC.actor.system.traits.size.value})`,J.featDamageBonusString&&!window.SBC.settings.getSetting("rollBonusesIntegration"))G+=" + "+J.featDamageBonusString}else if(G=Z.originalDamageFormula,Z.featDamageBonus&&!window.SBC.settings.getSetting("rollBonusesIntegration"))G+=" + "+Z.featDamageBonusString;if(J.damageModifier!==0)if(J.damageModifier>0)G+=" + "+J.damageModifier+"[adjusted by sbc]";else G+=+J.damageModifier+"[adjusted by sbc]";return G=G.replace(/\+ \+/g,"+ ").replace(/\s\s/," "),G}_processDamageTypes(J,Q,Z,Y){if(J){let H=J.actions.contents[0]?.damage?.parts[0]?.types;if(H?.first())H.forEach((G)=>{Y.damageTypes.add(G)});Object.keys(Q?.system.properties??{}).forEach((G)=>{if(Q?.system?.properties?.[G])Z.attackNotes+=`, ${pf1.config.weaponProperties[G]}`})}else{if(Z.isNonlethal)Y.damageTypes.add("nonlethal");Y.damageTypes.add("untyped")}for(let H=0;H<Z.effectNotes.length;H++){let X=Z.effectNotes[H].replaceAll(" energy","").trim(),G=Object.values(pf1.registry.damageTypes.getLabels()).map((z)=>z.toLowerCase()),W=new RegExp("\\b("+G.join("|")+")\\b","gi");if(X.match(/\d+d\d+/)===null){let z=X.match(W);if(z){let K=z[0].replace("electricity","electric").trim();Z.effectNotes.splice(H,1),Y.damageTypes=new Set(K)}}else{let z=X.match(/(\d+d\d+\s*\+*\s*\d*)/)[0],K=X.replace(z,"").replace("plus","").trim();if(K!==""){let q=X.match(W);if(q)K=q[0].replace("electricity","electric").trim()}else K="untyped";Y.nonCritParts.push({formula:z,types:new Set([K])}),Z.effectNotes.splice(H,1)}}}_prepareNewAttackData(J,Q,Z,Y,H,X){let G=Z.isFlurryOfBlows?Y.flurryClass.system.tag:null;if(!J)Q=new Item.implementation({name:_.capitalize(Z.formattedAttackName)||"Undefined",type:"attack",img:Z.img,system:{attackNotes:this.splitText(Z.attackNotes).slice(1),effectNotes:Z.effectNotes,masterwork:Z.isMasterwork||(Z.enhancementBonus??0)>0,broken:Z.isBroken,enh:+Z.enhancementBonus,proficient:!0,held:Z.held,showInQuickbar:!0,subType:Z.subType,identifiedName:_.capitalize(Z.formattedAttackName)||"Undefined",baseTypes:Z.baseTypes,material:{base:{value:Z.baseMaterial},normal:{value:Z.material},addon:Object.keys(Z.addons)},class:G}}),Q.prepareData();else X={_id:J.id,"system.enh":+Z.enhancementBonus,"system.masterwork":Z.isMasterwork||(Z.enhancementBonus??0)>0,"system.held":Z.held,"system.attackNotes":this.splitText(Z.attackNotes).slice(1),"system.effectNotes":Z.effectNotes,"system.broken":Z.isBroken,name:_.capitalize(Z.formattedAttackName)||"Undefined","system.material.base.value":Z.baseMaterial,"system.material.normal.value":Z.material,"system.material.addon":Object.keys(Z.addons),"system.class":G},Q=J;return[Q,X]}async _prepareNewAction(J,Q,Z,Y,H){let X=Z.calculatedAttackBonus!==0?Y.isNatural&&Z.hasMultiattack&&Z.calculatedAttackBonus===3?null:Z.calculatedAttackBonus.toString()+"[adjusted by sbc]":null;if(Z.featAttackBonusString&&!window.SBC.settings.getSetting("rollBonusesIntegration"))X=X?`${X} + ${Z.featAttackBonusString}`:Z.featAttackBonusString;if(X)X=X.replace(/\+(\s+\+)+/g,"+ ").replace(/\s+/g," ").replace(/^\+\s+/,"").replace(/\s+\+$/,"");let G=Y.isFlurryOfBlows?Z.flurryOfBlowsType:Z.attackParts.length>0&&Z.numberOfIterativeAttacks>0?"advanced":Z.numberOfIterativeAttacks>0&&Z.attackParts.length===0?"standard":"custom",W=Y.isFlurryOfBlows?Z.flurryOfBlowsType==="flurry"?(+this.app.processData.characterData.conversionValidation.attributes.bab+(Z.flurryClass.system.level-Z.flurryClass.system.babBase)).toString():null:null;if(!J)Q={...new pf1.components.ItemAction().toObject(void 0,!1),name:Y.attackName.capitalize(),img:Y.img,activation:{cost:1,type:"attack"},bab:W,unchainedAction:{activation:{cost:1,type:"attack"}},range:{value:Z.attackRangeIncrement,units:Z.attackRangeUnits,maxIncrements:1},attackName:Y.attackName.replace(/((?!Blows|blows)e?s)$/,"").capitalize(),actionType:H,attackBonus:X,critConfirmBonus:"",damage:{critParts:[],nonCritParts:Z.nonCritParts,parts:Z.damageParts},extraAttacks:{type:G,manual:Z.attackParts},formulaicAttacks:{count:{formula:Z.formulaicAttacksCountFormula},bonus:{formula:"@formulaicAttack * -5"}},ability:{attack:Z.attackAbilityType,damage:Z.damageAbilityType,damageMult:Z.damageMult,critRange:Z.critRange,critMult:Z.critMult},naturalAttack:{primaryAttack:Y.isPrimaryAttack,["secondary.attackBonus"]:Z.hasMultiattack?"-2":"-5",["secondary.damageMult"]:Z.damageMult&&Y.isNatural?Z.damageMult:0.5},nonlethal:Y.isNonlethal,touch:Y.isTouch};else{let z=J.actionTypes.indexOf(H);if(z===-1&&H==="rwak")if(z=J.actionTypes.indexOf("twak"),z!==-1)H="twak";else z=0;else z=0;let K=J.actions.get(J.actions.contents[z].id),q={attackBonus:X,damage:{critParts:[],nonCritParts:Z.nonCritParts,parts:Z.damageParts},["extraAttacks.type"]:G,["extraAttacks.manual"]:Z.attackParts,["ability.attack"]:Z.attackAbilityType,["ability.critRange"]:Z.critRange,["ability.critMult"]:Z.critMult,["ability.damageMult"]:Z.damageMult,nonlethal:Y.isNonlethal,touch:Y.isTouch,bab:W,actionType:H};if(J.system.subType==="natural")q["naturalAttack.primaryAttack"]=Y.isPrimaryAttack,q["naturalAttack.secondary.attackBonus"]=Z.hasMultiattack?"-2":"-5",q["naturalAttack.secondary.damageMult"]=Z.damageMult&&Y.isNatural?Z.damageMult:0.5;await K.update(q)}return Q}async _createFinalAttack(J,Q,Z,Y,H,X){let G=(J?J.name:Q.name).toLowerCase(),W=J?J.id:Q.id;console.log(`Looking for existing attack with name ${G} and id ${W}`);let z=window.SBC.actor.itemTypes.attack.find((q)=>q.name.toLowerCase()===G&&q.id!==W),K=z;if(z){let q={enh:J?H["system.enh"]??J.system.enh:Y.enhancementBonus,masterwork:J?H["system.masterwork"]??J.system.masterwork:Y.isMasterwork,broken:J?H["system.broken"]??J.system.broken:Y.isBroken};if(!q.enh)q.enh=0;if(z.system.enh===q.enh&&z.system.masterwork===q.masterwork&&z.system.broken===q.broken){let j=new Set(z.system.attackNotes.concat(this.splitText(Y.attackNotes).slice(1))),F=new Set(z.system.effectNotes.concat(Y.effectNotes));await window.SBC.actor.updateEmbeddedDocuments("Item",[{_id:z.id,"system.attackNotes":Array.from(j),"system.effectNotes":Array.from(F)}]);let L=z.actionTypes.indexOf(X);if(L===-1&&X==="rwak"){if(L=z.actionTypes.indexOf("twak"),L!==-1)X="twak"}let E=J?J.actions.contents[0]:Z,O=pf1.utils.deepClone(E);if(O){if(Y.isFlurryOfBlows)O.name="Flurry of Blows";if(!Y.isPrimaryAttack&&Y.isNatural)O.name+=" (Secondary)";else if(O.name!=="Attack"){if(X==="mwak")O.name="Melee";else if(X==="rwak")O.name="Ranged";else if(X==="twak")O.name="Thrown"}else if(X==="mwak")O.name+=" (Melee)";else if(X==="rwak")O.name+=" (Ranged)";else if(X==="twak")O.name+=" (Thrown)";delete O._id}else{if(Y.isFlurryOfBlows)O.name="Flurry of Blows";if(!Y.isPrimaryAttack&&Y.isNatural)O.name+=" (Secondary)";else if(O.name!=="Attack"){if(X==="mwak")O.name="Melee";else if(X==="rwak")O.name="Ranged";else if(X==="twak")O.name="Thrown"}else if(X==="mwak")O.name+=" (Melee)";else if(X==="rwak")O.name+=" (Ranged)";else if(X==="twak")O.name+=" (Thrown)";delete O._id}await pf1.components.ItemAction.create([O],{parent:z});let B=[],N=z.toObject().system.actions;for(let P=0;P<N.length;P++)if(P!==L)B.push(N[P]);if(await z.update({"system.actions":B}),H?.["system.class"])await z.update({"system.class":H["system.class"]});if(J)await window.SBC.actor.deleteEmbeddedDocuments("Item",[J.id])}}else if(!J)await Q.updateSource({"system.actions":[Z]}),Q.prepareData(),K=(await D(Q))[1];else await window.SBC.actor.updateEmbeddedDocuments("Item",[H]),Q.prepareData(),K=Q;return K}_parseWeaponBonuses(J,Q){let Z=0,Y="",H=this.app.processData.characterData;switch(J){case"attack":if(H.weaponFocus.includes(Q))Z++,Y+=`+ 1[${_.translate("feat.weaponFocus")}]`;if(H.weaponFocusGreater.includes(Q))Z++,Y+=`+ 1[${_.translate("feat.greaterWeaponFocus")}]`;if(Object.values(H.weaponGroups).includes(Q))Z+=H.weaponGroups[Q],Y+=`+ 1[${_.translate("feat.weaponTrainingBonus",{bonus:Q})}]`;break;case"damage":if(H.weaponSpecialization.includes(Q))Z+=2,Y+=`+ 2[${_.translate("feat.weaponSpecialization")}]`;if(H.weaponSpecializationGreater.includes(Q))Z+=2,Y+=`+ 2[${_.translate("feat.greaterWeaponSpecialization")}]`;if(Object.values(H.weaponGroups).includes(Q))Z+=H.weaponGroups[Q],Y+=`+ 1[${_.translate("feat.weaponTrainingBonus",{bonus:Q})}]`;break;default:break}return[Z,Y]}static reverseCritRange(J){return{19:20,17:19,15:18}[+J]}}class u{static flagKey="ckl-roll-bonuses";static allTargets=["armorFocus","improvedArmorFocus","elementalFocus","greaterElementalFocus","mythicElementalFocus","furiousFocus","martialFocus","snakeSidewind","spellFocus","greaterSpellFocus","mythicSpellFocus","spellSpecialization","vitalStrike","improvedVitalStrike","greaterVitalStrike","weaponFocus","weaponSpecialization","greaterWeaponFocus","greaterWeaponSpecialization","mythicWeaponFocus","fighterWeaponTraining","versatilePerformance","improvedCritical","ammunition"];static flagSetup={armorFocus:{boolean:"armor-focus",module:"armor-focus"},improvedArmorFocus:{boolean:"armor-focus-improved",module:"armor-focus-improved"},weaponFocus:{boolean:"weapon-focus",module:"weapon-focus"},greaterWeaponFocus:{boolean:"weapon-focus-greater",module:"weapon-focus-greater"},mythicWeaponFocus:{boolean:"weapon-focus-mythic",module:"weapon-focus-mythic"},weaponSpecialization:{boolean:"weapon-specialization",module:"weapon-specialization"},greaterWeaponSpecialization:{boolean:"weapon-specialization-greater",module:"weapon-specialization-greater"},martialFocus:{boolean:"martial-focus",module:"martial-focus"},elementalFocus:{boolean:"elemental-focus",module:"elemental-focus"},spellFocus:{boolean:"spell-focus",module:"spell-focus"},greaterSpellFocus:{boolean:"spell-focus-greater",module:"spell-focus-greater"},mythicSpellFocus:{boolean:"spell-focus-mythic",module:"spell-focus-mythic"},spellSpecialization:{boolean:"spell-specialization",module:"spell-specialization"},furiousFocus:{boolean:"furious-focus",module:"furious-focus"},snakeSidewind:{boolean:"snake-sidewind",module:"snake-sidewind"},vitalStrike:{boolean:"vital-strike",module:"vital-strike"},improvedVitalStrike:{boolean:"vital-strike-improved",module:"vital-strike-improved"},greaterVitalStrike:{boolean:"vital-strike-greater",module:"vital-strike-greater"},mythicVitalStrike:{boolean:"vital-strike-mythic",module:"vital-strike-mythic"},devastatingStrike:{boolean:"devastating-strike",module:"devastating-strike"},improvedDevastatingStrike:{boolean:"devastating-strike-improved",module:"devastating-strike-improved"},versatilePerformance:{boolean:"versatile-performance",module:"versatile-performance"}};static targets=[];static addTarget(J){if(!u.targets.includes(J))u.targets.push(J)}static versatilePerformanceOptions={act:["blf","dis"],comedy:["blf","int"],dance:["acr","fly"],keyboard:["dip","int"],oratory:["blf","sen"],percussion:["han","int"],sing:["blf","sen"],string:["blf","dip"],wind:["dip","han"]};static favoredEnemyPlurals={aberrations:"aberration",animals:"animal",constructs:"construct",dragons:"dragon",humanoids:"humanoid","magical beasts":"magical beast","monstrous humanoids":"monstrous humanoid",oozes:"ooze",outsiders:"outsider",plants:"plant",dwarves:"dwarf",elves:"elf",giants:"giant",goblinoids:"goblinoid",gnolls:"gnoll",gnomes:"gnome",halfings:"halfling",humans:"human",orcs:"orc",reptilians:"reptilian"};static async processTargets(J){for(let Q of J)if(Q.subType==="feat"){let Z=_.parseSubtext(Q.name)[1];if(Q.name.match(/^(?!.*Greater|Mythic).*Weapon Focus/i))await u.addSpecificBonus(Q,"weaponFocus",Z);else if(Q.name.match(/^(?!.*Greater).*Weapon Focus/i))await u.addSpecificBonus(Q,"mythicWeaponFocus",Z);else if(Q.name.match(/Weapon Focus/i))await u.addSpecificBonus(Q,"greaterWeaponFocus",Z);else if(Q.name.match(/^(?!.*Greater).*Weapon Specialization/i))await u.addSpecificBonus(Q,"weaponSpecialization",Z);else if(Q.name.match(/Weapon Specialization/i))await u.addSpecificBonus(Q,"greaterWeaponSpecialization",Z);else if(Q.name.match(/^(?!.*Improved).*Armor Focus/i))await u.addSpecificBonus(Q,"armorFocus",Z);else if(Q.name.match(/Armor Focus/i))await u.addSpecificBonus(Q,"improvedArmorFocus",Z);else if(Q.name.match(/^(?!.*Greater|Mythic).*Elemental Focus/i))await u.addSpecificBonus(Q,"elementalFocus",Z);else if(Q.name.match(/^(?!.*Greater).*Elemental Focus/i))await u.addSpecificBonus(Q,"mythicElementalFocus",Z);else if(Q.name.match(/Elemental Focus/i))await u.addSpecificBonus(Q,"greaterElementalFocus",Z);else if(Q.name.match(/Martial Focus/i))await u.addSpecificBonus(Q,"martialFocus",Z);else if(Q.name.match(/^(?!.*Greater|Mythic).*Spell Focus/i))await u.addSpecificBonus(Q,"spellFocus",Z);else if(Q.name.match(/^(?!.*Greater).*Spell Focus/i))await u.addSpecificBonus(Q,"mythicSpellFocus",Z);else if(Q.name.match(/Spell Focus/i))await u.addSpecificBonus(Q,"greaterSpellFocus",Z);else if(Q.name.match(/^(?!.*Greater).*Spell Specialization/i))await u.addSpecificBonus(Q,"spellSpecialization",Z);else if(Q.name.match(/Furious Focus/i))await u.addSpecificBoolean(Q,"furiousFocus");else if(Q.name.match(/Snake Sidewind/i))await u.addSpecificBoolean(Q,"snakeSidewind");else if(Q.name.match(/Improved Critical/i))await u.addImprovedCritical(Q,Z);else if(Q.name.match(/^(?!.*Greater|Improved|Mythic).*Vital Strike/i))await u.addSpecificBoolean(Q,"vitalStrike");else if(Q.name.match(/^(?!.*Greater|Mythic).*Vital Strike/i))await u.addSpecificBoolean(Q,"improvedVitalStrike");else if(Q.name.match(/^(?!.*Mythic).*Vital Strike/i))await u.addSpecificBoolean(Q,"greaterVitalStrike");else if(Q.name.match(/Vital Strike/i))await u.addSpecificBoolean(Q,"mythicVitalStrike");else if(Q.name.match(/^(?!.*Improved).*Devastating Strike/i))await u.addSpecificBoolean(Q,"devastatingStrike");else if(Q.name.match(/Devastating Strike/i))await u.addSpecificBoolean(Q,"improvedDevastatingStrike")}else if(Q.subType==="classFeat"){let Z=_.parseSubtext(Q.name)[1];if(Q.name.match(/Versatile Performance/i)&&Z)await u.addVersatilePerformance(Q,Z.toLowerCase());else if(Q.name.match(/Weapon Training/i)&&Z)await u.addWeaponTraining(Q,Z);else if(Q.name.match(/Favored Enemy/i)&&Z)await u.addFavoredEnemy(Q,Z);else if(Q.name.match(/Favored Terrain/i)&&Z);}else if(Q.system.subType==="ammo")await u.addAmmoProperties(Q)}static async addAmmoProperties(J){let Q={},Z=J.name.toLowerCase(),[Y,H]=_.extractCreatureTypeInfo(Z),X=[];if(J.name.match(/bane/i))Object.assign(Q,{"ammo-bane-creature-type":[Y],"ammo-bane-creature-subtype":H?[H]:[]});let W=Z.match(/\+[12345]/)?.[0]||0;if(W)Object.assign(Q,{"ammo-enhancement":`${W.replace("+","")}`});if(Z.match(/flaming/i)){if(X.push({formula:"1d6[Flaming]",types:["fire"],crit:"nonCrit"}),Z.match(/flaming burst/i))X.push({formula:"1d10[Flaming Burst]",types:["fire"],crit:"crit"})}if(Z.match(/frost/i)){if(X.push({formula:"1d6[Frost]",types:["cold"],crit:"nonCrit"}),Z.match(/icy burst/i))X.push({formula:"1d10[Icy Burst]",types:["cold"],crit:"crit"})}if(Z.match(/shock/i)){if(X.push({formula:"1d6[Shock]",types:["electricit"],crit:"nonCrit"}),Z.match(/shocking burst/i))X.push({formula:"1d10[Shocking Burst]",types:["electricit"],crit:"crit"})}if(Z.match(/corrosive/i)){if(X.push({formula:"1d6[Corrosive]",types:["acid"],crit:"nonCrit"}),Z.match(/corrosive burst/i))X.push({formula:"1d10[Corrosive Burst]",types:["acid"],crit:"crit"})}if(X.length>0)Object.assign(Q,{"ammo-damage":X});await J.update({flags:{[u.flagKey]:Q}})}static async addSpecificBonus(J,Q,Z){try{if(u.allTargets.includes(Q)){if(!Z){console.warn(`SBC: ${Q} doesn not have a valid target.`);return}await J.addItemBooleanFlag(u.flagSetup[Q].boolean),await J.setFlag(u.flagKey,u.flagSetup[Q].module,Z)}else console.warn(`SBC: ${Q} is not a valid bonus.`)}catch(Y){console.log(Y)}}static async addSpecificBoolean(J,Q){if(u.allTargets.includes(Q))await J.addItemBooleanFlag(u.flagSetup[Q].boolean);else console.warn(`SBC: ${Q} is not a valid bonus.`)}static async addImprovedCritical(J,Q){if(!Q){console.warn("SBC: Improved Critical does not have a valid target.");return}await J.update({system:{flags:{boolean:{bonus_crit:!0,"target_weapon-type":!0}}},flags:{[u.flagKey]:{"bonus_crit-keen":!0,"target_weapon-type":[Q]}}});let Z=J.actor.itemTypes.attack.filter((H)=>H.system.baseTypes.includes(Q)),Y=[];for(let H of Z){let G=H.toObject().system.actions??[];G.forEach((W)=>setProperty(W,"ability.critRange",B0.reverseCritRange(W.ability.critRange))),Y.push({_id:H.id,"system.actions":G})}await J.actor.updateEmbeddedDocuments("Item",Y)}static async addVersatilePerformance(J,Q){if(!Q){console.warn("SBC: Versatile Performance doesn not have a valid target.");return}let Z=u.versatilePerformanceOptions[Q];if(Z){let Y=J.actor,H=Y.allSkills.find((X)=>X.startsWith("prf.")&&Y.getSkillInfo(X).name.toLowerCase()===Q.toLowerCase());if(!H){console.warn(`SBC: Perform (${Q}) skill could not be found.`);return}await J.addItemBooleanFlag(u.flagSetup.versatilePerformance.boolean),await J.setFlag(u.flagKey,u.flagSetup.versatilePerformance.module,[{base:H,choice1:Z[0],choice2:Z[1],expanded:""}])}}static async addWeaponTraining(J,Q){if(!Q){console.warn("SBC: Weapon Training doesn not have a valid target.");return}let Z=Q.match(/\+(\d+)/)[1],Y=Q.match(/(.*)\s\+\d+/)[1].toLowerCase().replace("heavy blades","bladesHeavy").replace("light blades","bladesLight");await J.update({system:{flags:{boolean:{bonus_attack:!0,bonus_damage:!0,"target_weapon-group":!0}}},flags:{[u.flagKey]:{bonus_attack:Z,"bonus_attack-type":"untyped",bonus_damage:[],"bonus_damage-change":[{formula:Z,type:"untyped"}],"target_weapon-group":[Y]}}})}static async addFavoredEnemy(J,Q){if(!Q){console.warn("SBC: Weapon Training doesn not have a valid target.");return}let[Z,Y]=Q.split("+").map((G)=>G.trim());Z=Z.toLowerCase();for(let[G,W]of Object.entries(u.favoredEnemyPlurals))if(Z.includes(G)){Z=Z.replace(G,W);break}let[H,X]=_.extractCreatureTypeInfo(Z);await J.update({system:{flags:{boolean:{bonus_attack:!0,bonus_damage:!0,"target_creature-type":!0,"target_creature-subtype":!0}}},flags:{[u.flagKey]:{bonus_attack:Y,"bonus_attack-type":"untyped",bonus_damage:[],"bonus_damage-change":[{formula:Y,type:"untyped"}],"target_creature-type":[H],"target_creature-subtype":X?[X]:[],target_toggle:"all"}}})}}class I{static ERRORLEVELS=Object.freeze({FATAL:Symbol("0"),ERROR:Symbol("1"),WARNING:Symbol("2"),INFO:Symbol("3")});static levels={[I.ERRORLEVELS.FATAL]:"FATAL",[I.ERRORLEVELS.ERROR]:"ERROR",[I.ERRORLEVELS.WARNING]:"WARNING",[I.ERRORLEVELS.INFO]:"INFO"};constructor(J=I.ERRORLEVELS.FATAL,Q="Default Error Keyword",Z="Default Error Message",Y=-1,H=void 0){this.level=J,this.keyword=Q,this.message=Z,this.line=Y,this.value=H}get errorLabel(){return I.levels[this.level]}}class x0 extends g{async parse(J,Q,Z,Y=null,H=null,X=!0){let W=window.SBC.compendiumSearch;_.log(_.translate("parser.entity.status",{value:J,pack:Z}));let z=[];try{let K=[];if(typeof Z==="string")K.push("pf1."+Z);else Z.forEach((j)=>{K.push("pf1."+j)});let q=this.splitText(J,X);q=this.fixSplitGroup(q);for(let j=0;j<q.length;j++){let F=q[j].trim().replaceAll(/\*/g,"").trim(),L=P0().exec(F);if(L)if(F=F.replace(` ${L[0]}`,""),F.indexOf("("))F=F.replace("(",`(${L[0]}, `).replace(/,\s\)/g,")");else F+=` (${L[0]})`;if(/(?!\()\)$/.test(F))F=F.replace(/\)$/,"");if(/\((?!\))/.test(F))F+=")";if(F=F.replace(/\[/g,"(").replace(/]/g,")").replaceAll(/,\s+,/g,","),/sneak attack \+\d+d\d+ plus \d+ bleed/i.test(F))F=F.replace(/ plus \d+ bleed/i,"");let E=F.split(/\s/);if(console.log(`Looking at ${F}.`),/\+?\d+(d\d+)?/.test(E[E.length-1]))E.splice(E.length-1,1);if(Y==="feat")if(F.replace(/B$/,""),F.endsWith("M")){F=F.substring(0,F.length-1);let f=`${F} (Mythic)`;if(!q.find((r)=>r===f))q.push(f);if(q.slice(0,Math.max(0,j-1)).find((r)=>r===F))continue}else{let f=F.match(/(.*)M \((.*)\)/);if(f){F=`${f[1]} (${f[2]})`;let r=`${f[1]} (Mythic) (${f[2]})`;if(!q.find((o)=>o===r))q.push(r);if(q.slice(0,Math.max(0,j-1)).find((o)=>o===f[1]))continue}}let O=_.parseSubtext(`${F.replace(/\+*\d+$/g,"").trim()}`)[0].replace(/(\d+[ -]ft\.$)/i,"").trim(),B=`${E.join(" ").trim()}`,N=`${F.match(/\((.*)\)/)?F.match(/\((.*)\)/)[1]:""}`;if(L)B=B.replace(L[0],"").replace(/,\s*/,"").trim(),N=N.replace(L[0],"").replace(/,\s*/,"").trim();let P=N.replace(/(\+?\d+?)$/,"").trim().replace(/^(.*?action;)/i,"").trim();if(N.match(/^Mythic\) \(/i))O+=" (Mythic)";let M={search:new Set,type:Z,item:F};if(M.search=_.createSearchSet([P,N,B,F,O],!0),/channel\s*(positive|negative)\s*energy/i.test(F))M.search.add("channel energy");let R=null;if(typeof Y!=="string"){if(R=await W.findEntityInCompendia(M,{itemTypes:Y,itemSubTypes:Array.isArray(H)?H:[H],classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race}),!R)R=await W.findEntityInCompendia(M,{itemTypes:Y,itemSubTypes:["classFeat","misc"],classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race})}else R=await W.findEntityInCompendia(M,{itemType:Y,itemSubTypes:Array.isArray(H)?H:[H],classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race});let T=(R?.name||F).capitalize(),S=_.parseSubtext(F),h=S[0],w=S[1]?.replace(/^(.*?action;)/i,"").trim(),p=w?.replace(/(\+?\d+?)$/,"").trim(),d=S[1]?.match(/(?:^|,)\s*(\d+)\s*(?:,|$)/);if(d)d=d[1];else d=1;if(R!==null){if(!w)await R.updateSource({name:_.capitalize(F)});else if(w&&new RegExp(`(^${J0(w)}|^${J0(p)})`,"i").test(R.name)===!1||O==="weapon training")await R.updateSource({name:_.capitalize(h+(w?` (${w})`:""))});else if(w&&R.name!==_.capitalize(w)&&R.name!==_.capitalize(p))await R.updateSource({name:_.capitalize(F.trim())});if(/\*$/g.test(F))await R.updateSource({name:R.name+"*"});await _.addAssociatedClass(R,window.SBC.actor.itemTypes.class)}else{if(typeof Z==="object")switch(Z[0]){case"monster-abilities":Object.assign(M,{name:_.translate("parser.entity.placeholderSpecialAbilityName",{input:F}),type:"misc",desc:_.translate("parser.entity.placeholderSpecialAbilityDescription")});break;case"special-attacks":Object.assign(M,{name:_.translate("parser.entity.placeholderSpecialAttackName",{input:F}),type:"attack",desc:_.translate("parser.entity.placeholderSpecialAttackDescription")});break}if(M.type==="class-abilities"||M.type==="classFeat")M.type="misc";R=await _.generatePlaceholderEntity(M,Q)}if(d>1){let f=R.name;f=f.replace(/(?<![+-]\s*\d*\s*|DC\s*)\b(\d+)\b(?!\s*d\s*\d*\s*[+-])/i,"").replace(/\(\s*\)/,"").trim(),await R.updateSource({name:f})}let[a,C,e]=[null,null,T+(w?` (${w})`:"")];if(typeof Z==="string"&&(Z==="class-abilities"||Z==="monster-abilities")||typeof Z==="object"&&Z.length>0){let f=_.checkForDuplicateItem(window.SBC.actor,"feat","classFeat",e,R);if(!f)f=_.checkForDuplicateItem(window.SBC.actor,"feat",null,e,R);if(f&&!Z.includes("special-attacks")){if(w&&new RegExp(`(^${J0(w)}|^${J0(p)})`,"i").test(f.name)===!1||!w&&new RegExp(`(^${J0(h)})`,"i").test(f.name)===!1)await f.update({name:_.capitalize(F)});else if(w&&w!==p&&f.name.toLowerCase()===p.toLowerCase())await f.update({name:_.capitalize(w)});C=f}else if([a,C]=await D(R),d>1)for(let r=1;r<d;r++)await D(R)}else{let f=_.checkForDuplicateItem(window.SBC.actor,Y,H,e,R);if(!f){if([a,C]=await D(R),d>1)for(let r=1;r<d;r++)await D(R)}else C=f}if(C){let f=_.parseSubtext(F);if(new RegExp(`(^${J0(C.name)})`,"i").test(F)===!1)f[0]=C.name.replace(/^Special (.*?):/,"").trim(),f[1]="",await C.update({name:f[0]+(f[1]?` (${f[1]})`:"")});if(d>1){let U=f[1];U=U.replace(/(?<![+-]\s*\d*\s*|DC\s*)\b(\d+)\b(?!\s*d\s*\d*\s*[+-])[,)]?/i,"").replace(/\(\s*\)/,"").trim(),f[1]=U}let b=f[1],v=b?.split(/[;,]\s?/);if(v){let U={attack:null,damageFormula:null,damageType:null,damageEffect:[],saveDC:null,saveType:null,saveEffect:null,templateRange:null,templateType:null,uses:null,usesPeriod:null},x=null;if(v.forEach((k)=>{if((x=k.match(K1()))!==null&&U.damageFormula===null)U.damageFormula=x.groups.formula,U.damageType=x.groups.type?.replace(" damage","").trim(),U.damageEffect.push(x.groups.effect),b=b.replace(x[0],"").trim();else if(/([+|-]\d+)/.test(k))U.attack=k.match(/([+|-]\d+)/)[0].replace("+","");else if((x=k.match(z1()))!==null&&U.saveDC===null)U.saveDC=x.groups.dc,U.saveType=x.groups.type,U.saveEffect=x.groups.effect,b=b.replace(x[0],"").trim();else if((x=k.match(P0()))!==null)U.uses=x.groups.uses,U.usesPeriod=x.groups.period,b=b.replace(x[0],"").trim();else if((x=k.match(q1()))!==null)U.templateRange=x.groups.range,U.templateType=x.groups.type,b=b.replace(x[0],"").trim();else if(k.match(/useable/i))U.damageEffect.push(k),b=b.replace(k,"").trim()}),b=b.replace(/^\s*,|,\s*$/g,"").trim(),v=b?.split(/[;,]\s?/),v.length>0&&v[0]!=="")v=v.map((k)=>_.capitalize(k));else v=null;let t=[];if(Object.keys(U).length>0&&C.actions.size>0)await _.runParallelOps(C.actions.contents,async(k,l,c)=>{let m=C.actions.get(k.id),y={};if(U.damageEffect.length>0){let i=m.notes.effect??[];i=i.concat(U.damageEffect),y["notes.effect"]=i,b=b.replace(U.damageEffect.join(""),"").trim()}if(U.damageFormula&&m.damage.parts.length>0){let i=m.damage.parts[0].types;if(pf1.registry.damageTypes.get(U.damageType)===void 0)i.values=[],i.custom=U.damageType??"";else i.values=[U.damageType],i.custom="";if((await _.processFormula(m.damage.parts[0].formula,window.SBC.actor,C)).formula!==U.damageFormula)y["damage.parts"]=[{formula:U.damageFormula,type:i}]}if(U.attack&&["spellsave","save","heal","other"].includes(m.actionType)===!1)y.attackBonus=U.attack;if(m.save.dc){if(U.saveDC){let i=(await _.processFormula(m.save.dc,window.SBC.actor,C)).total;if(i!==U.saveDC){let Q0=U.saveDC-i;if(+Q0>0)y["save.dc"]=m.save.dc+` + ${+Q0}`}}if(U.saveType)switch(U.saveType){case"Fortitude":y["save.type"]="fort";break;case"Reflex":y["save.type"]="ref";break;case"Will":y["save.type"]="will";break;default:y["save.type"]=null;break}if(U.saveEffect)y["save.description"]=(U.saveType?`${U.saveType} `:"")+U.saveEffect}if(U.templateRange)y["measureTemplate.size"]=U.templateRange;if(U.templateType)switch(U.templateType){case"cone":y["measureTemplate.type"]="cone";break;case"ray":y["measureTemplate.type"]="ray";break;default:y["measureTemplate.type"]="circle";break}if(Object.keys(y).length>0)await m.update(y),c.push(m)},[t]);if(await C.update({"system.actions":t}),U.uses){let k=C.system.uses.maxFormula?(await _.processFormula(C.system.uses.maxFormula,window.SBC.actor,C)).total:0;if(k!==U.uses){let l=C.system.uses.maxFormula,c=(U.uses-k).toString(),m=C.system.uses.per?C.system.uses.per:"charges";switch(m){case"round":m="round";break;case"hour":m="hour";break;case"day":m="day";break;case"week":m="week";break;default:break}let y={"system.uses.maxFormula":l?+c>0?l+` + ${+c}`:l:c,"system.uses.per":m,"system.uses.value":C.system.uses.value+ +c};if(C.actions.size===0){let Q0={...new pf1.components.ItemAction().toObject(void 0,!1),name:game.i18n.localize("PF1.Use")};y["system.actions"]=[Q0]}if(await C.update(y),b=b.replace(/(\d+)\/(day|week|month|year)/i,"").trim().replace(/^,|,$/g,"").trim(),v=b?.split(/[;,]\s?/)??[],v.length>0&&v[0]!=="")v=v.map((i)=>_.capitalize(i));else v=null;await C.update({name:_.capitalize(f[0])+(v?.length>0?` (${v.join(", ")})`:"")})}}}if(N.match(/^Mythic\) \(/i)){let U=N.indexOf("("),x=N.substring(U+1).replace(")","");v?.push(x)}if(d>1)if(v)v.unshift(d);else v=[d];z.push({name:f[0],kind:C.system.abilityType,description:C.system.description.value,subParts:v})}if(F.toLowerCase()==="weapon finesse"&&Z==="feats")this.app.processData.flags.hasWeaponFinesse=!0}return[!0,z]}catch(K){return this.throwError(K,"parser.entity.error",J,Q,{type:Y}),[!1,[]]}}}class H0 extends g{constructor(J,Q){super(J);if(!Q)throw Error(_.translate("parser.errors.missingArgument",{arg:"targetField"}));this.targetField=Q}async parse(J,Q){if(J===void 0)throw Error(_.translate("parser.errors.missingArgument",{arg:"value"}));if(Q===void 0)throw Error(_.translate("parser.errors.missingArgument",{arg:"line"}));_.log(_.translate("parser.notes.status",{value:J,targetField:this.targetField})),this.app.processData.notes[J]=J;try{for(let Z of this.targetField)await W$(this.app.processData.notes,Z,J);return!0}catch(Z){return this.throwError(Z,"parser.notes.error",J,Q,{targetField:this.targetField}),!1}}}class s extends g{constructor(J,Q,Z){super(J);if(!Q)throw new Error(_.translate("parser.simple.missingArgument",{arg:"targetFields"}));if(this.targetFields=Q,!Z)throw new Error(_.translate("parser.simple.missingArgument",{arg:"supportedType"}));if(!["number","string"].includes(Z))throw new Error(_.translate("parser.simple.invalidArgumentType"));this.supportedType=Z}async parse(J,Q,Z=void 0){if(J===void 0)throw new Error(_.translate("parser.simple.missingArgument",{arg:"value"}));if(Q===void 0)throw new Error(_.translate("parser.simple.missingArgument",{arg:"line"}));if(J==="")return!1;if(_.log(_.translate("parser.simple.status",{value:J,targetFields:this.targetFields.join(", ")})),typeof J===this.supportedType||J==="NaN")try{for(let Y of this.targetFields)await F0(window.SBC.actor,Y,J==="NaN"?null:J);return!0}catch(Y){return this.throwError(Y,"parser.simple.error",J,Q,{targetFields:this.targetFields.join(", ")}),!1}else return this.throwError(void 0,"parser.simple.inputNotOfSupportedType",J,Q,{supportedType:this.supportedType}),!1}}class S0 extends g{async parse(J,Q,Z,Y=null,H=null,X=!0){let W=window.SBC.compendiumSearch;_.log(_.translate("parser.entity.status",{value:J,pack:Z}));let z=[];try{let K=[];if(typeof Z==="string")K.push("pf1."+Z);else Z.forEach((j)=>{K.push("pf1."+j)});let q=this.splitText(J,X);q=this.fixSplitGroup(q),this.processForChoices(q);for(let j=0;j<q.length;j++){let F=q[j].trim().replaceAll(/\*/g,"").trim(),L=P0().exec(F);if(L)if(F=F.replace(` ${L[0]}`,""),F.indexOf("("))F=F.replace("(",`(${L[0]}, `).replace(/,\s\)/g,")");else F+=` (${L[0]})`;if(/(?!\()\)$/.test(F))F=F.replace(/\)$/,"");if(/\((?!\))/.test(F))F+=")";if(F=F.replace(/\[/g,"(").replace(/]/g,")").replaceAll(/,\s+,/g,","),/sneak attack \+\d+d\d+ plus \d+ bleed/i.test(F))F=F.replace(/ plus \d+ bleed/i,"");let E=F.split(/\s/);if(console.log(`Looking at ${F}.`),/\+?\d+(d\d+)?/.test(E[E.length-1]))E.splice(E.length-1,1);if(Y==="feat")if(F.replace(/B$/,""),F.endsWith("M")){F=F.substring(0,F.length-1);let f=`${F} (Mythic)`;if(!q.find((r)=>r===f))q.push(f);if(q.slice(0,Math.max(0,j-1)).find((r)=>r===F))continue}else{let f=F.match(/(.*)M \((.*)\)/);if(f){F=`${f[1]} (${f[2]})`;let r=`${f[1]} (Mythic) (${f[2]})`;if(!q.find((o)=>o===r))q.push(r);if(q.slice(0,Math.max(0,j-1)).find((o)=>o===f[1]))continue}}let O=_.parseSubtext(`${F.replace(/\+*\d+$/g,"").trim()}`)[0].replace(/(\d+[ -]ft\.$)/i,"").trim(),B=`${E.join(" ").trim()}`,N=`${F.match(/\((.*)\)/)?F.match(/\((.*)\)/)[1]:""}`;if(L)B=B.replace(L[0],"").replace(/,\s*/,"").trim(),N=N.replace(L[0],"").replace(/,\s*/,"").trim();let P=N.replace(/(\+?\d+?)$/,"").trim().replace(/^(.*?action;)/i,"").trim();if(N.match(/^Mythic\) \(/i))O+=" (Mythic)";let M={search:new Set,type:Z,item:F};if(M.search=_.createSearchSet([P,N,B,F,O],!0),/channel\s*(positive|negative)\s*energy/i.test(F))M.search.add("channel energy");let R=null;if(typeof Y!=="string"){if(R=await W.findEntityInCompendia(M,{itemTypes:Y,itemSubTypes:Array.isArray(H)?H:[H],classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race}),!R)R=await W.findEntityInCompendia(M,{itemTypes:Y,itemSubTypes:["classFeat","misc"],classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race})}else R=await W.findEntityInCompendia(M,{itemType:Y,itemSubTypes:Array.isArray(H)?H:[H],classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race});let T=(R?.name||F).capitalize(),S=_.parseSubtext(F),h=S[0],w=S[1]?.replace(/^(.*?action;)/i,"").trim(),p=w?.replace(/(\+?\d+?)$/,"").trim(),d=S[1]?.match(/(?:^|,)\s*(\d+)\s*(?:,|$)/);if(d)d=d[1];else d=1;if(R!==null){if(!w)await R.updateSource({name:_.capitalize(F)});else if(w&&new RegExp(`(^${J0(w)}|^${J0(p)})`,"i").test(R.name)===!1||O==="weapon training")await R.updateSource({name:_.capitalize(h+(w?` (${w})`:""))});else if(w&&R.name!==_.capitalize(w)&&R.name!==_.capitalize(p))await R.updateSource({name:_.capitalize(F.trim())});if(/\*$/g.test(F))await R.updateSource({name:R.name+"*"});await _.addAssociatedClass(R,window.SBC.actor.itemTypes.class)}else{if(typeof Z==="object")switch(Z[0]){case"monster-abilities":Object.assign(M,{name:_.translate("parser.entity.placeholderSpecialAbilityName",{input:F}),type:"misc",desc:_.translate("parser.entity.placeholderSpecialAbilityDescription")});break;case"special-attacks":Object.assign(M,{name:_.translate("parser.entity.placeholderSpecialAttackName",{input:F}),type:"attack",desc:_.translate("parser.entity.placeholderSpecialAttackDescription")});break}if(M.type==="class-abilities"||M.type==="classFeat")M.type="misc";R=await _.generatePlaceholderEntity(M,Q)}if(d>1){let f=R.name;f=f.replace(/(?<![+-]\s*\d*\s*|DC\s*)\b(\d+)\b(?!\s*d\s*\d*\s*[+-])/i,"").replace(/\(\s*\)/,"").trim(),await R.updateSource({name:f})}let[a,C,e]=[null,null,T+(w?` (${w})`:"")];if(typeof Z==="string"&&(Z==="class-abilities"||Z==="monster-abilities")||typeof Z==="object"&&Z.length>0){let f=_.checkForDuplicateItem(window.SBC.actor,"feat","classFeat",e,R);if(!f)f=_.checkForDuplicateItem(window.SBC.actor,"feat",null,e,R);if(f&&!Z.includes("special-attacks")){if(w&&new RegExp(`(^${J0(w)}|^${J0(p)})`,"i").test(f.name)===!1||!w&&new RegExp(`(^${J0(h)})`,"i").test(f.name)===!1)await f.update({name:_.capitalize(F)});else if(w&&w!==p&&f.name.toLowerCase()===p.toLowerCase())await f.update({name:_.capitalize(w)});C=f}else if([a,C]=await D(R),d>1)for(let r=1;r<d;r++)await D(R)}else{let f=_.checkForDuplicateItem(window.SBC.actor,Y,H,e,R);if(!f){if([a,C]=await D(R),d>1)for(let r=1;r<d;r++)await D(R)}else C=f}if(C){let f=_.parseSubtext(F);if(new RegExp(`(^${J0(C.name)})`,"i").test(F)===!1)f[0]=C.name.replace(/^Special (.*?):/,"").trim(),f[1]="",await C.update({name:f[0]+(f[1]?` (${f[1]})`:"")});if(d>1){let U=f[1];U=U.replace(/(?<![+-]\s*\d*\s*|DC\s*)\b(\d+)\b(?!\s*d\s*\d*\s*[+-])[,)]?/i,"").replace(/\(\s*\)/,"").trim(),f[1]=U}let b=f[1],v=b?.split(/[;,]\s?/);if(v){let U={attack:null,damageFormula:null,damageType:null,damageEffect:[],saveDC:null,saveType:null,saveEffect:null,templateRange:null,templateType:null,uses:null,usesPeriod:null},x=null;if(v.forEach((k)=>{if((x=k.match(K1()))!==null&&U.damageFormula===null)U.damageFormula=x.groups.formula,U.damageType=x.groups.type?.replace(" damage","").trim(),U.damageEffect.push(x.groups.effect),b=b.replace(x[0],"").trim();else if(/([+|-]\d+)/.test(k))U.attack=k.match(/([+|-]\d+)/)[0].replace("+","");else if((x=k.match(z1()))!==null&&U.saveDC===null)U.saveDC=x.groups.dc,U.saveType=x.groups.type,U.saveEffect=x.groups.effect,b=b.replace(x[0],"").trim();else if((x=k.match(P0()))!==null)U.uses=x.groups.uses,U.usesPeriod=x.groups.period,b=b.replace(x[0],"").trim();else if((x=k.match(q1()))!==null)U.templateRange=x.groups.range,U.templateType=x.groups.type,b=b.replace(x[0],"").trim();else if(k.match(/useable/i))U.damageEffect.push(k),b=b.replace(k,"").trim()}),b=b.replace(/^\s*,|,\s*$/g,"").trim(),v=b?.split(/[;,]\s?/),v.length>0&&v[0]!=="")v=v.map((k)=>_.capitalize(k));else v=null;let t=[];if(Object.keys(U).length>0&&C.actions.size>0)await _.runParallelOps(C.actions.contents,async(k,l,c)=>{let m=C.actions.get(k.id),y={};if(U.damageEffect.length>0){let i=m.notes.effect??[];i=i.concat(U.damageEffect),y["notes.effect"]=i,b=b.replace(U.damageEffect.join(""),"").trim()}if(U.damageFormula&&m.damage.parts.length>0){let i=m.damage.parts[0].types;if(pf1.registry.damageTypes.get(U.damageType)===void 0)i.values=[],i.custom=U.damageType??"";else i.values=[U.damageType],i.custom="";if((await _.processFormula(m.damage.parts[0].formula,window.SBC.actor,C)).formula!==U.damageFormula)y["damage.parts"]=[{formula:U.damageFormula,type:i}]}if(U.attack&&["spellsave","save","heal","other"].includes(m.actionType)===!1)y.attackBonus=U.attack;if(m.save.dc){if(U.saveDC){let i=(await _.processFormula(m.save.dc,window.SBC.actor,C)).total;if(i!==U.saveDC){let Q0=U.saveDC-i;if(+Q0>0)y["save.dc"]=m.save.dc+` + ${+Q0}`}}if(U.saveType)switch(U.saveType){case"Fortitude":y["save.type"]="fort";break;case"Reflex":y["save.type"]="ref";break;case"Will":y["save.type"]="will";break;default:y["save.type"]=null;break}if(U.saveEffect)y["save.description"]=(U.saveType?`${U.saveType} `:"")+U.saveEffect}if(U.templateRange)y["measureTemplate.size"]=U.templateRange;if(U.templateType)switch(U.templateType){case"cone":y["measureTemplate.type"]="cone";break;case"ray":y["measureTemplate.type"]="ray";break;default:y["measureTemplate.type"]="circle";break}if(Object.keys(y).length>0)await m.update(y),c.push(m)},[t]);if(await C.update({"system.actions":t}),U.uses){let k=C.system.uses.maxFormula?(await _.processFormula(C.system.uses.maxFormula,window.SBC.actor,C)).total:0;if(k!==U.uses){let l=C.system.uses.maxFormula,c=(U.uses-k).toString(),m=C.system.uses.per?C.system.uses.per:"charges";switch(m){case"round":m="round";break;case"hour":m="hour";break;case"day":m="day";break;case"week":m="week";break;default:break}let y={"system.uses.maxFormula":l?+c>0?l+` + ${+c}`:l:c,"system.uses.per":m,"system.uses.value":C.system.uses.value+ +c};if(C.actions.size===0){let Q0={...new pf1.components.ItemAction().toObject(void 0,!1),name:game.i18n.localize("PF1.Use")};y["system.actions"]=[Q0]}if(await C.update(y),b=b.replace(/(\d+)\/(day|week|month|year)/i,"").trim().replace(/^,|,$/g,"").trim(),v=b?.split(/[;,]\s?/)??[],v.length>0&&v[0]!=="")v=v.map((i)=>_.capitalize(i));else v=null;await C.update({name:_.capitalize(f[0])+(v?.length>0?` (${v.join(", ")})`:"")})}}}if(N.match(/^Mythic\) \(/i)){let U=N.indexOf("("),x=N.substring(U+1).replace(")","");v?.push(x)}if(d>1)if(v)v.unshift(d);else v=[d];z.push({name:f[0],kind:C.system.abilityType,description:C.system.description.value,subParts:v})}if(F.toLowerCase()==="weapon finesse"&&Z==="feats")this.app.processData.flags.hasWeaponFinesse=!0}return[!0,z]}catch(K){return this.throwError(K,"parser.entity.error",J,Q,{type:Y}),[!1,[]]}}processForChoices(J){let Q=["bardic performance","versatile performance","rogue talent","hexes","rage power","ki power","discoveries","exploit","deed","investigator talent","infusion","mesmerist trick","ninja trick","investigator talent","magus arcana","revelation","mercies","cruelties","slayer talent","vigilante trick","weapon training","favored terrain","favored enemy","raging song"];J.forEach((Z)=>{let Y=[],H=null;if(Q.find((X)=>{if(Z.toLowerCase().startsWith(X))return H=X,!0;return!1})){let X=_.parseSubtext(Z),G=P0().exec(X[0])?.[0];if(G)X[0]=X[0].replace(G,"").replace(/\s{2,}/,"").trim();if(X[1])X[1]=X[1].replaceAll("[","(").replaceAll("]",")"),this.splitText(X[1],!0).forEach((z)=>{if(["favored enemy","favored terrain","versatile performance","weapon training"].includes(H))Y.push(`${X[0]} (${z})`);else Y.push(`${z}`)});if(Y.length>0){if(Y[0].toLowerCase().includes("action")){let W=Y[0].replace(`${X[0]} `,"").trim();if(G)X[0]=`${X[0]} ${G}`;X[0]+=` (${W})`,Y.shift()}switch(H){case"hexes":X[0]=X[0].replace(/hexes/i,"Hex");break;case"discoveries":X[0]=X[0].replace(/discoveries/i,"Discovery");break;case"cruelties":X[0]=X[0].replace(/cruelties/i,"Cruelty");break;case"mercies":X[0]=X[0].replace(/mercies/i,"Mercy");break;default:break}if(J[J.indexOf(Z)]=X[0],Y.length>0)J.push(...Y)}}})}}class A0 extends g{get parserGroup(){return"Parser/Base"}get parserType(){return"aura"}async _parse(J,Q,Z=void 0){let Y=window.SBC,H=Y.compendiumSearch;this.app.processData.notes.aura=[],await F0(window.SBC.actor,"system.traits.aura.custom",J);let X=this.splitText(J,!1);console.log(_.translate("parser.aura.parseInfo",{value:J}),X);let G=0;for(let W of X){if(W===""||W===",")continue;let z=W.replace(/(\(.*\)|\d.*)/,"").trim(),K=z.toLowerCase(),q=_.translate("parser.aura.testName",{value:K}).toLowerCase(),j=window.SBC.actor.itemTypes.feat.find((S)=>S.name.toLowerCase()===K||S.name.toLowerCase()===q),F={raw:W,name:z},L=W.match(/([^(,;a-zA-Z]+)ft./i),E=0;if(L){E=parseInt(L[1].trim());let S=pf1.utils.convertDistance(E);F.range=`${S[0]} ${S[1]}`}let O="",B="",N="",P=null;if(/\bDC\b/.test(W)){if(B=W.match(/DC\s*(\d+)/)[1],P="save",F.dc=B,/DC\s*\d+\s*([^)(,;0-9]+)/.test(W))N=W.match(/DC\s*\d+\s*([^)(,;0-9]+)/)[1],F.dcNotes=N;if(/\s+([^)(,;]+)DC\s*\d+/.test(W))O=W.match(/\s+([^)(,;]+)DC\s*\d+/)[1].trim().toLowerCase(),F.saveType=_.translate(`preview.${O.capitalize()}`)}let M="(\\b"+[z,E,O,B,N,"DC"].filter((S)=>!!S).join("\\b|\\b")+"\\b|ft\\.|[(),])",R=new RegExp(M,"gi"),T=W.replace(R,"").trim();if(F.effect=T,j)this.app.processData.notes.aura.push(F);else{let S={search:new Set([z,`Aura of ${z}`]),item:W},h=await H.findEntityInCompendia(S,{itemType:"feat",classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race});if(h)await _.addAssociatedClass(h,Y.actor.itemTypes.class),await D(h),this.app.processData.notes.aura.push(F);else{let w=_.makeValueRollable(T),d={...new pf1.components.ItemAction().toObject(void 0,!1),actionType:P,activation:{cost:null,type:"passive",unchained:{cost:null,type:"passive"}},duration:{units:"perm"},effectNotes:w,measureTemplate:{type:"circle",size:E},name:_.translate("parser.aura.placeholderActionName"),range:{value:E,units:"ft"},save:{dc:B,type:O,description:N},target:{value:_.translate("parser.aura.placeholderTarget")}},a=new Item.implementation({name:_.translate("parser.aura.placeholderName",{value:z.capitalize()}),type:"feat",system:{abilityType:"na",actions:[d],subType:"racial",tag:`aura${G}`},img:"systems/pf1/icons/spells/runes-blue-3.jpg"});await D(a),this.app.processData.notes.aura.push(F),G++}}}return this.app.processData.notes.aura=this.app.processData.notes.aura.sort((W,z)=>W.name.localeCompare(z.name)),!0}}var w0=Object.freeze({PrestigeClass:"PrestigeClass",WizardClass:"WizardClass",SupportedClass:"SupportedClass",MythicPath:"MythicPath"});class h0 extends g{get parserGroup(){return"Parser/Base"}get parserType(){return"class"}async _parse(J,Q,Z=void 0){let Y=window.SBC,H=Y.compendiumSearch;this.app.processData.notes.base.classes=[],J=J.replaceAll(/\sArchetype|\sPrestige Class/gi,"");let X=J.split(/\//).map((G)=>G.trim());for(let G of X){let W=R0().exec(G).groups,z=!!W.exClass,K=null;if(G.match(o1()))K=w0.PrestigeClass;else if(G.match(p1()))K=w0.SupportedClass;else if(G.match(T0()))K=w0.WizardClass;else if(G.match(l1()))K=w0.MythicPath;if(!K){this.throwError(void 0,"parser.class.failedToCreate",{class:G});continue}_.log(_.translate("parser.class.parseInfo",{classType:K}));let q=_.parseSubtext(G.trim());if(q.length>2)q[0]+=" "+q[2][0];let j={name:K===w0.WizardClass?"wizard":W.class,deity:W.deity,wizardClass:K===w0.WizardClass?W.class:"",archetype:W.archetype?.match(/\d+/)?"":W.archetype||"",level:parseInt(W.level),item:q[0].replaceAll(/[0-9]/g,"").trim()};console.log(j);let F=await H.findEntityInCompendia(j,{itemType:"class",classes:this.app.processData.characterData.classes});if(!F){_.log(_.translate("parser.class.notFound",{className:j.name}));continue}if(F&&F.system.subType!=="racial"&&j.level===0)continue;let L=j.name,E={};if(j.deity)j.name+=` of ${j.deity}`,await window.SBC.actor.update({"system.details.deity":j.deity});if(j.archetype){let M=this.splitText(j.archetype,!1).map((R)=>R.trim().capitalize()).filter((R)=>R!=="");await _.runParallelOps(M,async(R)=>{let T=`${j.name.capitalize()} (${R})`,S=await H.findEntityInCompendia({name:T,item:T},{itemType:"feat",itemSubType:"misc"});if(S)await D(S)}),L=j.name.capitalize()+" ("+M.join(", ")+")",Y.app.processData.characterData.archetypes.push(...M)}else if(j.wizardClass)L=_.translate(`wizardSchools.${j.wizardClass.toLowerCase()}`),Object.assign(E,{"system.tag":"wizard","system.useCustomTag":!0});else L=j.name.capitalize();let O=F.system.subType;if(O!=="mythic"){let M=this.app.processData.characterData.hdMaximized,R=_.getDiceAverage(+F.system.hd);if(j.hp=!M&&O==="base"?+F.system.hd+ +Math.floor(R*(j.level-1)):R*j.level,!M&&O==="base")this.app.processData.characterData.hdMaximized=!0}else j.hp=+F.system.hd*j.level;Object.assign(E,{name:(z?"Ex-":"")+L,"system.level":j.level,"system.hp":j.hp});let B=[];if(F.system.links?.classAssociations&&!window.SBC.settings.getSetting("createAssociations"))B=F.system.links.classAssociations,Object.assign(E,{"system.links.-=classAssociations":null});await F.updateSource(E);let[N,P]=await D(F);if(this.app.processData.notes.base.classes.push(`${z?"Ex-":""}${L} ${j.level}`),P.name.match(/\bExpert\b/i))Y.app.processData.characterData.isExpert=!0,Y.app.processData.characterData.expertSkills=Object.keys(P.system.classSkills).filter((M)=>P.system.classSkills[M]),Y.app.processData.characterData.expertId=P._id;if(!this.app.processData.characterData.classes.includes(P.system.tag))this.app.processData.characterData.classes.push(P.system.tag);if(B.length>0)await P.update({"system.links.classAssociations":B})}return!0}}class g0 extends g{get parserGroup(){return"Parser/Base"}get parserType(){return"creatureType"}async _parse(J,Q,Z=void 0){let Y=window.SBC,H=Y.compendiumSearch,X=_$(J),G=!Y.actor.race,W={name:X[0],type:"racial",subTypes:"",item:X[0]};if(X.length>1)W.subTypes=X[1];let z=await H.findEntityInCompendia(W,{itemType:"class"});if(G){let F={name:z.name,img:z.img,type:"race",creatureTypes:[z.system.tag],creatureSubtypes:this.splitText(_.capitalize(W.subTypes)).map((E)=>pf1.utils.createTag(E)),desc:z.system.description.value,sources:z.system.sources,size:Y.actor.system.traits.size.base},L=await _.generatePlaceholderEntity(F,Q);await D(L)}else{let F=Y.actor.race,L=new Set,E=new Set;F.system.creatureTypes.base.forEach((O)=>{L.add(O)}),F.system.creatureSubtypes.base.forEach((O)=>{E.add(O)}),L.add(z.system.tag),this.splitText(_.capitalize(W.subTypes)).forEach((O)=>E.add(pf1.utils.createTag(O))),await F.update({"system.creatureTypes":Array.from(L),"system.creatureSubtypes":Array.from(E)})}let K={system:{level:0}};switch(W.name.toLowerCase()){case"undead":this.app.processData.flags.isUndead=!0,await C1(this.app.processData,"isUndead");break;case"construct":this.app.processData.flags.isConstruct=!0;break;default:break}if(W.subTypes!=="");await z.updateSource(K),this.app.processData.notes.creatureType={type:_.translate(`types.${_.camelize(X[0])}`),subTypes:W.subTypes.split(",").map((F)=>{F=F.trim();let L=_.haystackSearch(window.SBC.config.creatureSubTypes,F);if(L)return _.translate(`subTypes.${_.camelize(L)}`);return F.capitalize()})};let[q,j]=await D(z);if(j.name.match(/\bOutsider\b/i))Y.app.processData.characterData.isOutsider=!0,Y.app.processData.characterData.outsiderSkills=Object.keys(j.system.classSkills).filter((F)=>j.system.classSkills[F]),Y.app.processData.characterData.outsiderId=j._id;if(!this.app.processData.characterData.race)this.app.processData.characterData.race=z.system.tag;return!0}}class D0 extends g{get parserGroup(){return"Parser/Base"}get parserType(){return"race"}async _parse(J,Q,Z=void 0){let H=window.SBC.compendiumSearch,X={name:J.toLowerCase(),item:J};this.app.processData.notes.base.race=X.name.capitalize();let G=await H.findEntityInCompendia(X,{itemType:"race"});if(!G){let W={name:J,type:"race"};G=await _.generatePlaceholderEntity(W,Q)}if(!this.app.processData.characterData.race)this.app.processData.characterData.race=pf1.utils.createTag(G.name);return await D(G),!0}}var z$={blindsight:"system.traits.senses.bs.value",blindsense:"system.traits.senses.bse.value",darkvision:"system.traits.senses.dv.value",tremorsense:"system.traits.senses.ts.value",scent:"system.traits.senses.sc.value",truesight:"system.traits.senses.tr.value","true seeing":"system.traits.senses.tr.value","see in darkness":"system.traits.senses.sid","see invisibility":"system.traits.senses.si","low-light":"system.traits.senses.ll.enabled"},K$={blindsight:"PF1.Sense.blindsight",blindsense:"PF1.Sense.blindsense",darkvision:"PF1.Sense.darkvision",tremorsense:"PF1.Sense.tremorsense",scent:"PF1.Sense.scent","see in darkness":"PF1.Sense.seeInDark",truesight:"PF1.Sense.trueseeing","true seeing":"PF1.Sense.trueseeing","see invisibility":"PF1.Sense.seeInvis","low-light":"PF1.Sense.lowlight"};class y0 extends g{get parserGroup(){return"Parser/Base"}get parserType(){return"sense"}async _parse(J,Q,Z=void 0){let H=Object.values(pf1.config.senses).map((G)=>G.toLowerCase()).concat(E1),X=[];this.app.processData.notes.base.senses=[];for(let G of H){if(J.search(G)===-1)continue;switch(G){case"scent":case"truesight":case"true seeing":case"blindsight":case"blindsense":case"darkvision":case"tremorsense":{let W=new RegExp(G+"\\s(\\d+)",""),z=J.match(W)?.[1]??(["truesight","true seeing"].includes(G)?120:0);await window.SBC.actor.update({[z$[G]]:+z});let[K,q]=pf1.utils.convertDistance(+z),j=K$[G]||null;this.app.processData.notes.base.senses.push((j?game.i18n.localize(j):G.capitalize())+` ${K} ${q}`);break}case"see in darkness":case"see invisibility":case"low-light":{await window.SBC.actor.update({[z$[G]]:!0});let W=K$[G]||null;this.app.processData.notes.base.senses.push(W?game.i18n.localize(W):G.capitalize());break}default:X.push(G.capitalize()),this.app.processData.notes.base.senses.push(G.capitalize());break}}if(!this.app.processData.notes.base.senses.length)delete this.app.processData.notes.base.senses;if(X.length)await window.SBC.actor.update({"system.traits.senses.custom":X.join(";")});return!0}}class d0 extends g{get parserGroup(){return"Parser/Base"}get parserType(){return"mythic"}async _parse(J,Q,Z=void 0){let H=window.SBC.compendiumSearch;if(J=parseInt(J)||0,J===0)return!0;this.app.processData.notes.base.mr=J,_.log(_.translate("parser.mr.parseInfo",{value:J}));let X={name:"Mythic Rank",item:"Mythic Rank"},G=await H.findEntityInCompendia(X,{itemType:"class",classes:this.app.processData.characterData.classes}),W=window.SBC.actor.itemTypes.class.find((O)=>O.system.subType==="racial"),z=Math.min(10,+W?.system?.hd),[K,q]=await D(G),j=[{_id:q.id,"system.level":J,"system.hp":z*J,"system.hd":z}],F=window.SBC.actor.itemTypes.feat.find((O)=>O.system.subType==="misc"&&O.system.tag==="surgeMythic"),L=window.SBC.actor.itemTypes.feat.find((O)=>O.system.subType==="misc"&&O.system.tag==="mythicPowerMythic"),E=0;while((!F||!L)&&E<10)await new Promise((O)=>{E++,setTimeout(O,1000)}),F=window.SBC.actor.itemTypes.feat.find((O)=>O.system.subType==="misc"&&O.system.tag==="surgeMythic"),L=window.SBC.actor.itemTypes.feat.find((O)=>O.system.subType==="misc"&&O.system.tag==="mythicPowerMythic");if(F){let O=6+2*Math.floor((J-1)/3);await F.actions.get(F.actions.contents[0].id).update({effectNotes:[`+[[1d${O}]] Surge`]})}if(L)j.push({_id:L.id,"system.uses.maxFormula":`${J}`,"system.uses.value":+J});return await window.SBC.actor.updateEmbeddedDocuments("Item",j),F?.prepareData(),await L?.recharge({value:+J,maximize:!0,commit:!0,period:"any"}),await L?.createItemLink("charges",F),await F0(window.SBC.actor,"system.details.cr.base",window.SBC.actor.system.details.cr.base-Math.floor(J/2)),!0}}class b0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"armorClass"}async _parse(J,Q,Z=void 0){let Y=J.split(";");if(Y.length>1)this.app.processData.miscNotes.acNotes.push(Y[1].trim());let H=Y[0].split(",");this.app.processData.notes.defense.acTypes=[];for(let X of H){let G=X.match(c1())?.[0]?.toLowerCase(),W=parseInt(X.match(/[+-]\d+/)?.[0])??0,z=W;switch(console.log(_.translate("parser.armorClass.parseInfo",{type:G,value:W})),G){case"natural":if(W-=await _.getTotalFromChanges(window.SBC.actor,"nac"),W!==0)this.app.processData.miscNotes.naturalAC=W;break;case"size":case"dex":break;case"armor":case"shield":case"base":case"enhancement":case"dodge":case"inherent":case"deflection":case"morale":case"luck":case"sacred":case"insight":case"resistance":case"profane":case"trait":case"racial":case"competence":case"circumstance":case"alchemical":case"penalty":case"rage":case"monk":case"wis":case"untyped":case"untypedPerm":if(W-=await _.getTotalFromChanges(window.SBC.actor,"ac",G),W!==0)this.app.processData.characterData.conversionValidation.attributes[G]=W;break;default:break}this.app.processData.notes.defense.acTypes.push({type:_.translate(`armorTypes.${G}`),value:z>=0?`+${z}`:z})}return!0}}class k0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"damageReduction"}async _parse(J,Q,Z=void 0){let Y=J.replace(/(^[,;\s]*|[,;\s]*$)/g,""),H=this.splitText(Y);this.app.processData.notes.defense.dr=[];let X=window.SBC.actor.system.traits.dr.value,G=window.SBC.actor.system.traits.dr.custom;for(let W of H){W=W.replace(/Effects/gi,"").trim();let z=/^(?<amount>\d+)\s*\/\s*(?<type1>.+?)(?:\s*(?<operator>or|and)\s*(?<type2>.+?))?$/g.exec(W),{amount:K,type1:q,operator:j,type2:F}=z.groups;if(console.log(_.translate("parser.damageReduction.parseInfo"),K,q,j,F,q?.search(Y0()),F?.search(Y0())),q&&q.match(Y0())||F&&F.match(Y0())){q=q?.match(Y0())?.[0],F=F?.match(Y0())?.[0];let L=[q,F].filter((E)=>!!E).map((E)=>pf1.utils.createTag(E));X.push({amount:+K,types:L,operator:j==="or"}),this.app.processData.notes.defense.dr.push([K,"/",this.getDamageTypePhrase(L[0]),...L[1]?[" ",_.translate(j)," ",this.getDamageTypePhrase(L[1])]:[]].join(""))}else G+=`${W.capitalize()};`,this.app.processData.notes.defense.dr.push(W.capitalize())}return await window.SBC.actor.update({"system.traits.dr.value":X,"system.traits.dr.custom":G.replace(/;$/,"")}),!0}getDamageTypePhrase(J){if(pf1.config.damageResistances[J])return pf1.config.damageResistances[J];let Q=pf1.registry.materials.getLabels();if(Q[J])return Q[J];let Z=pf1.registry.damageTypes.getLabels();if(Z[J])return Z[J];return""}}class m0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"hitPoints"}async _parse(J,Q,Z=void 0){let Y=window.SBC.actor.itemTypes.class,H=!1,[X,G,W,z,K]=this.processHPString(J);_.log(`HP: ${W} and Bonus: ${z}`);let q=0,j=0,F=W.reduce((S,h)=>{let[w,p]=h.split("d").map((d)=>parseInt(d));return q+=w,S+w*_.getDiceAverage(p)},0)+z;j=q-Y.reduce((S,h)=>S+(h.system.subType==="mythic"?0:h.system.level),0);let L=Y.find((S)=>S.system.subType==="racial");if(L)await L.update({"system.level":j,"system.hp":j*_.getDiceAverage(L.system.hd)});let E=window.SBC.actor.system.attributes.hp.value,O=F-E,B=Y.find((S)=>S.system.subType==="base"||S.system.subType==="npc");if(B){if(B.system.subType==="base"){if(!H){H=!0,_.log(`Maximizing first HD for ${B.name} - ${B.system.hd} - ${_.getDiceAverage(B.system.hd)}`);let S=B.system.hd-_.getDiceAverage(B.system.hd);F+=S,O+=S}}if(O===B.system.level)await B.update({"system.fc.hp.value":B.system.level}),O-=B.system.level,E+=B.system.level}let N=await n$(window.SBC.actor,Y);_.log(`HP Data: Statblock: ${F}, Actor: ${E}, System: ${N}`),_.log(`HP Difference between Statblock and Actor: ${O}`);let P=N-E;_.log(`HP Difference between System and Actor: ${P}`);let M=F-N;_.log(`HP Difference between Statblock and System: ${M}`);let R=A1(F+(X-F+P));if(this.app.processData.characterData.conversionValidation.attributes.hpTotal=R,this.app.processData.notes.defense.hpTotal=R,this.app.processData.notes.defense.hdTotal=q,this.app.processData.notes.defense.hdPool=G,await this.resetRacialClassesWithNoLevels(),!K.trim().length)return!0;let T=await a$(this.splitText(K,!1),Q);return this.app.processData.notes.defense.hdAbilities=T.join(", "),!0}processHPString(J){if(!J)return[0,"",[],0,""];if(J.match(/\);\s*(regeneration|fast[ -]healing)/i))J=J.replace(/\);(\s*regeneration|fast[ -]healing)/i,"), $1");let Q=this.splitText(J,!1),[Z,Y]=_.parseSubtext(Q[0]),H=Y.match(/(\d+d\d+)/g),G=Y.match(/(\b[^d+\s]*\d+[^\sd+]*\b)(?!\s*HD)/gi)?.reduce((W,z)=>W+parseInt(z),0)??0;return[Z,Y,H,G,Q[1]||""]}async resetRacialClassesWithNoLevels(){let J=[];if(window.SBC.actor.itemTypes.class.filter((Q)=>Q.system.level===0).forEach(async(Q)=>{if(Q.system.subType==="racial")J.push(Q);else await Q.update({"system.savingThrows":{fort:{value:"",base:0,good:Q.system.savingThrows.fort.good},ref:{value:"",base:0,good:Q.system.savingThrows.ref.good},will:{value:"",base:0,good:Q.system.savingThrows.will.good}}})}),J.length){if(!window.SBC.actor.itemTypes.race.length){let Z=J[0],Y=_.parseSubtext(Z.name),H={name:Y[0],creatureType:Y[0].toLowerCase(),desc:Z.system.description.value,img:Z.img,size:window.SBC.actor.system.traits.size.base,subTypes:Y.length>1?Y[1].replace(/\s/g,"").split(","):"",type:"race"};await D(await _.generatePlaceholderEntity(H))}window.SBC.actor.deleteEmbeddedDocuments("Item",J.map((Z)=>Z.id))}}}async function n$(J,Q){let Z=0,Y=game.settings.get("pf1","healthConfig"),H={continuous:Y.continuous,maximized:Y.maximized,rounding:Y.rounding,maximizedProgress:0},X=window.SBC,G=X.settings.getSetting(`${X.config.const.actorType[X.actorType]==="npc"?"npc":"pc"}health`);if(G)H.continuous=G==="continuous";for(let K of Q){let q=K.system.subType,j=game.settings.get("pf1","healthConfig").getClassHD(K);switch(q){case"base":case"prestige":case"npc":case"racial":{let F=K.system.level,L=0;if(j.maximized&&H.maximizedProgress<j.maximized)L=Math.min(H.maximized-H.maximizedProgress,F),F-=L,H.maximizedProgress+=L;let E=s$(H,j,K.system.hd,F,L);Z+=E+K.system.fc.hp.value,await K.update({"system.hp":E});break}case"mythic":Z+=K.system.hp;break;default:break}}let W=J.system.attributes.hd.total,z=J.system.attributes.hpAbility;return Z+=W*J.system.abilities[z].mod,Z+=await _.getTotalFromChanges(J,"mhp"),Z}function s$(J,Q,Z,Y,H){let X=0,G=_.getDiceAverage(Z,Q.rate);if(!J.continuous)for(let z=0;z<Y;z++)X+=A1(G);else X=A1(G*Y);return X+=H*Z,X}function A1(J){switch(game.settings.get("pf1","healthConfig").rounding){case"up":J=Math.ceil(J);break;case"down":J=Math.floor(J);break;case"nearest":J=Math.round(J);break;default:break}return J}async function a$(J,Q){let Z=[],Y=new RegExp("\\b(regeneration|fast[ -]healing)\\b","gi");for(let H of J){if(H=H.trim(),H.length===0)continue;if(H.search(Y)===-1){let G={name:H,type:"misc"};Z.push(G.name);let W=await _.generatePlaceholderEntity(G,Q);await D(W);continue}switch(H.match(Y)[0].toLowerCase()){case"regeneration":{await A.map.defense.regeneration.parse(H,Q);break}case"fast healing":case"fast-healing":{await A.map.defense.fastHealing.parse(H,Q);break}default:break}Z.push(H)}return Z}class u0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"immunity"}async _parse(J,Q,Z=void 0){let Y=J.replace(/(^[,;\s]*|[,;\s]*$)/g,""),H=this.splitText(Y);this.app.processData.notes.defense.immune=[];let X={ci:window.SBC.actor.system.traits.ci.base,di:window.SBC.actor.system.traits.di.base};for(let G of H){G=this.sanitizeInput(G.replace(/(?<!Death )Effects/gi,"").trim());let W=G.toLowerCase().includes("fatigue");if(W||G.search(H1())!==-1){if(W)G="fatigued";let z=_.getKeyByValue(pf1.config.conditionTypes,G);X.ci.push(_.camelize(z)),this.app.processData.notes.defense.immune.push(pf1.config.conditionTypes[z])}else if(G.replace(/(\s*energy)/i,"").search(Y0(!0))!==-1){let z=_.getKeyByValue(pf1.registry.damageTypes.getLabels(),G.replace(/(\s*energy)/i,""));X.di.push(_.camelize(z)),this.app.processData.notes.defense.immune.push(pf1.registry.damageTypes.getLabels()[z]+(G.match(/ energy/)?" Energy":""))}else if(G.search(i1())!==-1){let z=_.getKeyByValue(pf1.registry.conditions.getLabels(),G);X.ci.push(_.camelize(z)),this.app.processData.notes.defense.immune.push(pf1.registry.conditions.getLabels()[z])}else if(G.search(X$())!==-1){let z=_.haystackSearch(window.SBC.config.creatureTypes,G),K=window.SBC.config.immunities[z]||{};if(K.condition)X.ci.push(...K.condition);if(K.damage)X.di.push(...K.damage);if(K.custom)X.ci.push(...K.custom);this.app.processData.notes.defense.immune.push(G.capitalize())}else X.ci.push(G.capitalize()),this.app.processData.notes.defense.immune.push(G.capitalize())}return await window.SBC.actor.update({"system.traits.ci":X.ci,"system.traits.di":X.di}),!0}sanitizeInput(J){let Q={fatigue:"fatigued",paralysis:"paralyzed",confusion:"confused",petrification:"petrified",stunning:"stunned"};for(let Z of Object.keys(Q))J=J.replace(new RegExp(Z,"gi"),Q[Z]);return J.trim()}}class p0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"resistance"}async _parse(J,Q,Z=void 0){let Y=J.replace(/(^[,;\s]*|[,;\s]*$)/g,"").replace("electricity","electric").replaceAll(" energy",""),H=this.splitText(Y);this.app.processData.notes.defense.resist=[];let X=window.SBC,G=X.compendiumSearch,W=X.actor.system.traits.eres.value,z=X.actor.system.traits.eres.custom,K=X.actor.system.traits.cres;for(let q=0;q<H.length;q++){let j=H[q].replace(/Effects/gi,"").trim();if(j.match(H1()))K+=`${j.capitalize()};`,this.app.processData.notes.defense.resist.push(K);else{let F=/^(?<type1>\S+)(?:\s*(?<operator>or|and)\s*(?<type2>\S+))?\s*(?<amount>\d+)$/g.exec(j);if(!F){let L={search:new Set,type:"feats",item:j};L.search=_.createSearchSet([_.capitalize(j)],!0);let E=await G.findEntityInCompendia(L,{itemTypes:["feat"],itemSubTypes:["classFeat","misc"],classes:this.app.processData.characterData.classes});if(!E)L.itemTypes="misc",E=await _.generatePlaceholderEntity(L);let O=_.checkForDuplicateItem(X.actor,"feat","classFeat",j,E);if(!O)O=_.checkForDuplicateItem(X.actor,"feat",null,j,E);if(!O)await D(E)}else{let{amount:L,type1:E,operator:O,type2:B}=F.groups;if(console.log(_.translate("parser.resistance.parseInfo"),L,E,O,B,E?.search(Y0()),B?.search(Y0())),E&&E.match(Y0())||B&&B.match(Y0())){E=E?.match(Y0())?.[0],B=B?.match(Y0())?.[0];let N=[E,B].filter((P)=>!!P).map((P)=>pf1.utils.createTag(P));W.push({amount:+L,types:N,operator:O==="or"}),this.app.processData.notes.defense.resist.push([this.getDamageTypePhrase(N[0]),...N[1]?[" ",_.translate(O)," ",this.getDamageTypePhrase(N[1])]:[]," ",L].join(""))}else z+=`${j.capitalize()};`,this.app.processData.notes.defense.resist.push(j.capitalize())}}}return await X.actor.update({"system.traits.cres":K.replace(/;$/,""),"system.traits.eres.value":W,"system.traits.eres.custom":z.replace(/;$/,"")}),!0}getDamageTypePhrase(J){if(pf1.config.damageResistances[J])return pf1.config.damageResistances[J];let Q=pf1.registry.materials.getLabels();if(Q[J])return Q[J];let Z=pf1.registry.damageTypes.getLabels();if(Z[J])return Z[J];return""}}var wZ=Object.freeze({Fort:Symbol("fort"),Ref:Symbol("ref"),Will:Symbol("will")});class o0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"save"}async _parse(J,Q,Z=void 0){let Y=J,H="";if(/;(?![^(]*\))/.test(Y))[Y,H]=Y.split(/;(?![^(]*\))/);let X=this.splitText(Y).map(_.parseSubtext);for(let G=0;G<X.length;G++){let W=X[G][0],{type:z,value:K}=W.match(H$()).groups;if(z=z.toLowerCase(),!z){this.throwError(void 0,"parser.save.error",X[G].join(""),W);continue}if(this.app.processData.characterData.conversionValidation.attributes[z]=K,this.app.processData.notes.defense[z+"Save"]=K,X[G][1])H+=(H?`
`:"")+z.capitalize()+": "+X[G][1]}if(H)this.app.processData.miscNotes.saveNotes=H.trim(),this.app.processData.notes.defense.saveNotes=H.trim();return!0}}class l0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"spellResistance"}async _parse(J,Q,Z=void 0){let Y=J.replace(/(^[,;\s]*|[,;\s]*$)/g,""),H=_.parseSubtext(Y),X=H[0],G="",W="";if(H[1])G=H[1],W=G;else if(/\s*([-+]?\d+)\s+(.*)/.test(X))[X,G]=X.split(/\s*([-+]?\d+)\s+(.*)/).slice(1),W=G;return this.app.processData.miscNotes.srNotes=W,this.app.processData.miscNotes.sr=X.toString(),this.app.processData.notes.defense.srNotes=W,this.app.processData.notes.defense.sr=X.toString(),!0}}class c0 extends g{get parserGroup(){return"Parser/Defense"}get parserType(){return"weakness"}async _parse(J,Q,Z=void 0){let Y=J.replace(/(^[,;\s]*|[,;\s]*$)/g,""),H=this.splitText(Y);this.app.processData.notes.defense.weakness=Y;let X=window.SBC,G=X.actor.system.traits.dv.base;console.log(H);for(let W=0;W<H.length;W++){let z=H[W].replace(/Effects/gi,"").trim(),K=z.match(Y0());if(K)G.push(K[0]);else if(!X.actor.itemTypes.feat.find((q)=>q.system.subType==="misc"&&q.name.toLowerCase()===z.toLowerCase()))G.push(z.capitalize())}return await window.SBC.actor.update({"system.traits.dv":G}),!0}}class i0 extends g{get parserGroup(){return"Parser/Misc"}get parserType(){return"ecology"}async _parse(J,Q,Z=void 0){_.log(_.translate("parser.ecology.status",J));let Y=`<div><strong>${J.name}</strong>: ${J.entry}</div>`,H=window.SBC.actor.items.contents.find((X)=>X.name==="Ecology");if(H){let X=H.system.description.value;await H.update({"system.description.value":X+Y})}else{let X={name:"Ecology",type:"misc",desc:Y,img:"icons/environment/wilderness/tree-oak.webp"},G=await _.generatePlaceholderEntity(X,Q);await D(G)}return!0}}class r0 extends g{constructor(J){super(J);this.specialAbilityCount=0}get parserGroup(){return"Parser/Misc"}get parserType(){return"specialAbility"}async _parse(J,Q,Z=void 0){let{type:Y,name:H,description:X}=this.checkAbilityData(J,Q),G={name:H||"Special Ability",specialAbilityType:Y.toLowerCase(),type:"misc",desc:`<p>${X.replaceAll(`

`,"</p><p>")}</p>`},W=await _.generatePlaceholderEntity(G,Q),z=window.SBC.actor.itemTypes.feat.find((K)=>K.name===`Aura: ${W.name}`&&K.system.subType==="racial");if(z)await z.update({"system.description.value":G.desc});else await D(W);return this.app.processData.notes.specialAbilities.push({name:H,type:Y,typeName:pf1.config.abilityTypes[Y].short,description:_.convertStringUnits(X)}),!0}checkAbilityData(J,Q){if(J.search(Q$())!==-1){let{description:X,name:G,type:W}=Y$().exec(J).groups;if(W=W.toLowerCase().replace(/[()]*/g,""),W==="--")W="na";return{description:X.capitalize(),name:_.capitalize(G),type:W}}let Z=_.translate("parser.specialAbility.placeholderName",{value:++this.specialAbilityCount}),Y=J.trim(),H="na";return this.throwError(void 0,"parser.specialAbility.matchError"),{name:Z,description:Y,type:H}}}class n0 extends g{get parserGroup(){return"Parser/Misc"}get parserType(){return"tactics"}async parse(J,Q,Z=void 0){_.log(_.translate("parser.tactics.status",J));let Y=`<div><strong>${J.name}</strong>: ${J.entry}</div>`,H=window.SBC.actor.items.contents.find((X)=>X.name==="Tactics");if(H){let X=H.system.description.value;await H.update({"system.description.value":X+Y})}else{let X={name:_.translate("parser.tactics.placeholderName"),type:"misc",desc:Y,img:"icons/skills/targeting/crosshair-pointed-orange.webp"},G=await _.generatePlaceholderEntity(X,Q);await D(G)}return!0}}class s0 extends g{get parserGroup(){return"Parser/Offense"}get parserType(){return"speed"}async _parse(J,Q,Z){if(J.length<=0)return!0;let Y=J.replace(/(^[,;\s]*|[,;\s]*$)/g,""),H=_.parseSubtext(Y),X=H[0].match(/(\d+)\s*(ft\.|feet)?/)?.[1],G="";if(X==null)return this.throwParseError(void 0,J,Q,Z),!1;let W=pf1.utils.convertDistance(+X),z=game.i18n.localize(`PF1.Movement.Mode.${Z.toLowerCase()}`)+` ${W[0]} ${W[1]}`;switch(X-=await _.getTotalFromChanges(window.SBC.actor,`${Z}Speed`),X-=await _.getTotalFromChanges(window.SBC.actor,"allSpeeds"),this.app.processData.characterData.conversionValidation.attributes[Z]=+X,await window.SBC.actor.update({[`system.attributes.speed.${Z}.base`]:+X}),Z){case"fly":{if(H.length>1){let K=_.haystackSearch(Object.keys(pf1.config.flyManeuverabilities),H[1]);if(K)await window.SBC.actor.update({["system.attributes.speed.fly.maneuverability"]:K}),z+=` (${game.i18n.localize(`PF1.Movement.FlyManeuverability.Quality.${K.toLowerCase()}`)})`;if(H[2])G=H[2]}break}default:if(H.length>1)G=H[1];break}return this.app.processData.notes.offense.speed.push(z),!0}}var z0=Object.freeze({Constant:"constant",Weekly:"weekly",Monthly:"monthly",Yearly:"yearly",AtWill:"atWill",Daily:"daily"}),W0={};class X0 extends g{get parserGroup(){return"Parser/Offense"}get parserType(){return"spellBook"}async _parse(J,Q,Z=void 0){_.log("Trying to parse the following Spell Book.",J);let{spellCastingType:Y,spells:H,spellBookType:X}=J,G=Y==="prepared"?"Prepared":Y==="points"?"Psychic":"Known";X=await this.setupSpellbook(Y,X,J.spellCastingClass,J.isAlchemist?"extracts":"spells",G,+J.casterLevel,+J.concentrationBonus,J.isSpellLike,J.firstLine,J.spellBookName),W0[X]={},[0,1,2,3,4,5,6,7,8,9].forEach((P)=>{W0[X][P]={},W0[X][P].base=0,W0[X][P].max=0});let W=window.SBC.actor.system.attributes.spells.spellbooks[X],z=[],K=null,q=null,j=W.name,F=X0.getClassPostfixFromSpellbookName(j),L=window.SBC.actor.itemTypes.class.filter((P)=>P.system.casting);L=L.map((P)=>P.system.tag.substring(0,3).toUpperCase()).concat(L.map((P)=>`${P.system.tag[0]}${P.system.tag[2]}${P.system.tag[3]}`.toUpperCase()));let E=J.spellCastingClass.match(T0());if(E)switch(E[0]){case"Abjurer":q="abj",K="Abjuration";break;case"Conjurer":q="con",K="Conjuration";break;case"Diviner":q="div",K="Divination";break;case"Enchanter":q="enc",K="Enchantment";break;case"Evoker":q="evo",K="Evocation";break;case"Illusionist":q="ill",K="Illusion";break;case"Necromancer":q="nec",K="Necromancy";break;case"Transmuter":q="trs",K="Transmuation";break;case"Universalist":default:q="",K="Universalist";break}else if(W.class==="wizard"||j&&j.toLowerCase().includes("wizard"))q="",K="Universalist";if(K==="Universalist")await window.SBC.actor.update({[`system.attributes.spells.spellbooks.${X}.domainSlotValue`]:0});let O=0;for(let P=0;P<H.length;P++)O+=this.splitText(H[P].replace(/(^[^-]*-)/,""),!1).length;let B="";for(let P=0;P<H.length;P++){if(H[P]==="")continue;let M=H[P],R={spellLevel:-1,spellsPerX:"",spellsPerXTotal:-1,isAtWill:!1,frequency:null,isSpellRow:!1,spellRowIsInitialized:!1,wizardSchool:q,isSpellLike:J.isSpellLike};if(this.processSpellRow(M,X,R),this.processFrequencies(M,R),R.isSpellRow){let S={frequency:R.spellLevel===-1?{type:_.translate(`spellFrequencyNoun.${R.frequency}`),amount:R.spellsPerXTotal!==-1?+R.spellsPerXTotal:0}:null,level:+R.spellLevel,levelEnum:_.translate(`spellLevelEnum.${R.spellLevel}`),spells:[]},h=this.splitText(M.replace(/(^[^-]*-)/,""),!1),w=!1,p=0;if(J.isSpellLike)for(let d of h){d=d.replaceAll(/\*/g,"").trim();let[a,C]=X0.processSpellName(d);if(a==="")continue;let e={search:new Set([a,C]),type:"spell",item:a};e.search=_.createSearchSet([a,C],!0,F.concat(L));let[f,r]=await this.findSpellEntities(e),o=await _.generatePlaceholderEntity(e,Q),b=_.checkForDuplicateItem(window.SBC.actor,"feat","misc",a,o);if(!(!f&&r)&&!(r&&O===1)&&!(!r&&b))p++}w=J.isSpellLike?p===0:!1,await _.runParallelOps(h,async(d)=>{if(w)O--;await this.processSpell(d.replaceAll(/\*/g,"").trim(),R,X,Y,F,L,Q,S,w)}),z.push(S)}else B=await this.parseSpellbookSpecials(M,Q,X);let T={};[0,1,2,3,4,5,6,7,8,9].forEach((S)=>{T[`system.attributes.spells.spellbooks.${X}.spells.spell${S}.base`]=W0[X][S].base,T[`system.attributes.spells.spellbooks.${X}.spells.spell${S}.max`]=W0[X][S].max}),await window.SBC.actor.update(T)}if(K){let M=window.SBC.compendiumSearch,R={search:new Set([`${K} School`,K]),type:"feat",item:K},T={itemType:"feat",itemSubType:"classFeat",classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race},S=window.SBC.actor,h=await M.findEntityInCompendia(R,T),w=S.itemTypes.feat.filter((p)=>p.system.subType==="classFeat").find((p)=>p.name===p.name===h?.name);if(R.search.clear(),h){if(!w||w&&h.flags.core?.sourceId!==w.flags.core?.sourceId)await _.addAssociatedClass(h,S.itemTypes.class),await D(h)}}let N=window.SBC.actor.system.attributes.spells.spellbooks[X];if(_.log(N),!O)await window.SBC.actor.update({[`system.attributes.spells.spellbooks.${X}`]:X0.getDefaultSpellbookData()});return this.app.processData.notes.offense.spellBooks.push({name:J.firstLine.split("(")[0].trim(),cl:+J.casterLevel,asf:N.arcaneSpellFailure?window.SBC.actor.spellFailure:0,concentration:(+J.concentrationBonus>=0?"+":"")+ +J.concentrationBonus,spellRows:z,specialRow:B}),_.log(z),[!0,X,O!==0]}async setupSpellbook(J,Q,Z,Y,H,X,G,W,z,K){let q=0,j=!1,F=!0,L={domainSlotValue:q,psychic:j,spellPreparationMode:J,inUse:!0},E=window.SBC.actor;if(!E.system.attributes.spells.spellbooks[Q])L=foundry.utils.mergeObject(X0.getDefaultSpellbookData(),L);let O=Z.match(T0())?"wizard":Z;if(W){let B=+X===E.system.attributes.hd.total;L=foundry.utils.mergeObject(L,{ability:"cha",autoSpellLevelCalculation:!1,autoSpellLevels:!1,class:B?"_hd":"","cl.formula":B?"":`${X}`,arcaneSpellFailure:!1,name:_.capitalize(z.match(/^(.*?)\(/)[1].trim()),kind:"arcane",hasCantrips:F,noAbilityLimit:!0})}else if(J==="points"){let B=E.system.abilities;L=foundry.utils.mergeObject(L,{arcaneSpellFailure:!1,autoSpellLevelCalculation:!1,class:"_hd",name:_.translate("spellbookName.psychicMagic"),kind:"psychic",hasCantrips:!0,isPsychic:!0,spellPreparationMode:"spontaneous",spellPoints:{useSystem:!0,maxFormula:"0",max:0},ability:B.int.total>=B.cha.total?"int":"cha"})}else L=foundry.utils.mergeObject(L,{class:O.toLowerCase(),name:Z.capitalize()+" "+_.translate(`spellbookName.${Y}`)+" "+H});if(["hd","_hd"].includes(Z)===!1){let B=E.itemTypes.class.filter((N)=>N.name.toLowerCase()===Z.toLowerCase()||N.system.tag===Z.toLowerCase())[0]??null;if(B){X=B.system.level+(isNaN(B.system.casting.offset)?0:B.system.casting.offset),Z=B.system.tag;let N=X0.getHighestSpellLevelFreeSlots(Z,B.system.level);if(delete L.name,L=foundry.utils.mergeObject(L,{class:Z,kind:B.system.casting.spells,ability:B.system.casting.ability,arcaneSpellFailure:B.system.casting.spells==="arcane",domainSlotValue:B.system.casting.domain,casterType:B.system.casting.progression,hasCantrips:B.system.casting.cantrips,autoSpellLevelCalculation:!0,"cl.-=autoSpellLevelCalculationFormula":null,psychic:B.system.casting.spells==="psychic",spellPreparationMode:B.system.casting.type,spells:N,inUse:!0}),!W){let P=E.itemTypes.class.filter((M)=>M.system.subType==="prestige"&&M.system.tag!==B.system.tag&&!this.app.processData.characterData.prestigeClassCasting.has(M.system.tag));if(P.length>0)for(let M of P){let R=Object.keys(Z1).find((S)=>S.toLowerCase()===M.name.toLowerCase()),T=Z1[`${R}`];if(T?.offset){if(T.castingType){if(T.castingType.includes(L.kind)===!1)continue}if(T.castingClass){if(T.castingClass.includes(L.class)===!1)continue}delete L["cl.-=autoSpellLevelCalculationFormula"],L=foundry.utils.mergeObject(L,{"cl.autoSpellLevelCalculationFormula":T.offset});let S=await _.processFormula(T.offset,E);X+=S.total,this.app.processData.characterData.prestigeClassCasting.set(M.system.tag,Q)}}}}}else if(Z==="hd")L=foundry.utils.mergeObject(L,{class:"_hd",ability:"cha"});if(K)L.name=K;return this.app.processData.characterData.conversionValidation.spellBooks[Q]={casterLevel:+X,concentrationBonus:+G},await E.update({[`system.attributes.spells.spellbooks.${Q}`]:L}),Q}async processSpellRow(J,Q,Z){let Y;if((Y=J.match(/^(\d+)\s*\bPE\b/))!==null){let H=Y[1];await window.SBC.actor.update({[`system.attributes.spells.spellbooks.${Q}.spellPoints`]:{maxFormula:H,value:+H}}),Z.isSpellRow=!0}else if((Y=J.match(/(\d+)\s*(?!rounds)?\/(?:day|week|month|year)/i))!==null)Z.spellsPerXTotal=Y[1],Z.isSpellRow=!0;else if((Y=J.match(/(^\d)/))!==null)Z.spellLevel=Y[1],Z.isSpellRow=!0;else if((Y=J.match(/\d+\/([a-zA-Z]*)\)*-/))!==null)Z.spellsPerX=Y[1]}processFrequencies(J,Q){switch(!0){case/Constant/i.test(J):Q.isSpellRow=!0,Q.frequency=z0.Constant,Q.isAtWill=!0;break;case/At[- ]will/i.test(J):Q.isSpellRow=!0,Q.frequency=z0.AtWill,Q.isAtWill=!0;break;case/\d+\s*(?:rounds)?\/day/i.test(J):Q.frequency=z0.Daily;break;case/\d+\s*(?:rounds)?\/week/i.test(J):Q.frequency=z0.Weekly;break;case/\d+\s*(?:rounds)?\/month/i.test(J):Q.frequency=z0.Monthly;break;case/\d+\s*(?:rounds)?\/year/i.test(J):Q.frequency=z0.Yearly;break;default:}}async processSpell(J,Q,Z,Y,H,X,G,W,z){let[K,q,j,F,L]=X0.processSpellName(J);if(K==="")return;let[E,O]=[null,null],B={search:new Set([K,q]),type:"spell",item:K};B.search=_.createSearchSet([K,q],!0,H.concat(X));let[N,P]=await this.findSpellEntities(B),M=z||!N?P:N;if(M===null)if(!z)M=await _.generatePlaceholderEntity(B,G);else B.type="classFeat",M=await _.generatePlaceholderEntity(B,G);let R=_.checkForDuplicateItem(window.SBC.actor,"feat","classFeat",K,M);if(!R)R=_.checkForDuplicateItem(window.SBC.actor,"feat","misc",K,M);let T=-1,S=j.match(/\bDC\b\s*(\d+)(?:,\s)?/);if(S)T=S[1],j=j.replace(S[0],"").trim();let h=j.match(/(?<![+-]\s*\d*\s*|level\s*)\b(\d+)\b(?!\s*d\s*\d*\s*[+-]|\s*lbs|\s*kg|\s*%|\s*rounds)[,)]?/i),w=1;if(h)w=parseInt(h[1]),j=j.replace(h[1],"").replace(/[,;]\s*$/,"").trim();if(j!=="")J=_.capitalize(K)+" ("+j+")";else J=_.capitalize(K);if(M.type==="feat"||R){if(!R)await _.addAssociatedClass(M,window.SBC.actor.itemTypes.class),M.name=J,[E,O]=await D(M);else O=R;await X0.setFeatureUses(O,w,Q.frequency),await O.update({name:J}),W.spells.push({name:O.name,prepCount:1,dc:-1,domain:!1});return}if(Q.wizardSchool&&Q.wizardSchool===M.system.school)F=!0;let p={name:J,"system.spellbook":Z};if(L)p.name+=" (Mythic)";if(Q.spellLevel!==-1)p["system.level"]=+Q.spellLevel;let d=J.match(/(\d+)\s*PE/);if(d!==null)p["spellPoints.cost"]=`${d[1]}`;switch(await this.processSpellSlots(Q,M,p,Z,Y,w,F),p["system.atWill"]=Q.isAtWill&&(M.system.level>0||Q.isSpellLike),Q.frequency){case z0.Constant:case z0.Weekly:case z0.Monthly:case z0.Yearly:p.name=_.translate(`spellFrequency.${Q.frequency}`)+": "+M.name;break;default:break}if(F)Object.assign(p,{"system.domain":!0,"system.slotCost":1});await M.updateSource(p),_.log("Spell Updates",p);try{[E,O]=await D(M)}catch(a){console.error(a)}await O.update(p),await this.processSpellDC(O,T,Z),W.spells.push({name:O.name,prepCount:w,dc:T,domain:!M.system?.school?F:!1})}async processSpellSlots(J,Q,Z,Y,H,X,G){let W=window.SBC.actor;if(!J.spellRowIsInitialized)await W.update({[`system.attributes.spells.spellbooks.${Y}.spells.spell${Q.system.level}.base`]:0}),J.spellRowIsInitialized=!0;if(!J.isAtWill&&!J.isConstant){if(J.spellsPerXTotal!==-1&&J.isSpellLike){if(Object.assign(Z,{"system.uses.max":+J.spellsPerXTotal,"system.uses.value":+J.spellsPerXTotal,"system.uses.per":J.spellsPerX,"system.preparation.max":+J.spellsPerXTotal,"system.preparation.value":+J.spellsPerXTotal}),Q.system.level===0)Object.assign(Z,{"system.uses.autoDeductChargesCost":"1"});W0[Y][`${Q.system.level}`].base+=+J.spellsPerXTotal,W0[Y][`${Q.system.level}`].max+=+J.spellsPerXTotal}else if(J.spellsPerXTotal!==-1&&H==="spontaneous"&&!J.isSpellLike)W0[Y][`${Q.system.level}`].base=+J.spellsPerXTotal,W0[Y][`${Q.system.level}`].max=+J.spellsPerXTotal;else if(H==="prepared"&&J.spellsPerXTotal===-1)Object.assign(Z,{"system.preparation.max":X,"system.preparation.value":X}),W0[Y][`${Q.system.level}`].base+=X,W0[Y][`${Q.system.level}`].max+=X;if(G)W0[Y][`${Q.system.level}`].base-=1,W0[Y][`${Q.system.level}`].max-=1}else if(Q.system.level===0&&H==="prepared")Object.assign(Z,{"system.preparation.max":X,"system.preparation.value":X})}async processSpellDC(J,Q,Z){let Y,H=window.SBC.actor.system.attributes.spells.spellbooks[Z].ability,X=window.SBC.actor.system.abilities[H].mod,G=10+ +J.system.level+ +X;if(Y=+Q-+G,Q!==-1&&J.system.actions.length>0){let W=J.system.actions,z=J.actions.get(J.actions.contents[0].id);if(z)await z.update({"save.dc":Y}),W[0]=z,await J.update({"system.actions":W})}}async parseSpellbookSpecials(J,Q,Z){let Y=null,H="",X="",G,W=0,K=window.SBC.compendiumSearch,q={search:new Set,type:"feat"},j={itemType:"feat",itemSubType:"classFeat",classes:this.app.processData.characterData.classes,race:this.app.processData.characterData.race},F=window.SBC.actor;do{if((G=J.match(/(?!Domain spell)Domains?\s*(.*?)(?:;|$)/i))!==null||(G=J.match(/Domain\s*spells*\s*\((.*?)\)\s*(?:;|$)/i))!==null){H=_.translate("spellFeature.domain")+": ",Y={label:H.replace(":",""),value:G[1]};for(let L of G[1].split(",")){L=_.parseSubtext(L)[0];let E=L.match(/\((.*) subdomain\)/i);if(E)q.search.add(`${E[1].capitalize()} Subdomain`),q.search.add(E[1].capitalize());else q.search.add(`${L.capitalize()} Domain`),q.search.add(`${L.capitalize()} Subdomain`),q.search.add(L.capitalize());q.item=L;let O=await K.findEntityInCompendia(q,j);if(q.search.clear(),O)await _.addAssociatedClass(O,F.itemTypes.class),await D(O);else H+=`${L}, `,W++}H=W>0?H.slice(0,-2):"",X="domains";break}if((G=J.match(/Myster[y|ies]\s*(.*?)(?:;|$)/i))!==null){H=_.translate("spellFeature.mystery")+": ",Y={label:H.replace(":",""),value:G[1]};for(let L of G[1].split(",")){L=_.parseSubtext(L)[0],q.search.add(`${L.capitalize()} Mystery`),q.search.add(L.capitalize()),q.item=L;let E=await K.findEntityInCompendia(q,j);if(q.search.clear(),E)await _.addAssociatedClass(E,F.itemTypes.class),await D(E);else H+=`${L}, `,W++}H=W>0?H.slice(0,-2):"",X="mysteries";break}if((G=J.match(/(?!Spirit magic spell)Spirits?\s*(.*?)(?:;|$)/i))!==null){H=_.translate("spellFeature.spirit")+": ",Y={label:H.replace(":",""),value:G[1]};for(let L of G[1].split(",")){L=_.parseSubtext(L)[0],q.search.add(`${L.capitalize()} Spirit`),q.search.add(L.capitalize()),q.item=L;let E=await K.findEntityInCompendia(q,j);if(q.search.clear(),E)await _.addAssociatedClass(E,F.itemTypes.class),await D(E);else H+=`${L}, `,W++}H=W>0?H.slice(0,-2):"",X="spirits";break}if((G=J.match(/Bloodlines?\s*(.*?)(?:;|$)/i))!==null){H=_.translate("spellFeature.bloodline")+": ",Y={label:H.replace(":",""),value:G[1]};for(let L of G[1].split(",")){L=_.parseSubtext(L)[0],q.search.add(`${L.capitalize()} Bloodline`),q.search.add(L.capitalize()),q.item=L;let E=await K.findEntityInCompendia(q,j);if(q.search.clear(),E)await _.addAssociatedClass(E,F.itemTypes.class),await D(E);else H+=`${L}, `,W++}H=W>0?H.slice(0,-2):"",X="bloodlines";break}if((G=J.match(/Patrons?\s*(.*?)(?:;|$)/i))!==null){H=_.translate("spellFeature.patron")+": ",Y={label:H.replace(":",""),value:G[1]};for(let L of G[1].split(",")){L=_.parseSubtext(L)[0],q.search.add(`${L.capitalize()} Patron`),q.search.add(L.capitalize()),q.item=L;let E=await K.findEntityInCompendia(q,j);if(q.search.clear(),E)await _.addAssociatedClass(E,F.itemTypes.class),await D(E);else H+=`${L}, `,W++}H=W>0?H.slice(0,-2):"",X="patrons";break}if((G=J.match(/(Opposition|Prohibited) Schools\s(.*?)(?:;|$)/i))!==null){let[L,E,O]=G;H=_.translate(`spellFeature.${E.toLowerCase()}`)+": "+O,X="oppositions"}if((G=J.match(/Thassilonian Specialization\s*(.*?)(?:;|$)/i))!==null){if(H=_.translate("spellFeature.thassilonianSpecialist")+": ",G[1])await F.update({[`system.attributes.spells.spellbooks.${Z}.domainSlotValue`]:2});Y={label:H.replace(":",""),value:G[1]};for(let L of G[1].split(",")){L=_.parseSubtext(L)[0],q.search.add(`${L.capitalize()} School`),q.search.add(L.capitalize()),q.item=L;let E=await K.findEntityInCompendia(q,j);if(q.search.clear(),E)await _.addAssociatedClass(E,F.itemTypes.class),await D(E);else H+=`${L}, `,W++}H=W>0?H.slice(0,-2):"",X="thassilonianSpecialist";break}if((G=J.match(/Inquisitions?\s*(.*?)(?:;|$)/i))!==null){H=_.translate("spellFeature.inquisition")+": ",Y={label:H.replace(":",""),value:G[1]};for(let L of G[1].split(",")){L=_.parseSubtext(L)[0],q.search.add(`${L.capitalize()} Inquisition`),q.search.add(L.capitalize()),q.item=L;let E=await K.findEntityInCompendia(q,j);if(q.search.clear(),E)await _.addAssociatedClass(E,F.itemTypes.class),await D(E);else H+=`${L}, `,W++}H=W>0?H.slice(0,-2):"",X="inquisition";break}}while(!1);if(H!==""){let L=await _.generatePlaceholderEntity({name:H,type:X},Q);await D(L)}return Y}static processSpellName(J){let Q=!1,Z=!1,Y=_.parseSubtext(J),H=Y[0].trim(),X=Y[1]?.trim()??"",G=J.replace(new RegExp(`(${J0(H)}\\s|\\(${J0(X)}\\))`,"g"),"").trim(),W=H;if(H==="")return[H,W,X,Q,Z];if(H.endsWith("D"))Q=!0,H=H.substring(0,H.length-1);else if(X.endsWith("D"))Q=!0,X=X.substring(0,X.length-1);else if(G.endsWith("D"))Q=!0;if(H.endsWith("M"))Z=!0,H=H.substring(0,H.length-1);else if(X.endsWith("M"))Z=!0,X=X.substring(0,X.length-1);else if(G.endsWith("M"))Z=!0;let z=H.match(new RegExp(`(${O0.join("\\b|\\b")})`,"gi"));if(z)W=H.replace(new RegExp(`(${z.join("\\b|\\b")})`,"gi"),"").trim();return[H,W,X,Q,Z]}async findSpellEntities(J,Q="both"){let Y=window.SBC.compendiumSearch,[H,X]=[null,null];if(Q==="both"||Q==="spell")H=await Y.findEntityInCompendia(J,{itemTypes:["spell"]});if(Q==="both"||Q==="classFeat")X=await Y.findEntityInCompendia(J,{itemTypes:["feat"],itemSubTypes:["classFeat","misc"],race:this.app.processData.characterData.race});return[H,X]}static getDefaultSpellbookData(){return{name:"",inUse:!1,castPerDayAllOffsetFormula:"",preparedAllOffsetFormula:"",casterType:"high",class:"",cl:{formula:"",total:0},concentrationFormula:"",concentrationNotes:"",clNotes:"",ability:"int",autoSpellLevelCalculation:!0,autoSpellLevels:!0,psychic:!1,arcaneSpellFailure:!0,hasCantrips:!0,spellPreparationMode:"spontaneous",baseDCFormula:"10 + @sl + @ablMod",spellPoints:{useSystem:!1,value:0,maxFormula:"",restoreFormula:""},spells:{spell0:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell1:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell2:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell3:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell4:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell5:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell6:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell7:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell8:{castPerDayOffsetFormula:"",preparedOffsetFormula:""},spell9:{castPerDayOffsetFormula:"",preparedOffsetFormula:""}},spellSlotAbilityBonusFormula:"",domainSlotValue:1,concentration:{total:0},isSchool:!0}}static getClassPostfixFromSpellbookName(J){if(!J)return[];if(J=J.toLowerCase(),J.includes("domain"))return["CLE","DRU","INQ"];else if(J.includes("bloodline"))return["SOR","BLO"];else if(J.includes("school"))return["WIZ"];else if(J.includes("mystery"))return["ORA"];else if(J.includes("patron"))return["WIT"];else if(J.includes("spirit"))return["SHA"];else return[]}static getHighestSpellLevelFreeSlots(J,Q){let Z=0;switch(J){case"bloodrager":Z=Math.max(0,Math.ceil((Q-6)/3));break;case"sorcerer":Z=Math.max(0,Math.ceil(Q-2)/2);break;case"oracle":Z=Math.max(0,Math.floor(Q/2));break;case"psychic":Z=Math.max(1,Math.floor(Q/2));break;default:break}let Y={};if(Z>0)for(let H=1;H<=Z;H++)Y[`spell${H}.preparedOffsetFormula`]="1";return Y}static async setFeatureUses(J,Q,Z){let Y={"system.uses.value":Q,"system.uses.max":Q};if(!J.system.uses.maxFormula)Y["system.uses.maxFormula"]=`${Q}`;switch(Z){case z0.Weekly:Y["system.uses.per"]="week";break;default:Y["system.uses.per"]="day";break}await J.update(Y)}}class q0 extends g{constructor(J,Q,Z,Y){super(J);this.targetValueFields=Q,this.targetModFields=Z,this.supportedType=Y}async parse(J,Q){if(_.log(_.translate("parser.ability.status",{value:J,fields:this.targetValueFields.join(", ")})),typeof J===this.supportedType)try{for(let Z of this.targetValueFields)await F0(window.SBC.actor,Z,J);return!0}catch(Z){return this.throwError(Z,"parser.ability.error",J,Q,{fields:this.targetValueFields.join(", "),modValue:_.getModifier(J),modFields:this.targetModFields.join(", ")}),!1}else return this.throwError(void 0,"parser.ability.typeError",J,Q,{type:this.supportedType}),!1}}class a0 extends g{get parserGroup(){return"Parser/Statistics"}get parserType(){return"gear"}async _parse(J,Q,Z=void 0){let H=window.SBC.compendiumSearch;if(J==="none")return!0;J=J.replace(/\b(?:and|with)\s*(\d+)/gi,", $1").replace(/ioun stones \([^)]+\)/i,(K)=>K.substring(K.indexOf("(")+1,K.length-1).split(",").map((q)=>{return q.split("[")[0].trim()+" Ioun Stone"}).join(", ")).replace(/(scrolls \([^)]+\))/gi,(K)=>{return K.substring(9,K.length-1).split(/,? and |, /g).map((q)=>"scroll of "+q).join(", ")}).replace(/implanted ioun stones? \(((?:[^,)]+,?)+)\)/gi,(K)=>K.substring(0,K.length-1).split("(")[1].split(",").map((q)=>{let j=q.match(/(\d+)/)?.[1]||1;return`Ioun Stone ${q.replace(/\d+/,"").trim().replace(/s$/,"")} (${j}, Implanted)`}).join(", "));let X={pp:0,gp:0,sp:0,cp:0},G=this.splitText(J,!1),W=[],z=["consumable","equipment","loot","weapon","container","implant"];if(await _.runParallelOps(G,async(K)=>{let q=!1,j=null;if(K=K.trim().replaceAll("*","").replaceAll("[","(").replaceAll("]",")").replace(/(\d+)\s*doses(?! of)/i,"$1").replace(/^pair of /i,"2 ").replace(/\(as\s+(?:an?\s+)?/i,"(").replace(/^And\s/i,""),/^\d+\s/.test(K)&&!_.getMoneyFromString(K))K=K.replace(/^(\d+)(.*)/,"$2 ($1)").trim();let F=0,L=!1;if(K.match(/\d+\s+[pscg]p\s+in\b/i)){let v;[v,K]=K.split(/\bin\b/i),K=`${K} worth ${v}`}if(K.match(/\bworth\b/i)){let v;[K,v]=K.split(/\bworth\b/i);let{worth:U,rest:x}=/(?<worth>(?:\s*\d+\s*[pgsc]p\s*){1,4})(?:each|for the pair|total|in all)?(?<rest>.*)/g.exec(v).groups;L=U.match(/for the pair|total|in all/i)!==null,K=(K+x).replace(/,\s*,\s*/g,", ").replace(/\(\s*,\s*/g,"(").replace(/\s*,\s*\)/g,")").replace(/\s{2,}/," ").replace(/\(\s*\)/g,"").trim().trim(),F=_.convertMoneyToGold(_.getMoneyFromString(U))}let E=0;if(/\+?\d+ Str\b/i.test(K))E=+K.match(/(\d+) Str\b/i)[1].trim(),K=K.replace(/\s*\(\+?\d+ Str\)/i,"").trim();let O=_.parseSubtext(K),B=O[0],N=O[1],P=new Set([K,B,N].filter((v)=>v));if(P.add(B.replace(/(^\d+|masterwork|mwk)/g,"").trim()),j=K?.match(/(?:\b|\()(?:focus\s+)?for\b/)){q=!0;let v=K.split(j[0])[0].trim();P.add(v)}let M=1,R="",T="",S=[],h=0,w={},p=window.SBC.actor.system.traits.size.base||"med",d="",a=null;[...P].forEach((v)=>{P.add(v.replace(/s of\b/i," of"))});let C=window.SBC.config.sillyGear,e=Object.keys(C);if([...P].forEach((v)=>{let U=_.haystackRegexSearch(e,v);if(U){let x=new RegExp(U,"i");P.add(v.replace(x,C[U])),q=!0}}),[...P].forEach((v)=>{if(j=v.match(/(\d+) charges?/i))a=+j[1],P.add(v.replace(j[0],"").replace(/\(\s*,\s*/,"(").replace(/\(\s*\)/,"").trim())}),[...P].forEach((v)=>{if((j=v.match(U0()))!==null)p=_.getKeyByValue(pf1.config.actorSizes,j[0])||"med",P.add(v.replace(j[0],"").trim())}),[...P].forEach((v)=>{if((j=v.match(G$()))!==null)P.add(v.replace(j[0],"").trim()),d=j[0]}),N?.length){let v=K.match(/\((\d+)\s*(?:\)\s*$|,\s*)/);if(v)M=+v[1],P.add(N.replace(new RegExp(`^${v[1]}`),"").replace(/^\s*,\s*/,"").trim()),P.add(K.replace(new RegExp(`\\(\\s*${v[1]}`),"(").replace(/\(\s*,\s*/,"(").replace("()","").trim())}if([...P].forEach((v)=>{if(v.toLowerCase().includes("rod")&&v.toLowerCase().includes("metamagic")){let U=v.match(/(lesser|normal|greater)/i)?.[0]||"";if(v=v.replace(/rod(?: of)?/i,"").replace(/metamagic/i,"").replace(U,"").trim(),v.toLowerCase().includes("elemental"))v="Elemental",q=!0;v=`${v} Metamagic Rod, ${_.capitalize(U)}`,P.add(v)}}),[...P].forEach((v)=>{let U;if(U=v.toLowerCase(),U.includes("holy symbol")){let x=U.match(/\b(?:wood|silver|gold|iron|platinum|flask|tattoo)/gi)?.[0]||"wood";if(U.startsWith(x.toLowerCase()))U=U.split(" ").slice(1).join(" ");if(U.includes("unholy"))q=!0;if(!U.split(" ")[0].includes("holy"))q=!0,x="iron";if(U.includes(" of "))q=!0;P.add(`Holy Symbol (${x.capitalize()})`)}}),[...P].forEach((v)=>{if((j=v.match(W1()))!==null)P.add(v.replace(W1(),"").trim()),P.add(v.replace(W1(),"").trim()+` (${j[0]})`)}),[...P].forEach((v)=>{if((j=v.match(t1()))!==null)P.add(v.replace(j[0],"").trim()+` (${j[0]})`),P.add(v.replace(j[0],"").trim()+` ${j[0]}`)}),[...P].forEach((v)=>{if((j=$$().exec(v))!==null)P.add(`${j[2]} (${j[1]})`),P.add(j[2])}),[...P].forEach((v)=>{if(v.search(r1())!==-1){let U=v.match(C0());R=U?U[0]:R,R=pf1.registry.materials.contents.find((x)=>x.name===_.capitalize(R??"")||x.id===R)?.id??null,P.add(v.replace(C0(),"").replace(/\s{2,}/," ").trim())}}),K.match(/amulet of mighty fist/i)){h=+K.match(/\+[12345]/)?.[1]||0;let v=f1();while((j=v.exec(K))!==null){let U=j.groups,x=_.getMagicAbility(U.ability,U.prefix||U.postfix||void 0);w[x.name]=x}q=!0,P.add("Amulet of Mighty Fists"+(h?` +${h}`:"+1")),F=this.calculateItemPrice({name:"",type:"weapon",system:{price:0}},{material:null,addons:[],enhancementValue:h,enhancementTypes:Object.values(w)})*2}else[...P].forEach((v)=>{if(v.match(/\+[12345]/)&&!v.match(/\d$/))h=+v.match(/[12345]/)[0].trim(),v=v.replace(/\+[12345]/,"").trim(),P.add(v);if(h){let U=f1(),x=v;while((j=U.exec(x))!==null){let t=j.groups,k=_.getMagicAbility(t.ability,t.prefix||t.postfix||void 0);if(k.hasSpecialTerm)if(t.ability.toLowerCase()==="bane"){let[l,c]=_.extractCreatureTypeInfo(v);v=v.replace(l,"").replace(c,"").replace(`-${t.ability}`,"").trim(),k.specialTerm=`${l} ${c}`}else{let l=v.match(new RegExp("\\b(?:([a-z-]+)[- ])?"+k.name+"(?: \\(([^)]+)\\))?","i")),c=l[1]||l[2];if(c)k.specialTerm=c;v=v.replace(l[0],"")}else v=v.replace(j[0],"");P.add(v.replace(/\s{2,}/g," ").trim()),w[k.name]=k}}});[...P].forEach((v)=>{if((j=J$().exec(v))!==null)P.add(v),P.add(v.replace(j[0],"").trim()),q=!0}),[...P].forEach((v)=>{P.add(v.replace(/\W?(Integrated|Implanted|Timeworn)\W?/gi,""))}),[...P].forEach((v)=>{if(v.includes("ironwood"))P.add(v.replace(/\bironwood\b\s+/i,"")),T="iron",q=!0}),this.handleSpecialCases(P,N),[...P].forEach((v)=>{if(v.search(/\b(?:physical might|mental prowess)\b/i)!==-1)v=v.replace(/Intelligence/i,"Int").replace(/Wisdom/i,"Wis").replace(/Charisma/i,"Cha").replace(/Strength/i,"Str").replace(/Dexterity/i,"Dex").replace(/Constitution/i,"Con"),P.add(v.replace(/(Str|Dex|Con|Int|Wis|Cha),\s*(Dex|Con|Wis|Cha)/i,"$1 & $2")),q=!0}),[...P].forEach((v)=>{if(v.search(v0())!==-1)S=v.match(v0()).map((x)=>{let t=x[0]+x.slice(1).replace(/\s/,"");return pf1.registry.materials.find((k)=>k.id===t||k.name.toLowerCase()===x.toLowerCase())?.id??null}).filter((x)=>!!x),P.add(v.replace(v0(),""))});let f={type:"loot",name:B.replace(/^([\d+]+|\b(?:masterwork|mwk|broken|timeworn)\b)/gi,"").trim(),rawName:M>1?this.stripQuantity(_.singularize(K)):K,subtext:N,price:L?F/M:F,value:0,size:p,fluffTerm:d,enhancementValue:h,enhancementTypes:Object.values(w),maxStrength:E,charges:a,mwk:/\bmasterwork\b|\bmwk\b/i.test(B)||h>0,quantity:M,timeworn:/\btimeworn\b/i.test(B),broken:/\bbroken\b/i.test(B),material:R,baseMaterial:T,addons:S,implanted:null};[...P].forEach((v)=>{P.add(v?.replace(/ies\s*$/gi,"y")),P.add(v.replace(/ives/gi,"ife")),P.add(v?.replace(/(?!Charges)s\s*$/gi,""))}),console.log(K,P);let r=Object.keys(f),o={},b=_.getMoneyFromString(B);if(b){X.pp+=b.pp,X.gp+=b.gp,X.sp+=b.sp,X.cp+=b.cp;return}else if(G1().test(B)){G1().lastIndex=0,f.type="consumable";let v=B.match(G1()),U=this.getConsumableType(v[1]?.toLowerCase()),x=v[2].replace(/\+\d+/,"").trim(),t=v[2].match(/\+(\d+)/)?.[1]??0,k=parseInt(N?.match(/(\d+) charges/i)?.[1]??(/wand/i.test(U)?50:1)),l=N?.match(/CL\s*(\d+)/i)?.[1]??-1,c=null;if(o=await H.findEntityInCompendia({search:new Set([`${U} of ${x}`]),item:`${U} of ${x}`},{itemType:"consumable"}),!o){if(o=await H.findEntityInCompendia({search:new Set([x,_.singularize(x)]),item:x},{itemType:"spell"}),o){let m=o.toObject();if(t){let y=await H.findEntityInCompendia({search:m.name,item:m.name},{itemType:"buff"});if(y){let i=y.system.changes[0].formula;for(let Q0=1;Q0<=20;Q0++)if((await new pf1.dice.RollPF(i,{item:{level:Q0}}).evaluate()).total===+t){m.cl=Q0;break}}}c=await CONFIG.Item.documentClasses.spell.toConsumable(m,U==="oil"?"potion":U)}}else c=o;if(c){if(U==="wand")f.charges=k;if(l>0)c.system.cl=parseInt(l);if(t)c.name+=` +${t}`,f.enhancementValue=0;if(U==="oil")c.name=c.name.replace("Potion","Oil"),c.system.unidentified.name=c.system.unidentified.name.replace("Potion","Oil");o=new Item.implementation(c)}}else if(o=await H.findEntityInCompendia({search:P,item:K},{itemTypes:z}),o?.type==="implant")f.implanted=!0;if(N&&o?.name?.toLowerCase()===N.toLowerCase())q=!0;if(o&&Object.keys(o).length!==0){let v=q?_.capitalize(f.rawName):this.buildItemName(o,f),U=this.calculateItemPrice(o,f);if(o.system.price!==U)f.price=U;let x={name:v,"system.identifiedName":v};for(let t=0;t<r.length;t++){let k=r[t],l=f[k];if(!l||Array.isArray(l)&&!l.length)continue;switch(k){case"implanted":if(J!==null)x["system.implanted"]=l;break;case"charges":if(o.system?.uses?.per==="charges")x["system.uses.value"]=l;break;case"material":{let c=pf1.registry.materials.get(l)||null;if(!c)break;let m=Array.isArray(c.baseMaterial)?c.baseMaterial:[c.baseMaterial],y=f.baseMaterial||o.system?.material?.base?.value||o.system?.armor?.material?.base?.value;switch(y=m.includes(y)?y:m[0],o.type){case"weapon":x["system.material.normal.value"]=l,x["system.material.base.value"]=y;break;case"equipment":if(["armor","shield"].includes(o.system.subType))x["system.armor.material.normal.value"]=l,x["system.armor.material.base.value"]=y;break}Object.assign(x,this.applyMaterialInfo(o,f,f.material));break}case"size":x["system.size"]=l;break;case"maxStrength":if(o.type==="weapon"){let c=o.toObject().system.actions??[];c.forEach((m)=>setProperty(m,"ability.max",l)),x["system.actions"]=c}break;case"addons":{switch(o.type){case"weapon":x["system.material.addon"]=l;break;case"equipment":if(["armor","shield"].includes(o.system.subType))x["system.armor.material.addon"]=l;break}l.forEach((c)=>Object.assign(x,this.applyMaterialInfo(o,f,c)));break}case"enhancementTypes":{let c=o.system.description.value,m=+(f.enhancementValue||0)*3,y=[];if(l.forEach((i)=>{m=Math.max(m,i.cl),y.push(i.aura),c+=`
<h3>`+_.translate(`specialAbilities.${i.name}.name`)+`</h3>
`+_.translate(`specialAbilities.${i.name}.description`)}),x["system.description.value"]=c,x["system.cl"]=m,y=y.filter((i,Q0)=>y.indexOf(i)===Q0),y.length===1)x["system.aura.school"]=y[0];else x["system.aura.custom"]=!0,x["system.aura.school"]=y.map((i)=>_.translate(`auras.${i}`)).join(", ");break}case"enhancementValue":switch(o.type){case"weapon":x["system.enh"]=+l,x["system.masterwork"]=!0,x["system.aura.school"]="evo";break;case"equipment":x["system.armor.enh"]=+l,x["system.masterwork"]=!0,x["system.aura.school"]="abj";break}x["system.hardness"]=o.system.hardness+l*2,x["system.hp.max"]=o.system.hp.max+l*10,x["system.hp.value"]=o.system.hp.value+l*10,x["system.cl"]=+l*3;break;case"price":x["system.price"]=+l;break;case"mwk":x["system.masterwork"]=l;break;case"value":x["system.price"]=+l;break;case"quantity":x["system.quantity"]=+l;break;case"timeworn":x["system.timeworn"]=l;break;case"broken":x["system.broken"]=l;break;default:break}}if(Object.keys(x).length)console.log(_.translate("parser.gear.parseInfo"),x),await o.updateSource(x);await D(o)}else{f.name=K;let v=await _.generatePlaceholderEntity(f,Q);await D(v),W.push(f.name)}}),X.pp||X.gp||X.sp||X.cp){let K=((X.pp?_.translate("money.pp",{value:X.pp}):"")+" "+(X.gp?_.translate("money.gp",{value:X.gp}):"")+" "+(X.sp?_.translate("money.sp",{value:X.sp}):"")+" "+(X.cp?_.translate("money.cp",{value:X.cp}):"")).replace(/\s{2,}/," ").trim(),q={type:"container",name:_.translate("moneyPouch",{money:K}),currency:X},j=await _.generatePlaceholderEntity(q,Q);await D(j)}if(W.length>0)this.logInfo("parser.gear.generatedPlaceholders",W[0],Q,{items:W.join(", ")});return this.app.processData.notes.statistics.gear=this.getItemNotes(),!0}applyMaterialInfo(J,Q,Z){let Y={},H=pf1.registry.materials.get(Z)||null;if(!H)return Y;if(H.hardness)Y["system.hardness"]=H.hardness+Q.enhancementValue*2;if(H.healthMultiplier)Y["system.hp.max"]=Math.max(1,Math.floor(J.system.hp.max*H.healthMultiplier)+Q.enhancementValue*10),Y["system.hp.value"]=Math.max(1,Math.floor(J.system.hp.value*H.healthMultiplier)+Q.enhancementValue*10);if(H.masterwork)Y["system.masterwork"]=!0;if(H.weight.multiplier!==1)Y["system.weight.value"]=J.system.weight*H.weight.multiplier;if(H.weight.bonusPerPound)Y["system.weight.value"]=J.system.weight*(1+H.weight.bonusPerPound);if(J.type==="equipment"){let X=H[J.system.subType]||{acp:0,maxDex:0,asf:0};if(X.acp)Y["system.armor.acp"]=Math.max(0,J.system.armor.acp-X.acp);if(X.maxDex&&J.system.armor.dex)Y["system.armor.dex"]=J.system.armor.dex+X.maxDex;if(X.asf)Y["system.spellFailure"]=Math.max(0,J.system.spellFailure+X.asf)}return Y}buildItemName(J,Q){let Z=[J.name];if(Q.maxStrength)Z.unshift(`(+${Q.maxStrength} ${_.translate("str")})`);if(Q.addons.forEach((Y)=>{let H=pf1.registry.materials.get(Y);if(H)Z.push(H.name)}),Q.material&&!Q.name.match(/\bwand\b/i)){let Y=pf1.registry.materials.get(Q.material);if(Y&&!J.name.includes(Y.name))Z.push(Y.name);else Q.material=null}if(Q.enhancementTypes.forEach((Y)=>{Z.push((Y.hasSpecialTerm?_.capitalize(Y.specialTerm)+"-":"")+_.translate(`specialAbilities.${Y.name}.name`))}),Q.timeworn)Z.push(_.translate("timeworn"));if(Q.broken)Z.push(_.translate("broken"));if(Q.enhancementValue&&!J.name.match(new RegExp(`\\+${Q.enhancementValue}`)))Z.push("+"+Q.enhancementValue);else if(Q.mwk)Z.push(_.translate("masterwork"));if(Q.fluffTerm)Z.push(_.capitalize(Q.fluffTerm));if(Q.size&&Q.size!=="med")Z.push(pf1.config.actorSizes[Q.size]);return Z.reverse().join(" ")}calculateItemPrice(J,Q){if(Q.price)return Q.price;let Z=J.system.price||0;if(Z+=this.calculateMaterialPrice(J,Q,Q.material),Q.addons.forEach((H)=>Z+=this.calculateMaterialPrice(J,Q,H)),Q.mwk)if(J.system.subType==="ammo"||Q.name.toLowerCase()==="shuriken"||Q.name.toLowerCase()==="crystal chakram")Z+=6;else Z+=J.type==="weapon"?300:150;let Y=Q.enhancementValue;if(Q.enhancementTypes.forEach((H)=>{if(H.bonus)Y+=H.bonus;if(H.staticCost)Z+=H.staticCost}),Y){let H=J.type==="weapon"?2000:J.type==="equipment"?1000:40;if(J.name.toLowerCase()==="shuriken"||J.name.toLowerCase()==="crystal chakram")H=40;Z+=Math.pow(Y,2)*H}if(Q.maxStrength){let H=Q.rawName.match(/longbow/i);Z+=Q.maxStrength*(H?100:75)}return Z}calculateMaterialPrice(J,Q,Z){let Y=parseFloat(J.system.price)||0,H=Y,X=pf1.registry.materials.get(Z);if(!X)return 0;switch(J.type){case"equipment":{if(J.system.subType!=="armor"&&J.system.subType!=="shield")break;if(X)switch(Y*=X.price.multiplier||1,J.system.subType){case"shield":Y+=X.price.shield||0;break;case"armor":switch(J.system.equipmentSubtype){case"lightArmor":Y+=X.price.lightArmor||0;break;case"mediumArmor":Y+=X.price.mediumArmor||0;break;case"heavyArmor":Y+=X.price.heavyArmor||0;break}break;default:Y+=X.price.perPound*J.system.weight.value;break}if(Q.mwk&&X?.masterwork)Y-=150;break}case"weapon":{if(X)Y*=X.price.multiplier||1;if(J.name.toLowerCase()==="shuriken"||J.name.toLowerCase()==="crystal chakram"){if(Y+=X.price.ammunition||0,Q.mwk&&X?.masterwork)Y-=6}else{switch(J.system.weaponSubtype){case"light":Y+=X.price.lightWeapon||0;break;case"1h":Y+=X.price.oneHandWeapon||0;break;case"2h":Y+=X.price.twoHandWeapon||0;break;case"ranged":Y+=X.price.rangedTwoHandWeapon||0;break;default:Y+=X.price.perPound*J.system.weight.value;break}if(Q.mwk&&X?.masterwork)Y-=300}break}case"loot":{if(J.system.subType!=="ammo")break;if(X)if(Y*=X.price.multiplier||1,X.price.ammunition)Y+=X.price.ammunition;else Y+=X.price.perPound*J.system.weight.value;if(Q.mwk&&!X?.masterwork)Y+=6;break}}if(Q.enhancementValue)Y+=X.enhancement?.weapon||0;return Y-H}getItemNotes(){let J=[],Q=window.SBC.actor,Z=["weapon","equipment","consumable","loot","container"];for(let Y of Z)Q.itemTypes[Y].forEach((H)=>{J.push({name:H.name,quantity:H.system.quantity||1,charges:H.system.uses?.per==="charges"?H.system.uses.value:null})});return J}getConsumableType(J){switch(!0){case J.search(/^(?:potion|oil)s?/i)!==-1:return"potion";case J.search(/^wands?/i)!==-1:return"wand";case J.search(/scrolls?/i)!==-1:return"scroll";default:return}}stripQuantity(J){return J.replace(/\(\d+\s*[,)]\s*/,"(").replace("()","").trim()}handleSpecialCases(J,Q){[...J].forEach((Z)=>{if(Z.search(/grenades?$/gi)!==-1)J.add(`Grenade (${Z.replace(/s$/,"")})`)}),[...J].forEach((Z)=>{if(Z.search(/black powder horn/i)!==-1)J.add(Z.replace(/black powder horn/i,"Powder Horn"))}),[...J].forEach((Z)=>{if(Z.includes("flail")&&(!Z.includes("light")||!Z.includes("heavy")))J.add(Z.replace(/flail/i,"Light Flail"))}),[...J].forEach((Z)=>{if(Z.search(/studded leather(?!\s*armor)/i)!==-1)J.add(Z.replace(/studded leather/i,"Studded Leather Armor"))}),[...J].forEach((Z)=>{if(Z.search(/lamellar\s*armor/i)!==-1)J.add(Z.replace(/lamellar armor/i,"Lamellar"))}),[...J].forEach((Z)=>{if(Z.toLowerCase().includes("pearl of power")){let Y=+Z.match(/(\d+)/)?.[1];if(Y){let H=["st","nd","rd"][Y-1]??"th";J.add(`Pearl of Power, ${Y}${H} Level Spell`)}}}),[...J].forEach((Z)=>{if(Z.match(/tool/i)&&Z.match(/artisan|thieves/i)){let Y=Z.includes("artisan")?"Artisan's":"Thieves'";J.add(Y+" Tools, "+(Z.match(/\b(?:mwk|masterwork)\b/i)?"Masterwork":"Common"))}}),[...J].forEach((Z)=>{if(Z.toLowerCase().includes("bullet"))J.add(Z.replace(/bullet/i,"Firearm Bullet"))}),[...J].forEach((Z)=>{if(Z.toLowerCase().includes("bolt"))J.delete(Z),J.add(Z.replace(/bolt/i,"Crossbow Bolt"))}),[...J].forEach((Z)=>{if(Z.toLowerCase().includes("alchemical")&&Z.toLowerCase().includes("cartridge")){Z=Z.replace(/alchemical(.*)cartridges?/gi,"$1 Alchemical Cartridge").replace(/\s{2,}/," ").trim();let Y=Z.toLowerCase().split("alchemical cartridge")[0].trim();J.add("Alchemical Cartridge ("+Y+(Q.includes("bullet")||Y==="paper"?", bullet or pellet":"")+")")}})}}class e0 extends g{get parserGroup(){return"Parser/Statistics"}get parserType(){return"language"}async _parse(J,Q,Z=void 0){let Y=J.split(/[,;]/g),H=[],X=[],G="";this.app.processData.notes.statistics.languages=[];for(let W=0;W<Y.length;W++){let z=Y[W].trim(),K=_.parseSubtext(z);if(K.length>1){z=K[0],G=K[1],H.push(`${z} (${G})`);continue}if(z.search(e1())!==-1){let q=_.getKeyByValue(pf1.config.languages,z);X.push(q)}else H.push(z)}return await window.SBC.actor.update({"system.traits.languages":X.concat(H).concat(window.SBC.actor.system.traits.languages.base)}),this.app.processData.notes.statistics.languages.push(...X,...H),!0}}class t0 extends g{get parserGroup(){return"Parser/Statistics"}get parserType(){return"skill"}versatilePerformanceSkillOverrides={};versatilePerformanceSkillDisablers={};async _parse(J,Q,Z=void 0){let[Y,H]=J.split(/racial (?:modifiers?|bonus)/i);Y=this.splitText(Y),H=H?this.splitText(H):[],this.app.processData.notes.statistics.skills=[];let X=window.SBC,G=X.actor.system.attributes.hd.total,W=[],z={},K={},q={},j=X.actor.items.contents;await _.runParallelOps(j,async(O)=>{let B=Object.keys(O.system.classSkills??{});for(let N=0;N<B.length;N++){let P=B[N];if(O.system.classSkills[P]===!0){if(!W.includes(P))W.push(P)}}await this.updateSkillChanges(O,K)});let F=0,L={art:1,crf:1,lor:1,prf:1,pro:1},E=(O)=>O.replace(/\bEnter Choice\b/gim,"any one").replace(/Arcane/gim,"Arcana").replace(/\bPer\./gim,"Perception").replace(/S\. Motive/gim,"Sense Motive").replace(/\bLing\./gim,"Linguistics");for(let O of H){let N=E(O).match(s1());if(!N)continue;let P=parseInt(N.groups.value),M=Object.keys(K).find((R)=>K[R].name===N.groups.name);if(M&&K[M].racial&&N.groups.context)z[N.groups.name.toLowerCase()]={name:N.groups.name,number:P,prefixedValue:_.prefixNumber(P),context:N.groups.context??""}}this.app.processData.notes.statistics.racialSkillModifiers=Object.keys(z).length?Object.values(z):null;for(let O=0;O<Y.length;O++){if(!Y[O])continue;let B=E(Y[O]);if(B.match(/[+-]?\s*\d+(?![^(]*\))/g)?.length>1){let M=B.split(/(?<=[-+]\d+) /);B=M.splice(0,1)[0],Y.push(...M)}let N=null,P=["Arcana","Dungeoneering","Engineering","Geography","History","Local","Nature","Nobility","Planes","Religion"];if(B.search(/knowledge|perform|craft|profession|lore|artistry/i)!==-1&&B.search(/,|\band\b|&/g)!==-1){let M=_.parseSubtext(B),R=M[0],T=M[2][0],S=M[1].split(/,|\band\b|&/g);for(let h=0;h<S.length;h++){let w=S[h].trim(),p=R+" ("+w+") "+T;Y.push(p)}continue}if(B.match(/\bknowledge\b/i)&&B.match(/\bany\b/i)){let M=_.parseSubtext(B),R=M[0],T=M[2][0],S=M[1].match(/\bany\b (.*)/i)[1],h=["one","two","three","four","five","six","even","eight","nine"].indexOf(S)+1,w="";for(let p=0;p<h;p++){let d=Math.floor(Math.random()*10),a=new RegExp(P[d],"i");if(w.search(a)===-1&&!Y.includes(a)){let C=P[d],e=R+" ("+C+") "+T;Y.push(e),w+=e}else p--}continue}if(B.match(/\bknowledge\b/i)&&B.match(/\ball\b/i)){let M=_.parseSubtext(B),R=M[0],T=M[2][0];for(let S=0;S<P.length;S++){let h=P[S].trim(),w=R+" ("+h+") "+T;Y.push(w)}continue}N=_.parseSubtext(B);try{let M=N[0].replace(/[+-]?\s*\d+/g,"").trim(),R=N[0].replace(M,"").replace(/\s/g,""),T="",S="";if(N[1])if(N[1].startsWith("+"))S=N[1];else T=N[1];if(N[2]){if(R===""&&N[2][1])S=N[2][1];R=N[2][0]}let h=M+" ("+T+")",w="";if(M.match(w1()))w=_.getKeyByValue(pf1.config.skills,M);else if(h.match(w1()))M=h,w=_.getKeyByValue(pf1.config.skills,h);else w="skill";let p=X.actor.system.traits.size.base,d=0;if(w!=="skill"){let a=X.actor.system.skills[w].ability,C=X.actor.system.abilities[a].mod;switch(w){case"fly":d=pf1.config.sizeFlyMods[p];break;case"ste":d=pf1.config.sizeStealthMods[p];break;default:break}let e={name:M,key:w,total:+R,abilityMod:+C,classSkill:W.includes(w),sizeMod:+d,racialModifiers:z,changes:K,acp:X.actor.system.skills[w].acp,acpTotal:X.actor.system.attributes.acp.total,maxRanks:G,speedBonus:["swm","clm"].includes(w)?X.actor.system.attributes.speed[w==="swm"?"swim":"climb"].base>0?8:0:0,isOutsider:X.app.processData.characterData.isOutsider,outsiderSkillPicks:X.app.processData.characterData.outsiderSkillPicks,outsiderSkills:X.app.processData.characterData.outsiderSkills,isExpert:X.app.processData.characterData.isExpert,expertSkillPicks:X.app.processData.characterData.expertSkillPicks,expertSkills:X.app.processData.characterData.expertSkills},[f,r,o]=this.calculateSkillRanks(e);if(r){if(o==="outsider")X.app.processData.characterData.outsiderSkillPicks-=1,X.app.processData.characterData.outsiderSkills.push(w);else X.app.processData.characterData.expertSkillPicks-=1,X.app.processData.characterData.expertSkills.push(w);e.classSkill=!0}let b=z[M.toLowerCase()]?.context.length?`${S?"; ":""}${z[M.toLowerCase()].prefixedValue}${z[M.toLowerCase()].context}`:"";if(w.search(/(art|crf|lor|prf|pro)/)===-1)await X.actor.update({[`system.skills.${w}.rank`]:f}),q[w]={},await _.runParallelOps(j,async(v)=>{await this.updateSkillChanges(v,q)}).then(async()=>{let v=Object.assign({},e,{skillChanges:q}),[U,x,t]=this.calculateSkillRanks(v);if(x){if(t==="outsider")X.app.processData.characterData.outsiderSkillPicks-=1,X.app.processData.characterData.outsiderSkills.push(w);else X.app.processData.characterData.expertSkillPicks-=1,X.app.processData.characterData.expertSkills.push(w);e.classSkill=!0}if(f!==U)await X.actor.update({[`system.skills.${w}.rank`]:U})}),this.app.processData.characterData.conversionValidation.skills[w]={total:+R,context:S.replace(/\+?(-?\d+)/g,(v)=>_.prefixNumber(+v-+R))+b},this.app.processData.notes.statistics.skills.push({name:pf1.config.skills[w]||M,prefixedValue:R>=0?"+"+ +R:R,context:S});else{let v=w+ +L[w],U=Object.assign({},e,{key:v,skillChanges:q});await X.actor.update({[`system.skills.${w}.subSkills.${v}`]:{ability:X.actor.system.skills[w].ability,acp:X.actor.system.skills[w].acp,cs:X.actor.system.skills[w].cs,name:T.capitalize(),rank:f,rt:X.actor.system.skills[w].rt}}),q[w]={},await _.runParallelOps(j,async(x)=>{await this.updateSkillChanges(x,q)}).then(async()=>{let[x,t,k]=this.calculateSkillRanks(U);if(f!==x)await X.actor.update({[`system.skills.${w}.subSkills.${v}`]:{ability:X.actor.system.skills[w].ability,acp:X.actor.system.skills[w].acp,cs:X.actor.system.skills[w].cs,name:T.capitalize(),rank:x,rt:X.actor.system.skills[w].rt}})}),this.app.processData.characterData.conversionValidation.skills[v]={name:T.capitalize(),total:+R,context:S.replace(/\d+/g,(x)=>+x-+R)},this.app.processData.notes.statistics.skills.push({name:pf1.config.skills[w]+` (${T.capitalize()})`,prefixedValue:R>=0?"+"+ +R:R,context:S}),L[w]++}}else{let a="skill";if(F>0)a="skill"+(+F+1);let C=X.actor.system.abilities.int.mod,e=+R-+C;if(K[a]!==null&&K[a]!==void 0)e-=K[a];await X.actor.update({[`system.skills.${a}`]:{ability:"int",acp:!1,background:!1,cs:!1,custom:!0,name:M,rank:e,rt:!1}}),this.app.processData.characterData.conversionValidation.skills[a]={name:M,total:+R,context:S.replace(/\d+/g,(f)=>+f-+R)},this.app.processData.notes.statistics.skills.push({name:M,prefixedValue:R>=0?"+"+ +R:R,context:S}),F++}if(M.toLowerCase()==="perception")this.app.processData.notes.base.perception=R>=0?"+"+ +R:R}catch(M){return this.throwError(void 0,"parser.skill.failedToParse",{value:N}),!1}}return!0}async updateSkillChanges(J,Q){if(!J.system.changes)return;await _.runParallelOps(J.system.changes,async(Z)=>{let Y="";if(/skill\.(...)\.subSkills/i.test(Z.target))Y=Z.target.match(/skill\....\.subSkills\.(.*)/i)[1];else if(/skill\./i.test(Z.target))Y=Z.target.match(/skill\.(.*)/i)[1];if(Y!==""){let X=(await Roll.fromTerms(Roll.parse(Z.formula,J.getRollData())).evaluate())?.total??+Z.formula;if(Q[Y]||={total:0,skillFocus:!1,racial:!1},Q[Y].total+=X,J.name.match(/Skill Focus/i))Q[Y].skillFocus=!0;else Q[Y].skillFocus=!1;Q[Y].racial=Q[Y].racial||Z.type==="racial",Q[Y].name=pf1.config.skills[Y]}})}calculateSkillRanks({name:J,key:Q,total:Z=0,abilityMod:Y=0,classSkill:H=!1,sizeMod:X=0,racialModifiers:G={},changes:W={},acp:z=!1,acpTotal:K=0,maxRanks:q=0,speedBonus:j=0,isOutsider:F=!1,outsiderSkills:L=[],outsiderSkillPicks:E=4,isExpert:O=!1,expertSkills:B=[],expertSkillPicks:N=10}={}){if(Object.keys(this.versatilePerformanceSkillOverrides).includes(Q))return[0,!1,""];let P=+Z-+Y-(H?pf1.config.classSkillBonus:0)-+X-+j,M=!1,R="";if(z&&K)P+=K;if(Q==="fly")P-=pf1.config.flyManeuverabilityValues[window.SBC.actor.system.attributes.speed.fly.maneuverability];if(G[J.toLowerCase()]&&G[J.toLowerCase()].context.length===0)P-=G[J.toLowerCase()].number;if(W[Q]!==null&&W[Q]!==void 0)P-=W[Q].total;if((W[Q]?.skillFocus?P-q-3===3||P-q===3:P-q===3||P-q===3||P>q)&&F&&E>0&&!L.includes(Q)&&!H){if(M=!0,R="outsider",W[Q]?.skillFocus&&P-q-3===3)P-=3;P-=pf1.config.classSkillBonus}else if((W[Q]?.skillFocus?P-q-3===3||P-q===3:P-q===3||P>q)&&O&&N>0&&!B.includes(Q)&&!H){if(M=!0,R="expert",W[Q]?.skillFocus&&P-q-3===3)P-=3;P-=pf1.config.classSkillBonus}return _.log(`Skill: ${J} | Total: ${Z} | Ability: ${Y} | Class: ${H} | Size: ${X} | Racial: ${G[J.toLowerCase()]?.number??0} | Change: ${W[Q]?.total??0} | Ranks: ${P}`),[Math.clamp(P,0,q),M,R]}}class V1 extends g{get parserGroup(){return"Parser/Base"}get parserType(){return"age"}async _parse(J,Q,Z=void 0){let Y,H={phys:0,ment:0};switch(J){case"Venerable":Y="SBCPF1.parser.age.venerable",J="venerable",H.phys=-6,H.ment=3;break;case"Old":Y="SBCPF1.parser.age.old",J="old",H.phys=-3,H.ment=2;break;case"Middle[- ]Aged?":Y="SBCPF1.parser.age.middleAged",J="middleAge",H.phys=-1,H.ment=1;break;case"Young":Y="SBCPF1.parser.age.young",J="young";break;default:Y="SBCPF1.parser.age.adult",J="adult"}return Y=game.i18n.localize(Y),await window.SBC.actor.update({"system.details.age":Y,"system.traits.ageCategory":J}),this.app.processData.notes.age=Y,!0}getAbilityChange(J){let Q=["str","dex","con"].includes(J);switch(window.SBC.actor.system.traits.ageCategory.base){case"venerable":return Q?-6:3;case"old":return Q?-3:2;case"middleAge":return Q?-1:1;case"young":switch(J){case"con":case"str":case"wis":return-2;case"dex":return 2;default:return 0}default:return 0}}}class A{static map={};static initMapping(J){A.map={types:{npc:["base","defense","offense","tactics","statistics","ecology","special abilities","description"],character:["base","defense","offense","tactics","statistics","ecology","special abilities","description"],vehicle:["vehicleBase","vehicleDefense","vehicleOffense","vehicleDescription"],trap:["trap"],haunt:["hauntBase"]},trap:{name:new s(J,["name","prototypeToken.name"],"string"),cr:new s(J,["system.details.cr.base","system.details.cr.total"],"number"),type:new s(J,["system.details.type"],"string"),perception:new s(J,["system.attributes.perception.total"],"number"),disableDevice:new s(J,["system.attributes.disableDevice.total"],"number"),trigger:new H0(J,["base.trigger"]),reset:new H0(J,["base.reset"]),effect:new H0(J,["base.effect"]),source:new H0(J,["base.source"]),description:new H0(J,["description.long"],"string")},haunt:{name:new s(J,["name","prototypeToken.name"],"string"),cr:new s(J,["system.details.cr.base","system.details.cr.total"],"number"),alignment:new s(J,["system.details.alignment"],"string"),source:new H0(J,["base.source"]),description:new H0(J,["description.long"],"string")},base:{name:new s(J,["name","prototypeToken.name"],"string"),cr:new s(J,["system.details.cr.base","system.details.cr.total"],"number"),mr:new d0(J),level:new H0(J,["system.details.level.value"]),xp:new H0(J,["system.details.xp.value"]),gender:new s(J,["system.details.gender"],"string"),age:new V1(J),race:new D0(J),classes:new h0(J),source:new H0(J,["base.source"]),alignment:new s(J,["system.details.alignment"],"string"),size:new s(J,["system.traits.size"],"string"),space:new s(J,["prototypeToken.height","prototypeToken.width"],"number"),scale:new s(J,["prototypeToken.texture.scaleX","prototypeToken.texture.scaleY"],"number"),creatureType:new g0(J),init:new s(J,["system.attributes.init.total"],"number"),senses:new y0(J),aura:new A0(J)},defense:{acNormal:new s(J,["system.attributes.ac.normal.total"],"number"),acFlatFooted:new s(J,["system.attributes.ac.flatFooted.total"],"number"),acTouch:new s(J,["system.attributes.ac.touch.total"],"number"),acTypes:new b0(J),hp:new m0(J),regeneration:new s(J,["system.traits.regen"],"string"),fastHealing:new s(J,["system.traits.fastHealing"],"string"),saves:new o0(J),immune:new u0(J),resist:new p0(J),weakness:new c0(J),defensiveAbilities:new x0(J),dr:new k0(J),sr:new l0(J)},offense:{speed:new s0(J),attacks:new B0(J),specialAttacks:new S0(J),space:new s(J,["prototypeToken.height","prototypeToken.width"],"number"),stature:new s(J,["system.traits.stature"],"string"),spellBooks:new X0(J)},tactics:new n0(J),statistics:{str:new q0(J,["system.abilities.str.value"],["system.abilities.str.mod"],"number"),dex:new q0(J,["system.abilities.dex.value"],["system.abilities.dex.mod"],"number"),con:new q0(J,["system.abilities.con.value"],["system.abilities.con.mod"],"number"),int:new q0(J,["system.abilities.int.value"],["system.abilities.int.mod"],"number"),wis:new q0(J,["system.abilities.wis.value"],["system.abilities.wis.mod"],"number"),cha:new q0(J,["system.abilities.cha.value"],["system.abilities.cha.mod"],"number"),bab:new s(J,["system.attributes.bab.total"],"number"),cmb:new s(J,["system.attributes.cmb.total"],"number"),cmd:new s(J,["system.attributes.cmd.total"],"number"),feats:new x0(J),skills:new t0(J),languages:new e0(J),sq:new S0(J),gear:new a0(J)},ecology:new i0(J),specialAbilities:new r0(J),description:new H0(J,["description.long"],"string")}}static getNeededCategories(J){switch(J){case"character":case"npc":return["defense","offense","statistics"];case"vehicle":return["vehicleDefense","vehicleOffense"];case"trap":case"haunt":return[]}}}class h1{static async buildChanges(J,Q=null){let Z=window.SBC.actor,Y=null,H=[];if(Q!==null)Y=Z.items.get(Q),H=[Y];if(Y===null)H=Z.items;let X=Z.getRollData(),G={};H.forEach((W)=>{let z=W.changes;if(!foundry.utils.isEmpty(z))z.map(async(K)=>{let{target:q,formula:j,type:F}=K;if(G[q]==null)G[q]={};let L=await Roll.fromTerms(Roll.parse(j,X)).evaluate();if(L=L?.total??+j,G[q][F]==null)G[q][F]=L;else G[q][F]+=L})}),J.changes=G}static async getValueFromChanges(J,Q=null,Z=null){let Y=0;if(Q==null&&Z==null)return Y;else if(Q!=="all"){if(J.changes[Q]==null)return 0;for(let H in Object.keys(J.changes[Q]))if(Z&&H===Z||Z==null)Y+=J.changes[Q][H];return Y}else return Object.keys(J.changes).map((H)=>{_.log(`Checking subtarget ${H}:`),Object.keys(J.changes[H]).map((X)=>{if(_.log(`type k is ${X} = ${J.changes[H][X]}`),Z&&X===Z||Z==null)Y+=+J.changes[H][X]})}),Y}static async conversionValidation(J){let Q=window.SBC;if(!Q.settings.getSetting("createBuff"))return;Q.settings.getSetting("debug").debug&&console.groupCollapsed("sbc-pf1 | Conversion Validation"),console.log(J);let Z=Q.actor,Y=J.characterData.conversionValidation;try{await this.buildChanges(J);let H=[],X=[],G=[],W=0,z=Object.keys(Y.spellBooks),K={};for(let O=0;O<z.length;O++){let B=z[O],N=Y.spellBooks[B].casterLevel,P=Y.spellBooks[B].concentrationBonus,M=Z.system.attributes.spells.spellbooks[B].cl.total;console.log(B,N,M);let R=Z.system.attributes.spells.spellbooks[B].concentration.total,T=+N-+M,S=+P-R-T;if(J.miscNotes.spellbookNotes[O]={key:B},T!==0)J.miscNotes.spellbookNotes[O].casterLevel=`sbc | Total in statblock was CL ${N}, adjust as needed.`,K[`data.attributes.spells.spellbooks.${B}`]={cl:{formula:T.toString()}};if(S!==0)J.miscNotes.spellbookNotes[O].concentrationBonus=`sbc | Total in statblock was +${P}, adjust as needed.`,K[`data.attributes.spells.spellbooks.${B}.concentrationFormula`]=S.toString()}if(!foundry.utils.isEmpty(K))await Z.update(K),await e$(Z,J.miscNotes.spellbookNotes);let q=["str","dex","con","int","wis","cha"];for(let O of q){let B=Z.system.abilities[O].total,N=Y.attributes[O.capitalize()]??B,P=+N-+B;if(P===0)continue;console.log(N,B);let M=Object.assign({},new pf1.components.ItemChange().toObject(void 0,!1),{formula:P.toString(),type:"untypedPerm",target:O,value:+P});H.push(M),delete Y.attributes[O.capitalize()]}if(H.length){let O={name:"sbc | Conversion Buff (Ability Scores)",type:"buff",system:{description:{value:`<h2>sbc | Conversion Buff (Ability Scores)</h2>
                            This Buff was created by <strong>sbc</strong> to compensate for differences between the statblock input and FoundryVTTs automatically calculated values.
                            <br><br>
                            As differences in ability scores can have cascading effects, these get handled first and in a separate conversion buff.`},active:!0,subType:"perm",changes:H,hideFromToken:!0,level:0,tag:"sbcConversionBuff1",useCustomTag:!0},img:"systems/pf1/icons/skills/yellow_36.jpg"};await Z.createEmbeddedDocuments("Item",[O])}let j=Object.keys(Y.attributes);if(j.splice(j.indexOf("acNormal"),1),j.splice(j.indexOf("acTouch"),1),j.splice(j.indexOf("acFlatFooted"),1),j.push("acNormal","acTouch","acFlatFooted"),J.characterData.isOutsider){let O=Z.itemTypes.class.find((B)=>B.id===J.characterData.outsiderId);if(O){let B={fort:0,ref:0,will:0},N={fort:O.system.savingThrows.fort.value,ref:O.system.savingThrows.ref.value,will:O.system.savingThrows.will.value,changed:!1};for(let P of["fort","ref","will"]){let M=Y.attributes[P],R=Z.system.attributes.savingThrows[P].total??0;B[P]=+M-+R}if(B.fort!==0&&B.ref!==0&&B.fort+B.ref===0)N.fort=O.system.savingThrows.ref.value,N.ref=O.system.savingThrows.fort.value,N.changed=!0;else if(B.fort!==0&&B.will!==0&&B.fort+B.will===0)N.fort=O.system.savingThrows.will.value,N.will=O.system.savingThrows.fort.value,N.changed=!0;else if(B.ref!==0&&B.will!==0&&B.ref+B.will===0)N.ref=O.system.savingThrows.will.value,N.will=O.system.savingThrows.ref.value,N.changed=!0;if(N.changed)await O.update({"system.savingThrows.fort.value":N.fort,"system.savingThrows.ref.value":N.ref,"system.savingThrows.will.value":N.will})}}for(let O=0;O<j.length;O++){let B=j[O],N="",P="",M=Y.attributes[B],R=0,T=0,S=0;if(isNaN(M))continue;switch(B.toLowerCase()){case"cmd":case"cmb":case"init":if(R=Z.system.attributes[B].total,N="untypedPerm",P=B,_.log(`Attribute: ${B} | Total in Actor: ${R} | Total in Statblock: ${M}`),R!==M)S=+M-+R;break;case"hpbonus":N="untypedPerm",P="mhp",S=+M;break;case"hptotal":R=Z.system.attributes.hp.max,N="untypedPerm",P="mhp",S=+M-+R;break;case"acnormal":R=Z.system.attributes.ac.normal.total,N="untypedPerm",P="aac",S=+M-+R-+W;break;case"base":case"enhancement":case"dodge":case"inherent":case"deflection":case"morale":case"luck":case"sacred":case"insight":case"resistance":case"profane":case"trait":case"racial":case"competence":case"circumstance":case"alchemical":case"penalty":T=await this.getValueFromChanges(J,"all",B.toLowerCase()),N=B,P="aac",S=+M-+T,W+=+S;break;case"rage":N="untypedPerm",P="ac",S=+M;break;case"fort":case"ref":case"will":N="untypedPerm",P=B,R=Z.system.attributes.savingThrows[B].total??0,S=+M-+R;break;default:break}if(S!==0){let h=Object.assign({},new pf1.components.ItemChange().toObject(void 0,!1),{formula:S.toString(),type:N,target:P,value:+S});X.push(h)}}let F=Object.keys(Y.context);for(let O=0;O<F.length;O++){let B=F[O],N=Y.context[B];if(N!==""){let P={subTarget:B,target:"misc",text:N};G.push(P)}}let L=Object.keys(Y.skills);for(let O=0;O<L.length;O++){let B=L[O];if(Object.keys(A.map.statistics.skills.versatilePerformanceSkillOverrides).includes(B))continue;let N=B.replace(/(\d+)/,""),P=Y.skills[B],M=0,R=Object.keys(Z.system.skills[N]),T="";if(!R.includes("subSkills"))M=Z.getSkillInfo(B).mod??0,T=`skill.${B}`;else M=Z.getSkillInfo(`${N}.${B}`).mod??0,T=`skill.${N}.${B}`;if(P.context!==""){let S=P.context,h={target:T,text:S};G.push(h)}if(+P.total!==+M){let S=+P.total-+M;if(S!==0){let h=await new pf1.components.ItemChange({formula:S.toString(),type:"untypedPerm",target:T,value:+S});X.push(h.toObject())}}}let E={name:"sbc | Conversion Buff",type:"buff",system:{description:{value:`<h2>sbc | Conversion Buff</h2>
                        This Buff was created by <strong>sbc</strong> to compensate for differences between the input and the values FoundryVTT calculates automatically.
                        <br><br>
                        Especially when the pathfinder system gets upgraded, entries in compendiums get updated or foundry changes in some way, this buff may become outdated.
                        <br><br>
                        For most mooks the conversion should more or less work, but for important NPCs or creatures it is adviced to double check the conversion manually.`},active:!0,subType:"perm",changes:X,contextNotes:G,hideFromToken:!0,level:0,tag:"sbcConversionBuff2",useCustomTag:!0},img:"systems/pf1/icons/skills/yellow_36.jpg"};if(X.length>0||G.length>0)await Z.createEmbeddedDocuments("Item",[E]);Hooks.callAll("sbc.validated",Z)}catch(H){Q.settings.getSetting("debug").debug&&console.error(H);let X="Failed to validate the conversion and create a conversion buff",G=new I(I.ERRORLEVELS.ERROR,"Validation",X);throw J.errors.push(G),console.error(H),H}Q.settings.getSetting("debug").debug&&console.groupEnd()}}async function e$(J,Q){let Z=[],Y="";for(let X of Q){let G=J.system.attributes.spells.spellbooks[X.key];if(X.casterLevel||X.concentration){if(Y+=`<p><strong>${G.name||G.label}</strong>:</p>`,X.casterLevel)Z.push({target:`cl.book.${X.key}`,text:X.casterLevel}),Y+=`<p>Caster Level: ${X.casterLevel}</p>`;if(X.concentration)Z.push({target:`concn.${X.key}`,text:X.concentration}),Y+=`<p>Concentration Bonus: ${X.concentration}</p>`}}let H=J.itemTypes.feat.find((X)=>X.name==="Miscellaneous Notes");if(H)Y=H.system.description.value+Y,await H.update({"system.contextNotes":H.system.contextNotes.concat(Z),"system.description.value":Y});else Y=`<p>This feature was created by <strong>SBC</strong> to collect any notes that don't have a source on the actor,
                such as saving throw details or a bonus to CMD from extra legs. It may also be used to record a natural armor bonus,
                spell resistance bonus, or spellcasting notes.</p>${Y}`,await J.createEmbeddedDocuments("Item",[{name:"Miscellaneous Notes",type:"feat",system:{contextNotes:Z,description:{value:Y},subType:"misc",tag:"miscellaneousNotes"},img:"systems/pf1/icons/skills/yellow_36.jpg"}])}var $1={content:"",line:0};async function q$(J,Q,Z){window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING BASE DATA");let Y=[];J.notes.base={},$1={content:"",line:0};let H=null,X=null;for(let G=0;G<Q.length;G++)try{let W=Q[G].trim();if(W==="")continue;if(!Y.name){if([Y.name,W]=await t$(W,G),W==="")continue}if(!Y.cr&&W.match(/\bCR\b/i)!==null){if([Y.cr,W]=await $J(J,W,G),W==="")continue}if(!Y.mr){if(W.match(/\bMR\b/i)!==null)H=G,X=W;if(Y.classes&&X)[Y.mr,X]=await JJ(J,X,H)}if(G!==0){if(!Y.source&&W.toLowerCase().startsWith("source")){if([Y.source,W]=await ZJ(W,G),W==="")continue}if(!Y.xp&&W.toLowerCase().startsWith("xp")){if([Y.xp,W]=await QJ(J,W,G),W==="")continue}if(!Y.gender&&I1().test(W)){if([Y.gender,W]=await YJ(W,G),W==="")continue}if(!Y.race){if([Y.race,W]=await HJ(W,G),W==="")continue}if(!Y.classes){let z=W.match(_1()),K=W.toLowerCase().startsWith("source");if(!Y.age&&_.haystackRegexSearch(["Middle[- ]Aged?","Old","Venerable"],W)){if([Y.age,W]=await XJ(W,G),W==="")continue}if(!z&&!K){if(Y.classes=await GJ(W,G),W==="")continue}}if(!Y.alignment&&_1().test(W)){if([Y.alignment,W]=await WJ(J,W,G),W==="")continue;if(Y.alignment===!0)Y.classes=!0}if(!Y.size&&U0().test(W)){if(Y.size=await _J(J,W,G),W==="")continue}if(!Y.creatureType&&T1().test(W)&&U0().test(W)){if([Y.creatureType,W]=await zJ(W,G),W==="")continue}if(!Y.init&&W.toLowerCase().match(/^init\b/i)){if([Y.init,W]=await KJ(J,W,G),W==="")continue}if(!Y.senses&&W.match(/\bSenses\b/i)!==null){if([Y.senses,W]=await qJ(W,G),W==="")continue}if(!Y.aura&&W.match(/\bAura\b/i)!==null)$1={content:W,line:G},Y.aura=!0}}catch(W){window.SBC.settings.getSetting("debug")&&console.error(W);let z="Parsing the base data failed at the highlighted line",K=new I(I.ERRORLEVELS.ERROR,"Parse/Base",z,Z+G+1);return J.errors.push(K),J.input.prepared.success=!1,window.SBC.settings.getSetting("debug")&&console.groupEnd(),!1}if(!Y.cr&&window.SBC.actorType===0){let G=new I(I.ERRORLEVELS.WARNING,"Parse/Base","No CR for this NPC detected, please check the highlighted line",0);J.errors.push(G)}if(!Y.creatureType){let G=new I(I.ERRORLEVELS.ERROR,"Parse/Base","No creature type found!");J.errors.push(G)}return _.log("RESULT OF PARSING BASE DATA (TRUE = PARSED SUCCESSFULLY)"),_.log(Y),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}async function t$(J,Q){let Z=A.map.base.name,Y=J.replace(/\bCR\b.*$/i,"").replace(/\($/,"").trim(),H=await Z.parse(Y.trim().capitalize(),Q);if(H)J=_.cleanLine(Y,J);return[H,J]}async function $J(J,Q,Z){let Y=A.map.base.cr,H=Q.match(/\bCR\b\s(-|\d*\.\d+|\d+(?:\/\d+)?)/i),X=H[1];if(X.includes("/"))J.notes.base.cr=X;else for(let[W,z]in Object.entries(window.SBC.config.const.crFractions))if(+X===z){J.notes.base.cr=W;break}let G=await Y.parse(parseFloat(window.SBC.config.const.crFractions[X]||X),Z);if(G)Q=_.cleanLine(H[0],Q);return[G,Q]}async function JJ(J,Q,Z){let Y=A.map.base.mr,X=Q.match(/\bMR\b\s(\d+)/i)[1];J.notes.base.mr=X;let G=await Y.parse(X,Z);if(G)Q=_.cleanLine(X,Q);return[G,Q]}async function ZJ(J,Q){let Z=A.map.base.source,Y=J.match(/^Source\s+(.*)/)[1].trim(),H=await Z.parse(Y,Q);if(H)J=_.cleanLine(Y,J);return[H,J]}async function QJ(J,Q,Z){let Y=A.map.base.xp,H=Q.match(/^XP\s+([\d,.]*)/)?.[1].replace(/\.,/g,"").trim()??"0";J.notes.base.xp=H;let X=await Y.parse(H,Z);if(X===!0)Q=_.cleanLine(Q.match(/^(XP\s+[\d,.]*)/)[1],Q);return[X,Q]}async function YJ(J,Q){let Z=J.match(I1())[0],H=await A.map.base.gender.parse(Z,Q);if(H)J=_.cleanLine(Z,J);return[H,J]}async function HJ(J,Q){let Z=A.map.base.race,Y=_.haystackRegexSearch(window.SBC.config.races.map((H)=>H+="\\b"),J)?.replace("\\b","")||_.haystackRegexSearch(B1.map((H)=>H+="\\b"),J)?.replace("\\b","")||!1;if(!Y)return[!1,J];if(new RegExp(`\\(${Y.toLowerCase()}|,\\s*${Y.toLowerCase()}\\s*,|${Y.toLowerCase()}\\)`).test(J.toLowerCase()))return[!1,J];return[await Z.parse(Y,Q),_.cleanLine(Y,J)]}async function XJ(J,Q){let Z=_.haystackRegexSearch(["Middle[- ]Aged?","Old","Venerable"],J)||"",H=await A.map.base.age.parse(Z,Q);if(H)J=_.cleanLine(Z,J);return[H,J]}async function GJ(J,Q){let Z=J.match(R0());if(Z){let Y=J.slice(J.indexOf(Z[0]));return await A.map.base.classes.parse(Y,Q)}return!0}async function WJ(J,Q,Z){let Y=A.map.base.alignment,H=Q.match(_1())[1].trim();J.notes.base.alignment=H;let X=await Y.parse(H.replace(/\bN\b/,"TN").toLowerCase(),Z);if(X)Q=_.cleanLine(H,Q);return[X,Q]}async function _J(J,Q,Z){let Y=A.map.base.size,H=Q.match(U0())[0].trim();J.notes.base.size=H;let X=_.getKeyByValue(pf1.config.actorSizes,H),G=A.map.base.space,W=A.map.base.scale,z=pf1.config.tokenSizes[X].w,K=pf1.config.tokenSizes[X].scale;switch(X){case"dim":case"fine":case"tiny":await window.SBC.actor.update({"system.skills.swm.ability":"dex","system.skills.clm.ability":"dex","system.attributes.cmbAbility":"dex"});break;default:break}return{size:await Y.parse(X,Z),space:await G.parse(z,Z),scale:await W.parse(K,Z)}}async function zJ(J,Q){let Z=J.match(T1())[1],H=await A.map.base.creatureType.parse(Z,Q);if(H)J=_.cleanLine(Z,J);return[H,J]}async function KJ(J,Q,Z){let Y=A.map.base.init,H=Q.match(/Init\s*([+-]?\d+)/)[1].trim();J.characterData.conversionValidation.attributes.init=+H;let X=await Y.parse(+H,Z);if(X)Q=_.cleanLine(H,Q);return[X,Q]}async function qJ(J,Q){let Z=A.map.base.senses,Y=J.match(/\bSenses\b\s*(.*?)(?:\n|$|\s*Aura)/gim)[0].replace(/\bSenses\b\s*|\s*Aura\b/g,""),H=await Z.parse(Y,Q);if(H)J=_.cleanLine(Y,J);return[H,J]}async function V$(){if(!$1.content)return!0;let J=A.map.base.aura,Q=$1.content.match(/\bAura\b\s*(.*)/gim)[0].replace(/\s*Aura\b/g,"");return await J.parse(Q,$1.line)}async function F$(J,Q,Z){window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING DEFENSE DATA");let Y=[];J.notes.defense={};for(let H=0;H<Q.length;H++)try{let X=Q[H];if(!Y.acNormal&&X.toLowerCase().startsWith("ac"))Y.acNormal=await g1("acNormal","AC",J,X,H+Z);if(!Y.acTouch&&X.match(/Touch/i))Y.acTouch=await g1("acTouch","Touch",J,X,H+Z);if(!Y.acFlatFooted&&X.match(/flat-footed/i))Y.acFlatFooted=await g1("acFlatFooted","flat-footed",J,X,H+Z);if(!Y.acTypes&&/AC.*?\((.*?)\)/i.test(X))Y.acTypes=await VJ(J,X,H+Z);if(!Y.hp&&X.toLowerCase().startsWith("hp"))Y.hp=await FJ(X,H+Z);if(!Y.saves&&X.toLowerCase().startsWith("fort "))Y.saves=await jJ(X,H+Z);if(!Y.dr&&X.match(/\bDR\b/i))Y.dr=await LJ(X,H+Z);if(!Y.immune&&X.match(/Immune\b/i))Y.immune=await OJ(X,H+Z);if(!Y.resist&&X.match(/(?<!abilities\s*)\bResist\b/i))Y.resist=await BJ(X,H+Z);if(!Y.weakness&&X.match(/\bWeaknesses\b/i))Y.weakness=await PJ(X,H+Z);if(!Y.sr&&X.match(/\bSR\b/i))Y.sr=await EJ(X,H+Z);if(!Y.defensiveAbilities&&X.match(/Defensive Abilities\b/i))Y.defensiveAbilities=await NJ(J,X,H+Z)}catch(X){window.SBC.settings.getSetting("debug")&&console.error(X);let G=`Parsing the defense data failed at line ${Z+H+1}`,W=new I(I.ERRORLEVELS.ERROR,"Parse/Defense",G,H+Z);return J.errors.push(W),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!1}return _.log("RESULT OF PARSING DEFENSE DATA (TRUE = PARSED SUCCESSFULLY)"),_.log(Y,window.SBC.actor.system),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}async function g1(J,Q,Z,Y,H){let X=A.map.defense[J],G=new RegExp(`${Q}\\s*(-?\\d+)`,"i"),W=Y.match(G)[1].trim();return Z.notes.defense[J]=W,Z.characterData.conversionValidation.attributes[J]=+W,await X.parse(+W,H)}async function VJ(J,Q,Z){let Y=A.map.defense.acTypes,H=Q.match(/AC.*?\((.*?)\)/i)[1].trim();return J.characterData.conversionValidation.attributes.acTypes=H,await Y.parse(H,Z)}async function FJ(J,Q){let Z=A.map.defense.hp,Y=J.match(/^(?:HP)(.*)/i)[1].trim();return await Z.parse(Y,Q)}async function jJ(J,Q){let Z=A.map.defense.saves,Y=J.match(/^(Fort.*)/i)[1].trim();return await Z.parse(Y,Q)}async function LJ(J,Q){let Z=A.map.defense.dr,Y=J.match(/\bDR\b(.*?)(?=$|Immune|Resist|SR|Weakness)/i)[1].trim();return await Z.parse(Y,Q)}async function OJ(J,Q){let Z=A.map.defense.immune,Y=J.match(/\bImmune\b(.*?)(?=$|Resist|SR|Weakness|DR)/i)[1].trim();return await Z.parse(Y,Q)}async function PJ(J,Q){let Z=A.map.defense.weakness,Y=J.match(/\bWeakness(?:es)?\b(.*?)(?=$|\b(?:Resist|Immune|SR|Weakness|DR)\b)/i)[1].trim();return await Z.parse(Y,Q)}async function BJ(J,Q){let Z=A.map.defense.resist,Y=J.match(/\bResist\b(.*?)(?=$|\b(?:Immune|SR|Weakness|DR)\b)/i)[1].trim();return await Z.parse(Y,Q)}async function EJ(J,Q){let Z=A.map.defense.sr,Y=J.match(/\bSR\b(.*?)(?=$|\b(?:Immune|Resist|Weakness|DR)\b)/i)[1].trim();return await Z.parse(Y,Q)}async function NJ(J,Q,Z){let Y=A.map.defense.defensiveAbilities,H=Q.match(/Defensive Abilities\b\s*(.*?)(?=$|\b(?:Immune|Resist|Weakness|DR|SR)\b)/i)[1].replace(/\s*[,;]+/g,",").replace(/(,\s*$)/,"").trim(),[X,G]=await Y.parse(H,Z,"class-abilities",["buff","consumable","equipment","feat","loot","weapon"]);return J.notes.defense.defensiveAbilities=G,X}async function j$(J,Q,Z){window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING DESCRIPTION DATA"),J.notes.description={};let Y="";for(let X=0;X<Q.length;X++)try{let G=Q[X];switch(G.toLowerCase()){case"description":break;case"":Y=Y.concat(`
`);break;default:Y=Y.concat(G+`
`);break}}catch(G){window.SBC.settings.getSetting("debug")&&console.error(G);let W=`Parsing the description data failed at line ${Z+X+1}`,z=new I(I.ERRORLEVELS.WARNING,"Parse/Description",W,X+Z);return J.errors.push(z),J.input.prepared.success=!1,window.SBC.settings.getSetting("debug")&&console.groupEnd(),!1}return J.notes.description.long=Y,await A.map.description.parse(Y,Z),_.log("RESULT OF PARSING DESCRIPTION DATA (TRUE = PARSED SUCCESSFULLY)"),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}async function L$(J,Q,Z){window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING ECOLOGY DATA");let Y=[];J.notes.ecology={hasEcology:!0};for(let H=0;H<Q.length;H++)try{let X=Q[H],G=A.map.ecology;if(!Y.environment&&X.match(/Environment/i))Y.environment=await MJ(G,J,X,Z+H);if(!Y.organization&&X.match(/Organization/i))Y.organization=await RJ(G,J,X,Z+H);if(!Y.treasure&&X.match(/Treasure/i))Y.treasure=await vJ(G,J,X,Z+H)}catch(X){window.SBC.settings.getSetting("debug")&&console.error(X);let G=`Parsing the ecology data failed at line ${Z+H+1} (non-critical)`,W=new I(I.ERRORLEVELS.WARNING,"Parse/Ecology",G,H+Z);throw J.errors.push(W),window.SBC.settings.getSetting("debug")&&console.groupEnd(),X}return _.log("RESULT OF PARSING ECOLOGY DATA (TRUE = PARSED SUCCESSFULLY)"),_.log(Y),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}async function MJ(J,Q,Z,Y){let H={name:"Environment",entry:Z.match(/^(?:Environment)([\s\S]*?)(?=$|Organization|Treasure)/i)[1]};return Q.notes.ecology.environment=H.entry,await J.parse(H,Y)}async function RJ(J,Q,Z,Y){let H={name:"Organization",entry:Z.match(/(?:Organization)([\s\S]*?)(?=$|Treasure)/i)[1]};return Q.notes.ecology.organization=H.entry,await J.parse(H,Y)}async function vJ(J,Q,Z,Y){let H={name:"Treasure",entry:Z.match(/(?:Treasure)([\s\S]*?)$/i)[1]};if(Z.match(/(NPC Gear)/i)){let G=Z.match(/(?:NPC Gear\s*\()([^)]*)/gi)[0].replace(/NPC Gear\s*\(/i,"");Q.treasureParsing.treasureToParse=G,Q.treasureParsing.lineToRemove=Y;let W=`
        This is treasure and will not be included as items in the actor. If you want to parse these as real items, press here:<br/>
        <input type="button" id="parseTreasureAsGearButton" value="Parse Treasure as Gear"></input>`,z=new I(I.ERRORLEVELS.WARNING,"Parse/Ecology",W,Y);Q.errors.push(z)}return Q.notes.ecology.treasure=H.entry,await J.parse(H,Y)}var L0={},_0=0,Z0=0,E0={0:"primary",1:"secondary",2:"tertiary",3:"spelllike",4:"quinary",5:"senary",6:"septenary",7:"octonary"},j0=[],L1=[];async function P$(J,Q,Z){L0={},_0=0,Z0=0,j0=[],L1=[],window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING OFFENSE DATA");let Y=[];J.notes.offense={speed:[],spellBooks:[]};let H={text:"",line:0},X={text:"",line:0},G=Q.some((z)=>/^Special\s+Attacks\b\s*/i.test(z)),W={text:"",line:0};for(let z=0;z<Q.length;z++)try{let K=Q[z];if(/^Spe{0,2}d\s*/i.test(K)){if(!Y.landSpeed&&/^Spe{0,2}d\s*\d+/i.test(K))Y.landSpeed=await f0(K,"land","^Spe{0,2}d",z+Z);else Y.landSpeed=await f0("Speed 0 ft.","land","^Spe{0,2}d",z+Z);if(!Y.swimSpeed&&K.match(/\bSwim\s*/i))Y.swimSpeed=await f0(K,"swim","\\bSwim",z+Z);if(!Y.climbSpeed&&K.match(/\bClimb\s*/i))Y.climbSpeed=await f0(K,"climb","\\bClimb",z+Z);if(!Y.burrowSpeed&&K.match(/\bBurrow\s*/i))Y.burrowSpeed=await f0(K,"burrow","\\bBurrow",z+Z);if(!Y.flySpeed&&K.match(/\bFly\s*/i))Y.flySpeed=await f0(K,"fly","\\bFly",z+Z)}if(!Y.melee&&K.match(/^Melee\s*/i)){if(H=await O$(K,"Melee",Q[z+1],z+Z),J.notes.offense.melee=H.text,!G)await j1(J),Y.melee=await F1(H,"mwak")}if(!Y.ranged&&K.match(/^Ranged\s*/i)){if(X=await O$(K,"Ranged",Q[z+1],z+Z),J.notes.offense.ranged=X.text,!G)await j1(J),Y.ranged=await F1(X,"rwak")}if(!Y.specialAttacks&&K.match(/^Special\s+Attacks\b\s*/i))W.text=K,W.line=z+Z;if(!Y.spaceStature){if(/^Space\b.*\bReach\b/i.test(K)){let q=A.map.offense.stature,[j,F]=await xJ(K,z+Z),[L,E]=await SJ(K);J.notes.offense.space=pf1.utils.convertDistance(+F).join(" "),J.notes.offense.reach=pf1.utils.convertDistance(+L).join(" "),J.notes.offense.reachContext=_.convertStringUnits(E);let O=+L<+F?"long":"tall";Y.spaceReach={space:j,stature:await q.parse(O,z+Z)}}}if(!Y.spellLikeAbilities&&K.match(/Spell-Like\s+Abilities\b\s*/i))D1(J,K,z,!0,!1),_.log(`Spell-Like Abilities found: ${Z0}, ${j0[Z0]}`);if(!Y.psychicMagic&&K.match(/^Psychic\s+Magic\b\s*/i))D1(J,K,z,!1,!0),L0[_0].spells.push(Q[z+1]),z++;if(!Y.spellBooks&&/(?:Spells|Extracts) (?:Prepared|Known)\b\s*/i.test(K))D1(J,K,z,!1,!1),_.log(`Spellbook ${Z0}, ${j0[Z0]}`);if(_0!==0&&Z0<=_0&&+z>+j0[Z0]){if(/Spell-Like|Spells|Extracts (?:Prepared|Known)|Psychic Magic/gi.test(K)===!1)L0[Z0].spells.push(K)}if(z==Q.length-1){let q=window.SBC,j=0,F={};if(await _.runParallelOps(Object.values(L0),async(L,E)=>{let O=new X0(q.app);_.log(`Spellbook ${E} Processing: ${L.spellBookType}`,L);let[B,N,P]=await O.parse(L,j0[E]);if(P)F[N]=E0[j],j++;_.log(`Spellbook ${E} Results: ${B} - ${N} - ${P}`)}),j>0){let L={},E=window.SBC.actor.system.attributes.spells.spellbooks,O=new Set(Object.keys(E)),B=[],N=window.SBC.actor.itemTypes.spell;for(let[P,M]of Object.entries(F)){if(M===P){O.delete(M);continue}L[M]=pf1.utils.deepClone(E[P]),N.filter((R)=>R.system.spellbook===P).forEach((R)=>{B.push({_id:R._id,"system.spellbook":M})}),J.characterData.conversionValidation.spellBooks[M]=pf1.utils.deepClone(J.characterData.conversionValidation.spellBooks[P]),delete J.characterData.conversionValidation.spellBooks[P],O.delete(M)}O.forEach((P)=>{L[P]=X0.getDefaultSpellbookData()}),await window.SBC.actor.update({"system.attributes.spells.spellbooks":L}),await window.SBC.actor.updateEmbeddedDocuments("Item",B)}if(!G)await j1(J);else Y.specialAttacks=await UJ(J,W.text,W.line),await j1(J),Y.melee=await F1(H,"mwak"),Y.ranged=await F1(X,"rwak")}}catch(K){window.SBC.settings.getSetting("debug")&&console.error(K);let q=`Parsing the offense data failed at line ${Z+z+1}`,j=new I(I.ERRORLEVELS.ERROR,"Parse/Offense",q,z+Z);return J.errors.push(j),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!1}return _.log("RESULT OF PARSING OFFENSE DATA (TRUE = PARSED SUCCESSFULLY)"),_.log(Y),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}async function f0(J,Q,Z,Y){let H=A.map.offense.speed,X=new RegExp(`${Z}\\s*($|[^,]*)`,"i"),G=J.match(X)[1].trim();return await H.parse(G,Y,Q)}function O$(J,Q,Z,Y){let H=new RegExp(`^${Q}\\s*(.*)`,"i"),X=J.match(H)[1].trim();if(X.match(/(or|and)$/i))X+=" "+Z.trim();return{text:X,line:Y}}async function F1(J,Q){return await A.map.offense.attacks.parse(J.text,J.line,Q)}async function UJ(J,Q,Z){let Y=A.map.offense.specialAttacks,H=Q.match(/^Special\s+Attacks?\s*(.*)/i)[1].trim(),[X,G]=await Y.parse(H,Z,["special-attacks","class-abilities"],["feat"],["classFeat"],!1);return J.notes.offense.specialAttacks=G,X}async function xJ(J,Q){let Z=A.map.offense.space,Y=J.match(/^Space\s*(\S+)\s+/i)[1];Y=Y.replace(/(.)-(.)/g,"$1.$2");let H=Y.match(/(\d*)\.+(\d*)\/+(\d*)/);if(H?.length>0)Y=+H[1]+H[2]/H[3];let X=Math.round(Y/0.5)*0.5/5,G=await Z.parse(X,Q);return Promise.resolve([G,Y])}async function SJ(J){let Q=_.parseSubtext(J.match(/Reach(.*)/i)[1]),Z="",Y="";if(Q[0]){Z=Q[0],Z=Z.replace(/(.)-(.)/g,"$1.$2");let H=Z.match(/(\d*)\.+(\d*)\/+(\d*)/);if(H?.length>1)Z=+H[1]+H[2]/H[3];Z=Z.replace(/(\d+\.?\d*)(.*)/g,"$1")}if(Q[1])Y=Q[1].replace(/[()]/g,"").trim();return Promise.resolve([Z,Y])}function wJ(J){return J.match(/\bCL\b\s*(?<cl>\d+)/i)?.groups.cl??0}function fJ(J){return J.match(/\b(Concentration\b|Conc\.)\s*\+(?<bonus>\d+)/i)?.groups?.bonus}function D1(J,Q,Z,Y,H){let X="_hd",G="prepared",W="spelllike",z=null,K=!1;if(!Y&&!H){G=Q.match(/Prepared/i)?"prepared":"spontaneous",X="hd",K=!!Q.match(/Extracts/i),W=null;let F=R0(!1).exec(Q)?.groups?.class;if(F){if(X=F,!window.SBC.actor.itemTypes.class.find((E)=>E.name.match(new RegExp(F,"i"))))X="hd",z=`${F} ${_.translate("spellbookName.spells"+(G==="prepared"?"Prepared":"Known"))}`}else{let L=window.SBC.actor.itemTypes.class.find((E)=>E.system.casting&&E.system.casting.type===G);X=L?L.name:"hd"}Z0=_0,_0++,_.log(`Current Spellbook: ${Z0}, Spellbooks found: ${_0}`),W=E0[Z0]}else if(H)Z0=_0,_0++,G="points",W=E0[Z0];else Z0=_0,_0++,W=E0[Z0];let q=wJ(Q),j=fJ(Q)??q;if(L1.includes(W)){let F=IJ();L0[F]=duplicate(L0[Z0]),L0[F].spellBookType=E0[F],j0[F]=j0[Z0]}L0[Z0]={firstLine:Q,spells:[],spellCastingType:G,spellCastingClass:X,casterLevel:q,concentrationBonus:j,spellBookType:W,isSpellLike:Y,isAlchemist:K,spellBookName:z},j0[Z0]=Z,L1.push(W),console.log(`Current Spellbook: ${Z0}, Spellbooks found: ${_0}`)}async function j1(J){let Q=window.SBC.actor.itemTypes.feat.filter((Y)=>Y.system.subType==="classFeat"),Z=Object.values(window.SBC.config.weaponGroups);for(let Y of Q){let H=_.parseSubtext(Y.name.toLowerCase());H.shift();for(let X of H){let G=Z.find((W)=>X.includes(W));if(G){let W=parseInt(X.match(/\+(\d+)/)?.[1]??0);_.log(`Found Group ${G}, Found Bonus ${W}`);let z=Object.keys(window.SBC.config.weaponGroups)[Z.indexOf(G)];if(G&&W>0&&!Object.keys(J.characterData.weaponGroups).includes(z))J.characterData.weaponGroups[z]=W}}}_.log("Weapon Groups",J.characterData.weaponGroups)}function IJ(){return parseInt(Object.keys(E0).find((J)=>!L1.includes(E0[J])))}async function B$(J,Q,Z){window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING SPECIAL ABILITY DATA");let Y=[],H=0;J.notes.specialAbilities=[];let X=A.map.specialAbilities;for(let G=1;G<Q.length;G++)try{let W=Q[G],z=`specialAbility-${H}`;if(!Y[z])Y[z]=await X.parse(W,Z+G),H+=+!!Y[z]}catch(W){window.SBC.settings.getSetting("debug")&&console.error(W);let z=`Parsing the special abilities failed at line ${Z+G+1} (non-critical)`,K=new I(I.ERRORLEVELS.WARNING,"Parse/Special Abilities",z,G+Z);return J.errors.push(K),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!1}return _.log("RESULT OF PARSING SPECIAL ABILITY DATA (TRUE = PARSED SUCCESSFULLY)"),_.log(Y),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}var y1=!1,E$=!1,O1="",d1=-1;async function N$(J,Q,Z){window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING STATISTICS DATA");let Y=[];J.notes.statistics={},J.treasureParsing.statisticsStartLine=Z;let H=[],X=0,G="",W=0;y1=!1,E$=Q.some((z)=>/\b((?:Combat |Other |^)Gear)\b/i.test(z)),O1="",d1=-1;for(let z of["consumable","equipment","loot","weapon","container"])await Promise.all(window.SBC.actor.itemTypes[z]?.map(async(K)=>await K.delete()));for(let z=0;z<Q.length;z++)try{let K=Q[z];if(!Y.bab&&K.match(/^Base Atk\b/i)){let q=K.match(/Base Atk\b\s*([+-]?\d+)/gi)[0].replace(/Base Atk\b\s*/i,"");J.characterData.conversionValidation.attributes.bab=+q}if(!Y.cmb&&K.match(/\bCMB\b/i))Y.cmb=await TJ(J,K,Z+z);if(!Y.cmd&&K.match(/\bCMD\b/i))Y.cmd=await CJ(J,K,Z+z);if(!Y.feats&&K.match(/^Feats\b/i))Y.feats=await AJ(J,K,Z+z);if(!Y.languages&&K.match(/^Languages\b/i))Y.languages=await hJ(J,K,Z+z);if(/((?:Combat |Other |^)Gear)\b/i.test(K))Y.gear=await DJ(J,K,Z+z),y1=!0;if(!Y.abilities){if(/(Str|Dex|Con|Int|Wis|Cha)\s*(\d+|-)/i.test(K)&&!H.length)H=K.match(/((Str|Dex|Con|Int|Wis|Cha)\s*(\d+|-))/gi),X=z;if(dJ(z,Q.length)&&H.length>0){for(let q=0;q<H.length;q++)await yJ(H[q],J,X);Y.abilities=!0}}if(!Y.skills){if(K.match(/^Skills\b/i))O1=K.match(/Skills\b\s*(.*)/i)[1].replace(/\s*[,;]+/g,",").trim(),d1=Z+z,Y.skills=!0}if(!Y.sq){if(K.match(/^SQ\b/i))G=K,W=z;if(G&&Y.abilities)Y.sq=await gJ(J,G,Z+W)}}catch(K){window.SBC.settings.getSetting("debug")&&console.error(K);let q="Parsing the statistics data failed at the highlighted line",j=new I(I.ERRORLEVELS.ERROR,"Parse/Statistics",q,Z+z+1);return J.errors.push(j),J.input.prepared.success=!1,window.SBC.settings.getSetting("debug")&&console.groupEnd(),!1}return _.log("RESULT OF PARSING STATISTICS DATA (TRUE = PARSED SUCCESSFULLY)"),_.log(Y),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}async function TJ(J,Q,Z){let Y=A.map.statistics.cmb,H=Q.match(/CMB\s+([+-]?(\d+)?\s*(\(.*\))?;?)/i)[1].trim().replace(";",""),X=H.match(/^([+-](\d+)?)/)?.[0]??null;J.flags.hasNoCMB=!X,X=X??0;let G=_.parseSubtext(H)[1];if(!J.flags.hasNoCMB)J.characterData.conversionValidation.attributes.cmb=+X;if(G){let W=G,z,K=/\+?(-?\d+)/g;while((z=K.exec(G))!==null){let q=+z[1],j=_.prefixNumber(q-+X),F=z[0].length;G=G.substring(0,z.index)+j+G.substring(z.index+F),K.lastIndex+=j.length}J.notes.statistics.cmbContext=" ("+W+")",J.miscNotes.cmbNotes=G??""}return await Y.parse(+X,Z)}async function CJ(J,Q,Z){let Y=A.map.statistics.cmd,H=Q.match(/CMD\s+([+-]?(\d+)?\s*(\(.*\))?;?)/i)[1].trim().replace(";",""),X=H.match(/^[+-]?(\d+)?/)?.[0]??null;J.flags.hasNoCMD=!X,X=X??0;let G=_.parseSubtext(H)[1];if(!J.flags.hasNoCMD)J.characterData.conversionValidation.attributes.cmd=+X;if(G){let W=G,z,K=/\+?(-?\d+)/g;while((z=K.exec(G))!==null){let q=+z[1],j=_.prefixNumber(q-+X),F=z[0].length;G=G.substring(0,z.index)+j+G.substring(z.index+F),K.lastIndex+=j.length}J.notes.statistics.cmdContext=" ("+W+")",J.miscNotes.cmdNotes=G??""}return await Y.parse(+X,Z)}async function AJ(J,Q,Z){let Y=window.SBC,H=A.map.statistics.feats,X=Q.match(/Feats\b\s*(.*)/i)[1].replace(/\s*[,;]+/g,",").trim(),[G,W]=await H.parse(X,Z,"feats","feat","feat");if(J.notes.statistics.feats=W,!Y.settings.getSetting("createAssociations")){let z=Y.compendiumSearch;if(Y.actor.getFeatCount().excess>0){let q={search:_.createSearchSet(["Bonus Feat","Bonus Feats","Bonus Combat Feats"],!0),item:"Bonus Feats"},j=await z.findEntityInCompendia(q,{itemType:"feat",itemSubType:"classFeat",classes:J.characterData.classes,race:J.characterData.race});if(j)await _.addAssociatedClass(j,Y.actor.itemTypes.class),await D(j)}}return await bJ(J),G}async function hJ(J,Q,Z){let Y=A.map.statistics.languages,H=Q.match(/Languages\b\s*(.*)/i)[1].replace(/\s*[,;]+/g,",").trim();return await Y.parse(H,Z)}async function gJ(J,Q,Z){let Y=A.map.statistics.sq,H=Q.match(/SQ\b\s*(.*)/i)[1].replace(/\s*[,;]+\s*/g,", ").trim(),[X,G]=await Y.parse(H,Z,["monster-abilities","class-abilities"],["equipment","feat","weapon"],null,!1);return J.notes.statistics.sq=G,X}async function DJ(J,Q,Z){let Y=A.map.statistics.gear,H=Q.replace(/(Combat Gear|Other Gear|Gear)/g,"").replace(/[,;]+/g,",").replace(/[,;]$/,"").trim();if(!J.notes.statistics.gear)J.notes.statistics.gear=[];return await Y.parse(H,Z)}async function yJ(J,Q,Z){let Y=J.match(/(\w+)/)[1],H=J.match(/(\d+|-)/)[1];if(H==="-"||H===0||H==="0"){H=0;let K="no"+Y.capitalize();Q.flags[K]=!0}let X=await _.getTotalFromChanges(window.SBC.actor,Y),G=A.map.base.age.getAbilityChange(Y.toLowerCase()),W=+H-X-G;Q.characterData.conversionValidation.attributes[Y]=+H,Q.notes.statistics[Y.toLowerCase()]=+H,await A.map.statistics[Y.toLowerCase()].parse(+W,Z)}function dJ(J,Q){if(!E$)return!0;return y1||J===Q-1}async function bJ(J){let Q=window.SBC.actor.itemTypes.feat.filter((Z)=>Z.system.subType==="feat");for(let Z of Q){let Y=Z.name.toLowerCase(),H=_.parseSubtext(Y)[1];if(!H)continue;if(/greater weapon focus/.test(Y))J.characterData.weaponFocusGreater.push(H);else if(/weapon focus/.test(Y))J.characterData.weaponFocus.push(H);else if(/greater weapon specialization/.test(Y))J.characterData.weaponSpecializationGreater.push(H);else if(/weapon specialization/.test(Y))J.characterData.weaponSpecialization.push(H)}_.log("Weapon Focus",J.characterData.weaponFocus),_.log("Weapon Focus Greater",J.characterData.weaponFocusGreater),_.log("Weapon Specialization",J.characterData.weaponSpecialization),_.log("Weapon Specialization Greater",J.characterData.weaponSpecializationGreater)}async function M$(){let J={act:["blf","dis"],comedy:["blf","int"],dance:["acr","fly"],keyboard:["dip","int"],oratory:["blf","sen"],percussion:["han","int"],sing:["blf","sen"],string:["blf","dip"],wind:["dip","han"]},Q=window.SBC,Z=A.map.statistics.skills,Y=O1.split(/racial (?:modifiers?|bonus)/i)[0];Y=Z.splitText(Y);for(let X of Q.actor.itemTypes.feat.filter((G)=>G.system.subType==="classFeat"&&G.name.match(/Versatile Performance \(/i))){let G=_.parseSubtext(X.name)[1],W=J[G.toLowerCase()],z=Y.find((K)=>K.startsWith(`Perform (${G.toLowerCase()}`));if(W&&z){let K=z.match(/([+-]?\d+)/)[1];for(let q of W){let j=Q.actor.getSkillInfo(q).name,F=Y.find((L)=>L.startsWith(j));if(F)if(F.match(/([+-]?\d+)/)[1]===K)Z.versatilePerformanceSkillOverrides[q]={name:G.toLowerCase(),value:K};else if(Z.versatilePerformanceSkillDisablers[q])Z.versatilePerformanceSkillDisablers[q].push(G);else Z.versatilePerformanceSkillDisablers[q]=[G]}}}if(await Z.parse(O1,d1),Q.app.processData.characterData.isOutsider){let X=Q.actor.items.get(Q.app.processData.characterData.outsiderId);if(!X)return;let G={};Q.app.processData.characterData.outsiderSkills.forEach((W)=>G[`system.classSkills.${W}`]=!0),await X.update(G)}if(Q.app.processData.characterData.isExpert){let X=Q.actor.items.get(Q.app.processData.characterData.expertId);if(!X)return;let G={};Q.app.processData.characterData.expertSkills.forEach((W)=>G[`system.classSkills.${W}`]=!0),await X.update(G)}let H={};for(let X of Object.keys(Z.versatilePerformanceSkillDisablers))for(let G of Z.versatilePerformanceSkillDisablers[X]){let W=Q.actor.allSkills.find((z)=>Q.actor.getSkillInfo(z).name===G)?.replace("prf.","");if(W)H[`${W}_${X}`]=!0}if(Object.keys(H).length>0)await Q.actor.setFlag(Q.rollBonusOps.flagKey,"vp_disable_prf",H)}async function R$(J,Q,Z){window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | "+J.parsedCategories+"/"+J.foundCategories+" >> PARSING TACTICS DATA");let Y=[];J.notes.tactics={hasTactics:!0};let H=A.map.tactics;for(let X=0;X<Q.length;X++)try{let G=Q[X];if(!Y.beforeCombat&&G.match(/Before Combat/i)!==null)Y.beforeCombat=await kJ(H,J,G,Z+X);if(!Y.duringCombat&&G.match(/During Combat/i)!==null)Y.duringCombat=await mJ(H,J,G,Z+X);if(!Y.morale&&G.match(/^Morale/i)!==null)Y.morale=await uJ(H,J,G,Z+X);if(!Y.baseStatistics&&G.match(/^Base Statistics/i)!==null)Y.baseStatistics=await pJ(H,J,G,Z+X)}catch(G){window.SBC.settings.getSetting("debug")&&console.error(G);let W=`Parsing the tactics data failed at line ${Z+X+1} (non-critical)`,z=new I(I.ERRORLEVELS.WARNING,"Parse/Tactics",W,X+Z);return J.errors.push(z),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!1}return _.log("RESULT OF PARSING TACTICS DATA (TRUE = PARSED SUCCESSFULLY)"),_.log(Y),window.SBC.settings.getSetting("debug")&&console.groupEnd(),!0}async function kJ(J,Q,Z,Y){let H={name:"Before Combat",entry:Z.match(/^(?:Before Combat)([\s\S]*?)(?=$|During Combat|Morale|Base Statistics)/i)[1]};return Q.notes.tactics.beforeCombat=H.entry,await J.parse(H,Y)}async function mJ(J,Q,Z,Y){let H={name:"During Combat",entry:Z.match(/^(?:During Combat)([\s\S]*?)(?=$|Morale|Base Statistics)/i)[1]};return Q.notes.tactics.duringCombat=H.entry,await J.parse(H,Y)}async function uJ(J,Q,Z,Y){let H={name:"Morale",entry:Z.match(/^(?:Morale)([\s\S]*?)(?=$|Base Statistics)/i)[1]};return Q.notes.tactics.morale=H.entry,await J.parse(H,Y)}async function pJ(J,Q,Z,Y){let H={name:"Base Statistics",entry:Z.match(/^(?:Base Statistics)([\s\S]*?)$/i)[1]};return Q.notes.tactics.baseStatistics=H.entry,await J.parse(H,Y)}class G0{static async prepareInput(J){let Q=window.SBC;if(Q.isImporting=!0,window.SBC.settings.getSetting("debug")&&console.group("sbc-pf1 | PREPARING INPUT"),J.input.text==="")throw J.errors.push(new I(I.ERRORLEVELS.FATAL,"Prepare","Given input is empty.")),"Given input is empty.";try{if(game.modules.get("roll-bonuses-pf1")?.active)_.log("Roll Bonuses PF1 module is active"),J.flags.rollBonusesPF1=!0;$("#sbcProgressBar").css("width","5%");let Z=new RegExp("("+Q.config.sources.join("\\b|")+")","gm");J.input.prepared.data=J.input.text.replace(/[–—−]/gm,"-").replaceAll("×","x").replace(/,+/gm,",").replaceAll("½","1/2").replaceAll("⅓","1/3").replaceAll("¼","1/4").replaceAll("⅕","1/5").replaceAll("⅙","1/6").replaceAll("⅛","1/8").replace(Z,"").replace(/([a-z])B\b/gm,"$1").replace(/([a-z])M\b,\s*MA/gm,"$1M").replaceAll("“",'"').replaceAll("”",'"').replaceAll("‘","'").replaceAll("’","'").replaceAll("ﬂ","fl").replaceAll("ﬁ","fi").replaceAll("ﬀ","ff").replaceAll("ﬃ","ffi").replaceAll("ﬄ","ffl").replaceAll("ﬆ","st").replace(/^-{20}$/gm,"").replace(/\*, (D,?)/g,"$1").split(/\n/g),_.log("Before: ",J.input.prepared.data);let Y=[],H=new RegExp("^("+Q.config.lineCategories.join("|")+")","i"),X=new RegExp("^("+Q.config.lineStarts.join("|")+")(?!\\))","i");J.input.prepared.data.forEach((W,z)=>{if(H.test(W)){if(W.match(/Offenses|Defenses/i))W=W.replace("Offenses","Offense").replace("Defenses","Defense");console.log(W,H),W=W.toLowerCase().capitalize()}if(W&&Q.config.lineStarts.some((K)=>W.startsWith(K)))Y.push(W);else if(z>0&&X.test(Y[Y.length-1])&&!X.test(W)&&!/^Description/i.test(Y[Y.length-1]))Y[Y.length-1]+=" "+W;else Y.push(W)});let G=0;for(let W=0;W<Y.length;W++){let z=Y[W];if(z.toLowerCase().startsWith("ecology")){G=W;continue}if(G&&z.toLowerCase().match(/^Treasure\s+(?:NPC gear|standard|double|triple)\s*\(.*\)/i)){let K="Gear "+z.replace(/^Treasure\s+(?:NPC gear|standard|double|triple)\s*\((.*?)(?:,\s+other treasure)?\)\s*$/i,"$1").replaceAll("[","(").replaceAll("]",")");Y.splice(W,1),Y.splice(G,0,K);break}}Y=Y.filter((W)=>!W.startsWith("*")),J.input.prepared.data=Y,_.log("After: ",J.input.prepared.data),J.input.prepared.success=!0,J.input.text=J.input.prepared.data.join(`
`)}catch(Z){let Y=new I(I.ERRORLEVELS.FATAL,"Prepare",Z);throw J.errors.push(Y),J.input.prepared.success=!1,Z}window.SBC.settings.getSetting("debug")&&console.groupEnd()}static async parseInput(J){window.SBC.settings.getSetting("debug")&&console.group("sbc-pf1 | PARSING INPUT");let Q=J.characterData,Z=J.input.text;if(Q==null||!Z){if(Q==null)J.errors.push(new I(I.ERRORLEVELS.FATAL,"Input","No valid characterData found"));if(!J.input.text)J.errors.push(new I(I.ERRORLEVELS.FATAL,"Parse","Not enough input found to parse"));J.input.prepared.success=!1}if(J.input.prepared.success){let Y=window.SBC.actor.type;try{G0.updateProgressBar(J,"Preparation","Clean-up");let H=A.map.types[Y];console.log(H);let X={};for(let K=1;K<H.length;K++){let q=H[K],j=new RegExp("^\\b"+q+"\\b\\s*(?:\\r?\\n|$)","i");J.input.prepared.data.filter(function(F,L){if(j.test(F)&&X[q]==null)X[q]=L})}let G=Object.keys(X),W=G.join(", ").capitalize();G.unshift("base");let z={};if(J.foundCategories=G.length,console.log("Found Categories: ",G,G.length),G.length!==0){let K=A.getNeededCategories(Y);if(K.length?K.every((j)=>G.includes(j)):!0){let j={base:[],description:[]},F={base:0,description:0};if(["npc","character"].includes(Y))j=foundry.utils.mergeObject(j,{defense:[],offense:[],statistics:[],tactics:[],ecology:[],specialAbilities:[]}),F=foundry.utils.mergeObject(F,{defense:0,offense:0,statistics:0,tactics:0,ecology:0,specialAbilities:0});let L=0;for(let O=0;O<G.length;O++){let B=G[O],N=L;F[B]=N;let P=X[G[O+1]];if(O===G.length-1)j[B]=J.input.prepared.data.slice(N);else j[B]=J.input.prepared.data.slice(N,P);L=P}let E=G;if(["npc","character"].includes(Y)){if(E.splice(G.indexOf("statistics"),1),E.splice(1,0,"statistics"),G.includes("special abilities"))E.splice(G.indexOf("special abilities"),1),E.splice(0,0,"special abilities")}for(let O=0;O<E.length;O++){let B=E[O];G0.updateProgressBar(J,"Parsing",B,E.length,O+1),z[B]=await G0.parseCategories(J,B,j[B],F[B])}if(["npc","character"].includes(Y)){if(G0.updateProgressBar(J,"Buffs","Looking for Auras and Buffs"),await V$(),await oJ(),G0.updateProgressBar(J,"Flags","Checking if Special Flags were set"),await C1(J),await cJ(J),window.SBC.settings.getSetting("rollBonusesIntegration"))await window.SBC.rollBonusOps.processTargets(window.SBC.actor.allItems);await h1.conversionValidation(J)}G0.updateProgressBar(J,"Preview","Generating Preview"),await lJ(J),J.input.prepared.success=!0,G0.updateProgressBar(J,"Ready","Actor is ready")}else{let j=`Failed to find enough keywords to parse the input.<br>
                                        Found Keywords: ${W}<br>
                                        Needed Keywords: Defense, Offense, Statistics<br>
                                        Optional Keywords: Special Abilities, Ecology, Tactics, Description`,F=new I(I.ERRORLEVELS.FATAL,"Parse",j);J.errors.push(F),J.input.prepared.success=!1,G0.updateProgressBar(J,"Error","An Error occurred during parsing")}}else{console.log("No categories found");let K=`Failed to find any keywords to parse the input.<br>
                                        Needed Keywords: Defense, Offense, Statistics<br>
                                        Optional Keywords: Special Abilities, Ecology, Tactics, Description`,q=new I(I.ERRORLEVELS.FATAL,"Parse",K);J.errors.push(q),J.input.prepared.success=!1,G0.updateProgressBar(J,"Error","An Error occurred during parsing")}}catch(H){let X="parseInput() failed with an unspecified error. Sorry!",G=new I(I.ERRORLEVELS.FATAL,"Parse",X);throw J.errors.push(G),J.input.prepared.success=!1,G0.updateProgressBar(J,"Error","An Error occurred during parsing"),H}}else{let Y="parseInput() failed as the input could not be prepared successfully",H=new I(I.ERRORLEVELS.FATAL,"Parse",Y);J.errors.push(H),J.input.prepared.success=!1,G0.updateProgressBar(J,"Error","An Error occurred during parsing")}window.SBC.settings.getSetting("debug")&&console.groupEnd()}static async parseCategories(J,Q,Z,Y){switch(Q){case"base":await q$(J,Z,Y);break;case"defense":await F$(J,Z,Y);break;case"offense":await P$(J,Z,Y),window.SBC.settings.getSetting("debug")&&console.groupCollapsed("sbc-pf1 | >> PARSING SKILL DATA"),await M$(),window.SBC.settings.getSetting("debug")&&console.groupEnd();break;case"statistics":await N$(J,Z,Y);break;case"tactics":await R$(J,Z,Y);break;case"ecology":await L$(J,Z,Y);break;case"special abilities":await B$(J,Z,Y);break;case"description":await j$(J,Z,Y);break;default:J.errors.push(new I(I.ERRORLEVELS.ERROR,"Parse/Categories",`No Parser found for category: ${Q}`)),J.input.prepared.success=!1;return}J.parsedCategories++}static async updateProgressBar(J,Q="",Z="",Y=1,H=1){let X=0,G=Z,W=100/Y;switch(J.progressBar.class=Q.toLowerCase(),Q.toLowerCase()){case"preparation":X=10,G=Q+": "+Z;break;case"parsing":X=Math.floor(10+0.6*W*H),G=Q+": "+Z;break;case"buffs":X=90;break;case"flags":X=95;break;case"preview":X=99;break;case"actor":X=100;break;case"error":X=100;break;default:break}J.progressBar.width=X,J.progressBar.text=G,await window.SBC.app.render()}}var _$=(J)=>{return _.parseSubtext(J)},W$=async(J,Q,Z)=>{let Y=Q.split("."),H=J;for(let X=0;X<Y.length-1;X++)H=H[Y[X]]||{};H[Y[Y.length-1]]=Z},F0=async(J,Q,Z)=>{return J.update({[Q]:Z})};async function C1(J,Q="all"){_.log("Flags set during the conversion process"),_.log(J.flags);let Z=[],Y=Q==="all"?Object.keys(J.flags):[Q];for(let H of Y)if(J.flags[H]){let X=[],G=null,W="string",z=!1;switch(H){case"isUndead":if(X=["system.attributes.hpAbility","system.attributes.savingThrows.fort.ability"],J.flags[H]===!0)G="cha";else G="con";z=!0;break;case"noStr":X=["system.abilities.str.base","system.abilities.str.value","system.abilities.str.total"],z=!0,G="NaN";break;case"noDex":X=["system.abilities.dex.base","system.abilities.dex.value","system.abilities.dex.total"],z=!0,G="NaN";break;case"noCon":X=["system.abilities.con.base","system.abilities.con.value","system.abilities.con.total"],z=!0,G="NaN";break;case"noInt":X=["system.abilities.int.base","system.abilities.int.value","system.abilities.int.total"],z=!0,G="NaN";break;case"noWis":X=["system.abilities.wis.base","system.abilities.wis.value","system.abilities.wis.total"],z=!0,G="NaN";break;case"noCha":X=["system.abilities.cha.base","system.abilities.cha.value","system.abilities.cha.total"],z=!0,G="NaN";break;default:break}if(z){let K=window.SBC,q=new s(K.app,X,W);Z[H]=await q.parse(G,-1)}}}async function D(J){let Q=window.SBC;try{let Z=await pf1.migrations.migrateItemData(J.toObject());if(!foundry.utils.isEmpty(Z))await J.updateSource(Z);return await J.updateSource({"system.links.supplements":[]}),[!0,(await Q.actor.createEmbeddedDocuments("Item",[J.toObject()]))[0]]}catch(Z){window.SBC.settings.getSetting("debug")&&console.error(Z);let Y=`Failed to create embedded item ${J.name}.`,H=new I(I.ERRORLEVELS.ERROR,"Parse",Y);return Q.app.processData.errors.push(H),Q.app.processData.input.prepared.success=!1,[!1,null]}}async function oJ(){let J=window.SBC,Q=J.compendiumSearch;try{window.SBC.settings.getSetting("debug").debug&&console.groupCollapsed("sbc-pf1 | Finding Buffs");let Z=window.SBC.actor.items.filter((Y)=>["feat","consumable","spell"].includes(Y.type));for(let Y of Z){let H=Y.name,X=H.replace(/(constant|weekly|monthly|yearly):/gi,"").trim(),G=H.replace(/^(?:Potion|Wand) of\s+/gi,"").trim();console.log(`Checking ${H}`,Y);let W={search:new Set([H]),type:"buff",item:H},z=H.split(" ").slice(0,2).map((j)=>j.toLowerCase()),K=O0.find((j)=>{return j.split(" ").map((L)=>L.toLowerCase()).every((L)=>z.includes(L))});if(K)W.search.add(X.replace(new RegExp(`${K}`,"i"),"").trim()),W.search.add(G.replace(new RegExp(`${K}`,"i"),"").trim());else W.search.add(X),W.search.add(G);let q=await Q.findEntityInCompendia(W,{packs:["pf1.commonbuffs"],itemType:"buff",classes:J.app.processData.characterData.classes});if(!q)q=game.items.getName(W.name);if(!q)q=game.items.getName(W.altName);if(q){console.log(`Found ${H}.`,q);let j=0;switch(Y.type){case"spell":{let E=Y.system.spellbook;console.log(`Spellbook key for ${H}: ${E}`);let O=pf1.utils.deepClone(Y.spellbook);console.log(`Spellbook data for ${H}: `,O,O?.cl);let B=J.actor.system.attributes.spells.spellbooks[E]?.cl.total??-1;console.log(`Caster level for ${Y.name}: ${B}`)}break;case"consumable":j=Y.system.cl||0;break}if(j>0)q.updateSource({"system.level":j});console.log(`Creating buff for ${H}.`);let[F,L]=await D(q);if(/^Constant:/i.test(H))await L.update({"system.duration.value":""}),await L.setActive(!0)}}window.SBC.settings.getSetting("debug")&&console.groupEnd()}catch(Z){window.SBC.settings.getSetting("debug")&&console.error(Z)}}async function lJ(J){let Q="";if(game.version.startsWith("13"))Q=await foundry.applications.handlebars.renderTemplate("modules/pf1-statblock-converter/templates/sbcPreview.hbs",{actor:window.SBC.actor||{},notes:J.notes,flags:J.flags});else Q=await renderTemplate("modules/pf1-statblock-converter/templates/sbcPreview.hbs",{actor:window.SBC.actor||{},notes:J.notes,flags:J.flags});let Z=new Date,Y="";if(game.version.startsWith("13"))Y=await foundry.applications.handlebars.renderTemplate("modules/pf1-statblock-converter/templates/sbcNotes.hbs",{version:window.SBC.config.modData.version,date:Z.toLocaleString(game.settings?.get("core","language")||"en",{month:"long",day:"numeric",year:"numeric"}),preview:Q,rawInput:J.input.text});else Y=await renderTemplate("modules/pf1-statblock-converter/templates/sbcNotes.hbs",{version:window.SBC.config.modData.version,date:Z.toLocaleString(game.settings?.get("core","language")||"en",{month:"long",day:"numeric",year:"numeric"}),preview:Q,rawInput:J.input.text});await window.SBC.actor?.update({"system.details.notes.value":Y})}async function cJ(J){let Q=J.miscNotes,Z=window.SBC.actor,Y=[],H=[],X=`<p>This feature was created by <strong>SBC</strong> to collect any notes that don't have a source on the actor,
                such as saving throw details or a bonus to CMD from extra legs. It may also be used to record a natural armor bonus,
                spell resistance bonus, or spellcasting notes.</p>`,G=!1;if(Q.acNotes.length>0)G=!0,Y.push({target:"ac",text:Q.acNotes.join(", ")}),X+=`<p><strong>Armor Class Notes:</strong></p><p>${Q.acNotes.join(", ")}</p>`;if(Q.srNotes)G=!0,Y.push({target:"sr",text:Q.srNotes}),X+=`<p><strong>Spell Resistance Notes:</strong></p><p>${Q.srNotes}</p>`;if(Q.cmbNotes)G=!0,Y.push({target:"cmb",text:Q.cmbNotes}),X+=`<p><strong>CMB Notes:</strong></p><p>${Q.cmbNotes}</p>`;if(Q.cmdNotes)G=!0,Y.push({target:"cmd",text:Q.cmdNotes}),X+=`<p><strong>CMD Notes:</strong></p><p>${Q.cmdNotes}</p>`;if(Q.saveNotes)G=!0,Y.push({target:"allSavingThrows",text:Q.saveNotes}),X+=`<p><strong>Saving Throw Notes:</strong></p><p>${Q.saveNotes}</p>`;if(Q.sr>0)G=!0,H.push(await new pf1.components.ItemChange({formula:Q.sr.toString(),type:"untyped",target:"spellResist",value:+Q.sr}).toObject());if(Q.naturalAC>0)G=!0,H.push((await new pf1.components.ItemChange({formula:Q.naturalAC.toString(),type:"untyped",target:"nac",value:+Q.naturalAC})).toObject());if(!G)return;await Z.createEmbeddedDocuments("Item",[{name:"Miscellaneous Notes",type:"feat",system:{changes:H,contextNotes:Y,description:{value:X},subType:"misc",tag:"miscellaneousNotes"},img:"systems/pf1/icons/skills/yellow_36.jpg"}])}class I0{static get defaultData(){return{actorReady:!1,appData:{},characterData:{conversionValidation:{context:{},attributes:{},skills:{},spellBooks:{}},weaponFocus:[],weaponSpecialization:[],weaponFocusGreater:[],weaponSpecializationGreater:[],classes:[],archetypes:[],race:null,weaponGroups:{},hdMaximized:!1,prestigeClassCasting:new Map,isOutsider:!1,outsiderId:null,outsiderSkillPicks:4,outsiderSkills:[],isExpert:!1,expertId:null,expertSkillPicks:10,expertSkills:[],versatilePerformances:[]},changes:{},errors:[],flags:{hasNoCMB:!1,hasNoCMD:!1,noStr:!1,noDex:!1,noCon:!1,noInt:!1,noWis:!1,noCha:!1,isUndead:!1,isConstruct:!1,hasWeaponFinesse:!1},foundCategories:0,parsedCategories:1,imported:!1,input:{data:[],text:"",html:"",prepared:{data:[],success:!1},parsedSuccess:!1},miscNotes:{acNotes:[],cmdNotes:"",saveNotes:"",sr:0,srNotes:"",naturalAC:0,spellbookNotes:[]},notes:{},treasureParsing:{treasureToParse:"",lineToRemove:0,statisticsStartLine:0},progressBar:{class:"",text:"",width:0}}}}var{ApplicationV2:iJ,HandlebarsApplicationMixin:rJ}=foundry.applications.api;class b1 extends rJ(iJ){constructor(J,Q){super(Q);if(this.autoConvert=window.SBC.settings.getSetting("autoConvert"),this.processData=foundry.utils.mergeObject(I0.defaultData,{appData:J}),J.statblock){this.processData.input.text=J.statblock;let Z=this;setTimeout(async()=>{if(this.autoConvert)await Z.checkInput(document.getElementById("sbcInput"))},window.SBC.settings.getSetting("inputDelay"))}}static DEFAULT_OPTIONS={uniqueId:"sbcModal",id:"sbcModal",classes:["sbcModal"],position:{width:1024,height:768},window:{title:"SBCPF1.sbcTitle",resizable:!0},dragDrop:[{dragSelector:"#sbcModal"}]};get title(){return game.i18n.localize("SBCPF1.sbcTitle")}static PARTS={div:{scrollable:[".sbcInput",".sbcHighlights",".sbcPreview"],template:"modules/pf1-statblock-converter/templates/sbcModal.hbs"}};async close(J){if(!this.processData.imported&&window.SBC.actor?.id)await game.actors.get(window.SBC.actor.id)?.delete();window.SBC.app=null,super.close(J)}async _preparePartContext(J,Q,Z){let Y=window.SBC,H=await super._preparePartContext(J,Q,Z);H=foundry.utils.mergeObject(H,{input:this.processData.input.text,actorType:Y.actorType,choices:{0:"NPC",1:"PC"},errors:[],errorHighlights:[],preview:"",progressBar:{class:this.processData.progressBar.class,ready:this.processData.input?.prepared?.success||!1,text:this.processData.progressBar.text,width:this.processData.progressBar.width},autoConvert:this.autoConvert,badLanguage:game.settings.get("core","language")!=="en"}),this.processData.input.prepared.data.forEach((z,K)=>{H.errorHighlights.push({value:z,messageBefore:"",messageAfter:"",line:K,marked:!1})});let X=0,G="",W=0;if(this.processData.errors.forEach((z,K)=>{let q=z.errorLabel;if(z.level===I.ERRORLEVELS.ERROR||z.level===I.ERRORLEVELS.FATAL)q+=` >> ${z.keyword} failed `;if(q+=` >> ${z.message}`,q!==G){if(X=K,G=q,z.line!==-1&&z.value){let j=this.processData.input.prepared.data[z.line],F=z.value.trim(),[L,E]=j.split(F);H.errorHighlights[z.line]={value:F,messageBefore:L,messageAfter:E,line:z.line,marked:!0}}H.errors.push({message:q,duplicates:W})}else H.errors[X].duplicates=W,W++}),H.progressBar.ready)if(game.version.startsWith("13"))H.preview=await foundry.applications.handlebars.renderTemplate("modules/pf1-statblock-converter/templates/sbcPreview.hbs",{actor:window.SBC.actor,notes:this.processData.notes,flags:this.processData.flags});else H.preview=await renderTemplate("modules/pf1-statblock-converter/templates/sbcPreview.hbs",{actor:window.SBC.actor,notes:this.processData.notes,flags:this.processData.flags},{async:!0});return H}async handleArtDrop(J){J.preventDefault(),console.debug("Got handleArtDrop event:"),console.debug(J);let Q=J.dataTransfer.files;console.debug("FileList is: "),console.debug(Q);let Z;if(!Q||Q.length===0){let Y=J.dataTransfer.getData("Text");if(!Y){this.element._onDrop(J);return}if(Y.includes("?"))Y=Y.substr(0,Y.indexOf("?"));let H=Y.split("/"),X=H[H.length-1];if(!X.includes(".")){console.log("SBC | Dragged non-file text:",Y),this.element._onDrop(J);return}let G=X.substr(X.lastIndexOf(".")+1);if(!Object.keys(CONST.IMAGE_FILE_EXTENSIONS).includes(G)){console.log("SBC | Dragged file with bad extension:",Y),this.element._onDrop(J);return}if(Y.includes("imgur")&&X.endsWith("_d.webp"))X=X.substr(0,X.length-7)+".png",Y=Y.substr(0,Y.length-7)+".png";Z={isExternalUrl:!0,url:Y,name:X}}else Z=Q[0];if(Z==null){console.log("SBC | No Files detected"),this.element._onDrop(J);return}console.debug("file is: "),console.debug(Z),await this.uploadFile(J,Z)}async uploadFile(J,Q){let Z=window.SBC,Y=Z.settings.getSetting("fileStorageSource"),H="";if(await foundry.applications.api.DialogV2.wait({window:{title:_.translate("dialog.artwork.title")},content:`<p>${_.translate("dialog.artwork.selectType")}</p>`,classes:[],buttons:[{action:"one",default:!0,icon:"",label:_.translate("dialog.artwork.actor"),callback:()=>H="actor"},{action:"two",icon:"",label:_.translate("dialog.artwork.token"),callback:()=>H="token"}],rejectClose:!1}),!H)return;if(Z.isImporting)return;let X;if(Q.isExternalUrl)X={path:Q.url};else X=await FilePicker.upload(Y,`${Z.targetFolder}/${H}`,Q,Y==="s3"?{bucket:Z.settings.getSetting("fileStorageBucket")}:{});Z[`${H}ArtPath`]=X.path,this.element.querySelector(`#sbc${_.capitalize(H)}ArtPath`).value=Z[`${H}ArtPath`]}_onRender(J,Q){super._onRender(J,Q);let Z=this.element.querySelector("#sbcInput"),Y=this.element.querySelectorAll(".actorTypeToggle"),H=this;for(let K=0;K<Y.length;K++)Y[K].addEventListener("click",this.toggleActorType.bind(this,Z));if(Z.addEventListener("keyup",nJ(async()=>{if(H.autoConvert)await H.checkInput(Z)},window.SBC.settings.getSetting("inputDelay"))),Z.addEventListener("scroll",this.syncScrolls.bind(this)),this.element.querySelector("#sbcAutoConvertToggle").addEventListener("click",async(K)=>{let q=K.target.checked;if(H.autoConvert=q,_.log(`Auto Convert is now ${q?"enabled":"disabled"}`),q)await H.checkInput(Z);else await H.render(!0)}),this.element.querySelector("#sbcConvertButton").addEventListener("click",async()=>{let K=document.getElementById("sbcInput");await H.checkInput(K)}),this.element.querySelector("#sbcImportButton").addEventListener("click",this.import.bind(this)),this.element.querySelector("#sbcResetButton").addEventListener("click",this.resetSBC.bind(this)),this.element.querySelector("#sbcActorArtButton").addEventListener("click",(K)=>this._onActorArtBrowse(K)),this.element.querySelector("#sbcTokenArtButton").addEventListener("click",(K)=>this._onTokenArtBrowse(K)),this.element.querySelectorAll("[data-tooltip-extended]").forEach((K)=>{K.addEventListener("pointerover",this._activateExtendedTooltip.bind(this))}),this.element.querySelectorAll("[data-tooltip-extended]").forEach((K)=>{K.addEventListener("pointerleave",()=>game.tooltip.deactivate())}),game.version.startsWith("13"))this.dragDrop=new foundry.applications.ux.DragDrop({dropSelector:".sbcContainer",callbacks:{drop:this.handleArtDrop.bind(this)}}).bind(this.element);else this.dragDrop=new DragDrop({dropSelector:".sbcContainer",callbacks:{drop:this.handleArtDrop.bind(this)}}).bind(this.element)}async _activateExtendedTooltip(J){let Q=J.currentTarget,Z=Q.dataset.tooltipExtended;if(!Z)return;let Y=window.SBC,H=Z==="actor"?Y.actorArtPath:Y.tokenArtPath,X=document.createElement("template");if(X.innerHTML=`<div class="flexcol sbcExtendedTooltipText">
        <h3>${game.i18n.localize(`SBCPF1.${Z}Art`)}</h3>
        </div>`,H){let G=H.split("/").pop().replace(/\.[^.]+$/,"");X.innerHTML+=`<div class="flexcol sbcExtendedTooltip">
      <p>${G}</p>
      <img src="${H}" alt="${game.i18n.localize(`SBCPF1.${Z}Art`)}" />
      </div>`}game.tooltip.activate(Q,{content:X.content,cssClass:"extended sbc",direction:Q.dataset.tooltipDirection||void 0})}_onActorArtBrowse(J){let Q=window.SBC;if(Q.isImporting)return;let Z=Q.settings.getSetting("actorArtFolder")||"";new FilePicker({type:"image",current:Z,callback:(H)=>Q.actorArtPath=H,top:this.position.top+40,left:this.position.left+10,button:J.currentTarget,field:this.element.querySelector("#sbcActorArtPath")}).browse()}_onTokenArtBrowse(J){let Q=window.SBC;if(Q.isImporting)return;let Z=Q.settings.getSetting("tokenArtFolder")||"";new FilePicker({type:"image",current:Z,callback:(H)=>Q.tokenArtPath=H,top:this.position.top+40,left:this.position.left+10,button:J.currentTarget,field:this.element.querySelector("#sbcTokenArtPath")}).browse()}syncScrolls(J){let Q=document.getElementById("sbcInput"),Z=document.getElementById("sbcBackdrop");Z.scrollTop=Q.scrollTop}async toggleActorType(J,Q){let Z=window.SBC.config;_.log(`Switching between ${Z.const.actorType[window.SBC.actorType]} and ${Z.const.actorType[+Q.target.value]} actor type.`),window.SBC.actorType=Q.target.value,window.SBC.configInitialized=!1,window.SBC.actor=await _.reinitActor(window.SBC.actor);let Y=this.processData.input.text,H=this.processData.appData;this.processData=foundry.utils.mergeObject(I0.defaultData,{appData:H}),this.processData.input.text=Y,J.value=Y,window.SBC.configInitialized=!0,J.dispatchEvent(new Event("keyup"))}async checkInput(J){if(!window.SBC.configInitialized)return;if(window.SBC.isImporting)return;let Q=this.processData.appData;if(this.processData=foundry.utils.mergeObject(I0.defaultData,{appData:Q}),this.processData.input.text=J.value.trim(),window.SBC.actor=await _.reinitActor(window.SBC.actor),this.processData.input.text){this.processData.actorReady=!1;try{await G0.prepareInput(this.processData)}catch(Z){console.error(Z)}try{await G0.parseInput(this.processData)}catch(Z){J.value=this.processData.input.prepared.data.join(`
`),window.SBC.isImporting=!1,await this.render()}if(J.value=this.processData.input.prepared.data.join(`
`),this.processData.input.prepared.success)window.SBC.isImporting=!1,this.processData.actorReady=!0,Hooks.callAll("sbc.inputParsed"),await this.render();else{window.SBC.isImporting=!1,console.error("Could not parse the input");let Z=new I(I.ERRORLEVELS.FATAL,"Parse","Could not parse the input");this.processData.errors.push(Z),await this.render()}}else await this.render()}async import(){let J=window.SBC;if(J.isImporting)return;if(console.log("Importing..."),_.log("Finished parsing. Importing..."),!this.processData.input.text){let Q=new I(I.ERRORLEVELS.FATAL,"Input","No Input found");this.processData.errors.push(Q)}else if(!this.processData.actorReady){let Q=new I(I.ERRORLEVELS.FATAL,"Import","Could not create an Actor");this.processData.errors.push(Q)}else{let Q=J.actor.toObject(),Z=await pf1.migrations.migrateActorData(Q,null,{actor:J.actor});if(Z.folder=J.folderId,Z[`flags.${J.config.modData.mod}.version`]=J.config.modData.version,J.uuidSource)Z[`flags.${J.config.modData.mod}.uuid`]=J.uuidSource;if(J.actorArtPath)Z.img=J.actorArtPath;if(J.tokenArtPath)Z["prototypeToken.texture.src"]=J.tokenArtPath;let Y=[];for(let H of Object.values(J.actor.itemTypes))Y=Y.concat(H.sort((X,G)=>X.name.localeCompare(G.name)).map((X,G)=>({_id:X.id,sort:112500+G*CONST.SORT_INTEGER_DENSITY})));await J.actor.updateEmbeddedDocuments("Item",Y),await J.actor.update(Z),await J.actor.performRest({restoreHealth:!1}),Hooks.callAll("sbc.actorImported",J.actor),this.processData.imported=!0,await this.close();return}this.render(!0)}async resetSBC(){let J=this.processData.appData;this.processData=foundry.utils.mergeObject(I0.defaultData,{appData:J}),window.SBC.actor=await _.reinitActor(window.SBC.actor),this.render(!0)}}function nJ(J,Q){let Z;return(...Y)=>{clearTimeout(Z),Z=setTimeout(function(){J.apply(this,Y)},Q)}}class _{static async createActor(){let J=await Actor.create({name:"sbc | Actor Template",type:window.SBC.config.const.actorType[window.SBC.actorType],folder:window.SBC.wipFolderId});return await this.setTokenData(J),J}static async reinitActor(J){if(J){if(game.actors.get(J.id))_.log(`Deleting actor ${J.name} with ID ${J.id}.`,void 0,"info"),await J.delete()}return await _.createActor()}static async setTokenData(J){let Q=J.type==="character"?"pc":"npc";return await J.update({prototypeToken:{displayName:window.SBC.settings.getSetting("displayName"),sight:{enabled:window.SBC.settings.getSetting(`${Q}sight`)},disposition:window.SBC.settings.getSetting("disposition"),displayBars:window.SBC.settings.getSetting("displayBars"),bar1:window.SBC.settings.getSetting("attributeBar1"),bar2:window.SBC.settings.getSetting("attributeBar2"),brightSight:0}})}static log(J,Q=null,Z="debug"){let Y=console[Z];if(Y==="debug"&&!window.SBC.settings.getSetting("debug"))return;let H=`
`+new Error().stack.split(`
`).slice(2,3).join(`
`);if(Q)Y("sbc-pf1 | "+J,Q,H);else Y("sbc-pf1 | "+J,H)}static async generatePlaceholderEntity(J,Q=-1){let Z={name:J.name?J.name:J.item?J.item:"undefined",type:J.type?J.type:null,changes:J.changes||[],creatureTypes:J.creatureTypes?J.creatureTypes:[],creatureSubtypes:J.creatureSubtypes?J.creatureSubtypes:[],img:J.img?J.img:"systems/pf1/icons/skills/yellow_36.jpg",size:J.size?J.size:"med",sources:J.sources?J.sources:[],subtext:J.subtext?J.subtext:null,currency:J.currency?J.currency:null,price:J.price||0,enhancement:J.enhancement?J.enhancement:null,mwk:J.mwk?J.mwk:null,quantity:J.quantity?J.quantity:null,wizardClass:J.wizardClass?J.wizardClass:null,suffix:J.suffix?J.suffix:null,archetype:J.archetype?J.archetype:null,level:J.level?J.level:null,specialAbilityType:J.specialAbilityType?J.specialAbilityType:"na",desc:J.desc?J.desc:"sbc | Placeholder"},Y=null;switch(J.type){case"container":Y=new Item.implementation({name:Z.name,type:"container",system:{description:{value:"sbc | All currency carried was put into this container."},currency:{pp:Z.currency.pp,gp:Z.currency.gp,sp:Z.currency.sp,cp:Z.currency.cp},weightReduction:100},img:"systems/pf1/icons/items/inventory/pouch-sealed.jpg"});break;case"feat":case"feats":Y=new Item.implementation({name:Z.name.capitalize(),type:"feat",system:{description:{value:"sbc | As "+Z.name+" could not be found in any compendium, a placeholder was generated."}},img:Z.img});break;case"race":Y=new Item.implementation({name:Z.name.capitalize(),type:"race",system:{creatureTypes:Z.creatureTypes,description:{value:Z.desc||"sbc | As no playable race was found a placeholder was generated."},size:Z.size,creatureSubtypes:Z.creatureSubtypes,sources:Z.sources},img:Z.img});break;case"misc":Y=new Item.implementation({name:Z.name.capitalize(),type:"feat",system:{abilityType:Z.specialAbilityType,description:{value:Z.desc},changes:Z.changes,subType:"misc"},img:Z.img});break;case"attack":Y=new Item.implementation({name:Z.name.capitalize(),type:"attack",system:{description:{value:Z.desc},subType:"misc"},img:Z.img});break;case"classFeat":case"class-abilities":if(Z.specialAbilityType!==null)Y=new Item.implementation({name:Z.name.capitalize(),type:"feat",system:{abilityType:Z.specialAbilityType,description:{value:Z.desc},subType:"classFeat"},img:Z.img});else Y=new Item.implementation({name:Z.name.capitalize(),type:"feat",system:{abilityType:"",description:{value:Z.desc},subType:"classFeat"},img:Z.img});break;case"domains":case"mysteries":case"oppositions":case"spirits":case"bloodlines":case"patrons":case"thassilonianSpecialist":case"inquisition":Y=new Item.implementation({name:Z.name.capitalize(),type:"feat",system:{description:{value:"sbc | As there is no dedicated field for "+Z.type+", this placeholder was created."},subType:"classFeat"},img:Z.img});break;case"loot":{Y=new Item.implementation({name:Z.quantity>1?this.singularize(Z.name):Z.name,type:Z.type,system:{quantity:Z.quantity,value:Z.value,price:Z.price,description:{value:"sbc | As "+Z.name+" could not be found in any compendium, a placeholder was generated."}},img:Z.img});break}default:Y=new Item.implementation({name:Z.name.capitalize(),type:Z.type,system:{description:{value:"sbc | As "+Z.name+" could not be found in any compendium, a placeholder was generated."}},img:Z.img});break}return Y}static cleanLine(J,Q){return Q.replace(J,"").trim()}static haystackSearch(J,Q){if(!Q)return null;J=J.sort((Z,Y)=>Y.length-Z.length),Q=Q.toLowerCase();for(let Z of J)if(Q.includes(Z.toLowerCase()))return Z;return null}static haystackRegexSearch(J,Q){if(!Q)return null;J=J.sort((Z,Y)=>Y.length-Z.length),Q=Q.toLowerCase();for(let Z of J)if(Q.match(new RegExp(Z,"i"))!==null)return console.log(Z),Z;return null}static haystackSearchAll(J,Q){if(!Q)return null;let Z=[];Q=Q.toLowerCase();for(let Y of J)if(Q.includes(Y.toLowerCase()))Z.push(Y);return Z}static parseSubtext(J){let Q=J.replace(/(^[,;.: ]*|[,;.: ]+$)/g,""),Z=Q.indexOf("("),Y=Q.indexOf(")");if(Y===-1)Q+=")",Y=Q.indexOf(")");if(Z>-1&&Y>Z){let H=Q.substring(0,Z).trim(),X=Q.substring(Z+1,Y).trim(),G=[];if(Y+1<Q.length){let W=Q.substring(Y+1).replace(/(^[,;.: ]*|[,;.: ]+$)/g,"").trim();G=this.parseSubtext(W)}if(!Array.isArray(G)||!G.length)return[H,X];else return[H,X,G]}else return[J]}static getKeyByValue(J,Q){return Object.keys(J).find((Z)=>J[Z].toLowerCase()===Q.toLowerCase())}static getModifier(J){return Math.floor((J-10)/2)}static getDiceAverage(J,Q=0.5){return(J+1)*Q}static async getTotalFromChanges(J,Q,Z=null){let Y=J.items.contents,H=0,X=J.getRollData();return await Promise.all(Y.map(async(G)=>{if(G.system.changes){let W=G.system.changes,z=G.getRollData(),K=W.find(function(q){if(q.target.toLowerCase()===Q.toLowerCase()&&(!Z||q.type===Z))return q});if(K){let q=null;if(/@class\.level/.test(K.formula))q=await Roll.fromTerms(Roll.parse(K.formula,z)).evaluate();else q=await Roll.fromTerms(Roll.parse(K.formula,X)).evaluate();H+=q?.total??+K.formula}}})),Promise.resolve(H)}static makeValueRollable(J){return J.replace(/(\d+d\d+)/g,"[[$1]]")}static camelize(J){if(!J)return J;return J.replace(/^([A-Z])|[\s-_]+(\w)/g,function(Q,Z,Y,H){if(Y)return Y.toUpperCase();return Z.toLowerCase()})}static translate(J,Q={}){return game.i18n.format(`SBCPF1.${J}`,Q)}static async runParallelOps(J,Q,Z=[]){if(Array.isArray(J)){let H=J.map(async(X,G)=>await Q(X,G,...Z));return await Promise.all(H)}let Y=Object.keys(J).map(async(H)=>await Q(J[H],H,...Z));return await Promise.all(Y)}static convertStringUnits(J){let Q=J.matchAll(/(\d+)-foot/g);for(let q of Q){let[j,F]=pf1.utils.convertDistance(+q[1]);J=J.replace(q[0],j+"-"+(F==="m"?"meter":"foot"))}let Z=J.matchAll(/(\d+)-mile/g);for(let q of Z){let[j,F]=pf1.utils.convertDistance(+q[1],"mi");J=J.replace(q[0],j+"-"+(F==="km"?"kilometer":"mile"))}let Y=J.matchAll(/(\d+) feet/g);for(let q of Y){let[j,F]=pf1.utils.convertDistance(+q[1]);J=J.replace(q[0],j+" "+(F==="m"?"meters":"feet"))}let H=J.matchAll(/(\d+) miles/g);for(let q of H){let[j,F]=pf1.utils.convertDistance(+q[1],"mi");J=J.replace(q[0],j+" "+(F==="km"?"kilometers":"miles"))}let X=J.matchAll(/(\d+) ft\./g);for(let q of X)J=J.replace(q[0],pf1.utils.convertDistance(+q[1]).join(" "));let G=J.matchAll(/(\d+) mi\b/g);for(let q of G)J=J.replace(q[0],pf1.utils.convertDistance(+q[1],"mi").join(" "));let W=pf1.utils.getWeightSystem(),z=J.matchAll(/(\d+) lbs?\./g);for(let q of z){let j=pf1.utils.convertWeight(+q[1]);J=J.replace(q[0],j+" "+(W==="metric"?"kg":j!==1?"lbs.":"lb."))}let K=J.matchAll(/(\d+) pounds?/g);for(let q of K){let j=pf1.utils.convertWeight(+q[1]);J=J.replace(q[0],pf1.utils.convertWeight(j)+" "+(W==="metric"?"kilogram":"pound")+(j!==1?"s":""))}return J}static singularize(J){return J.replace(/\(\d+\)/g,"").trim().replace(/ies$/,"y").replaceAll("doses of","dose of").replace(/s$/,"")}static capitalize(J){return(J||"").split(" ").map((Q)=>{if(["of","and","or","the","a","an"].includes(Q))return Q;if(Q.match(/^[^a-z]/i))return Q.charAt(0)+Q.charAt(1).toUpperCase()+Q.slice(2);return Q.charAt(0).toUpperCase()+Q.slice(1)}).join(" ")}static getMoneyFromString(J){let Q=Z$().exec(J);if(!Q[0])return null;let Z=Q.groups;return{pp:+(Z.pp||0),gp:+(Z.gp||0),sp:+(Z.sp||0),cp:+(Z.cp||0)}}static convertMoneyToGold(J){return+(J.pp||0)*10+ +(J.gp||0)+ +(J.sp||0)/10+ +(J.cp||0)/100}static getMagicAbility(J,Q){let Z=Q?`${Q} ${J}`:J;Z=Z.toLowerCase().replace(/[- ]/g,"");for(let Y in window.SBC.config.magicalAbilities.Abilities)if(Y.toLowerCase()===Z)return{name:Y,...window.SBC.config.magicalAbilities.Abilities[Y]};return null}static async processFormula(J,Q,Z=null){let Y=Q.getRollData(),H=Z?.getRollData(),X=null;if(/@class\.level/.test(J)&&H)X=await Roll.fromTerms(Roll.parse(J,H)).evaluate(),_.log(`Processing ${J} and got results: `,[X,H,Roll.parse(J,H)]);else X=await Roll.fromTerms(Roll.parse(J,Y)).evaluate(),_.log(`Processing ${J} and got results: `,[X,Y,Roll.parse(J,Y)]);return{formula:X?.formula??+J,total:X?.total??+J}}static async addAssociatedClass(J,Q){if(J.system.subType==="classFeat"&&J.system.associations.classes?.length>0){let Z=J.system.associations.classes.map((H)=>H.toLowerCase());Q=Q.map((H)=>H.system.tag);let Y=Z.find((H)=>Q.includes(H));if(Y)await J.updateSource({"system.class":Y})}}static stringSimilarity(J,Q){return 1-this.levenshteinDistance(J,Q)/Math.max(J.length,Q.length)}static levenshteinDistance(J,Q){if(J===Q)return 0;if(J.length>Q.length)[J,Q]=[Q,J];let Z=(T,S,h,w,p)=>{return T<S||h<S?T>h?h+1:T+1:w===p?S:S+1},[Y,H]=[J.length,Q.length];while(Y>0&&J.charCodeAt(Y-1)===Q.charCodeAt(H-1))Y--,H--;let X=0;while(X<Y&&J.charCodeAt(X)===Q.charCodeAt(X))X++;if(Y-=X,H-=X,Y===0||H<3)return H;let G=0,W,z,K,q,j,F,L,E,O,B,N,P,M=[];for(W=0;W<Y;W++)M.push(W+1),M.push(J.charCodeAt(X+W));let R=M.length-1;for(;G<H-3;){O=Q.charCodeAt(X+(z=G)),B=Q.charCodeAt(X+(K=G+1)),N=Q.charCodeAt(X+(q=G+2)),P=Q.charCodeAt(X+(j=G+3)),F=G+=4;for(W=0;W<R;W+=2)L=M[W],E=M[W+1],z=Z(L,z,K,O,E),K=Z(z,K,q,B,E),q=Z(K,q,j,N,E),F=Z(q,j,F,P,E),M[W]=F,j=q,q=K,K=z,z=L}for(;G<H;){O=Q.charCodeAt(X+(z=G)),F=++G;for(W=0;W<R;W+=2)L=M[W],M[W]=F=Z(L,z,F,O,M[W+1]),z=L}return F}static checkForDuplicateItem(J,Q,Z,Y,H){let X=[];if(!Q||Q==="all")X=J.allItems;else X=J.itemTypes[Q];if(Z)X=X.filter((W)=>W.system.subType===Z);let G=new RegExp(`(^${J0(Y.toLowerCase())})`,"i");return X.find((W)=>G.test(W.name.toLowerCase())||W.system.tag&&H.system.tag&&W.system.tag===H.system.tag||pf1.utils.createTag(W.name)===pf1.utils.createTag(H.name))}static prefixNumber(J){return("+"+J).replace(/\+([-+])/g,"$1")}static async openSBCDialog(J=null,Q=null){let Z=window.SBC;if(Z.uuidSource=Q,!Z.configInitialized)return;if(await _.initializeSBC(),!Z.app)_.log(_.translate("log.inputDialogDoesNotYetExist")),Z.actor=await _.createActor(),Z.app=new b1({folderId:Z.folderId,wipFolderId:Z.wipFolderId,statblock:J}),A.initMapping(Z.app);_.log(_.translate("log.openingInputDialog")),Z.app.render(!0),Hooks.callAll("sbc.started")}static async initializeSBC(){let J=window.SBC;if(!game.user.isGM)return;_.log("Initializing sbc v"+J.config.modData.version);let Q=window.SBC.settings.getSetting("importFolder"),Z="SBC_WIP",Y=await game.folders.find((X)=>X.name===Q&&X.type==="Actor"),H=await game.folders.find((X)=>X.name===Z&&X.type==="Actor");if(!Y){let X=await Folder.create({name:Q,type:"Actor",color:"#e76f51",parent:null,_id:"SBC0000000000000"}),G=_.translate("interfaceMessages.folderCreated");ui.notifications.info(G),_.log(G),Y=X}if(J.folderId=Y.id,!H){let X=await Folder.create({name:Z,type:"Actor",color:"#e76f51",parent:Y});J.wipFolderId=X.id}else J.wipFolderId=H.id,game.actors.filter((X)=>X.folder?.id===H.id).map(async(X)=>await X.delete());J.actorArtFolder=J.settings.getSetting("actorArtFolder"),J.tokenArtFolder=J.settings.getSetting("tokenArtFolder"),J.actorArtPath="",J.tokenArtPath="",J.actorType=window.SBC.settings.getSetting("defaultActorType"),Hooks.callAll("sbc.reset")}static async createFolderIfMissing(J){let Q=window.SBC,Z=Q.settings.getSetting("fileStorageSource");try{if(!(await FilePicker.browse(Z,J)).dir.includes(J))await FilePicker.createDirectory(Z,J,Z==="s3"?{bucket:Q.settings.getSetting("fileStorageBucket")}:{})}catch(Y){try{await FilePicker.createDirectory(Z,J,Z==="s3"?{bucket:Q.settings.getSetting("fileStorageBucket")}:{})}catch{}}}static createSearchSet(J,Q=!1,Z=[]){let Y=new Set;for(let H of J){if(!H)continue;if(Y.add(H),Q){let X=Z.length?Z:window.SBC.actor.itemTypes.class.filter((W)=>W.system.subType!=="racial");if(!Z.length)X=X.map((W)=>W.system.tag.substring(0,3).toUpperCase()).concat(X.map((W)=>`${W.system.tag[0]}${W.system.tag[2]}${W.system.tag[3]}`.toUpperCase())).concat(window.SBC.app.processData.characterData.archetypes.map((W)=>_.capitalize(W)));let G=X.indexOf("FIG");if(G>-1)X.splice(G,1),X.push("FGT");for(let W of X)Y.add(`${H} (${W})`)}}return Y}static sortArrayByName(J){J=foundry.utils.deepClone(J);for(let Q of J)Q.name=Q.name.toLocaleLowerCase();return pf1.utils.naturalSort(J,"name",{numeric:!0,ignorePunctuation:!0})}static extractCreatureTypeInfo(J){let Q=window.SBC,Z=Q.config.creatureTypes.find((H)=>J.match(new RegExp("\\b"+H+"\\b","i")))??"humanoid",Y=Q.config.creatureSubTypes.find((H)=>J.match(new RegExp("\\b"+H+"\\b","i")));return[Z,Y]}}var k1=["NONE","attributes.hp","spells.spellbooks.primary.spellPoints","spells.spellbooks.secondary.spellPoints","spells.spellbooks.tertiary.spellPoints","spells.spellbooks.spelllike.spellPoints","details.xp","attributes.ac.normal.total","attributes.ac.flatFooted.total","attributes.ac.touch.total","attributes.cmd.total","attributes.speed.land.total","attributes.speed.land.fly.total","attributes.speed.land.swim.total","attributes.speed.land.climb.total","attributes.speed.land.burrow.total","attributes.sr.total"];class V0{static async updateCustomCompendiums(J=!1){let Q=window.SBC;await Q.compendiumSearch.registerDefaultCompendia(),_.log("Updating custom compendiums");let Z=game.settings.get(Q.config.modData.mod,"customCompendiums").replace(/\s/g,"").split(/[,;]/g).filter((G)=>!!G);if(!Z.length)return;let Y=Array.from(game.packs.keys()),H=[],X=Z.filter((G)=>{if(Q.compendiumSearch.isKnownCompendium(G))return!1;if(!Y.includes(G))return H.push(G),!1;return!0});if(!J){if(H.length>0){let W="sbc-pf1 | Failed to add the following compendiums to sbc, please check for typos ("+H.toString()+")";ui.notifications.error(W),_.log(W)}if(!X.length)return;let G="sbc-pf1 | Added the following compendiums to sbc ("+X.toString()+")";ui.notifications.info(G),_.log(G)}await Q.compendiumSearch.processCompendiums(X)}static async updateImportFolder(){_.log("Updating custom import folder");let J=V0.getSetting("importFolder");if(J!==""){let Q=null;try{Q=await game.folders.find((Z)=>Z.data.name===J&&Z.data.type==="Actor")}catch(Z){let Y="sbc-pf1 | Something went wrong while searching for an existing import folder.";ui.notifications.info(Y),_.log(Y)}if(Q===null){let Z=await Folder.create({name:J,type:"Actor",color:"#e76f51",parent:null}),Y="Created a custom folder for imported statblocks.";return ui.notifications.info(Y),_.log(Y),Z.id}else return Q.id}}static getSetting(J){if(J.includes("attributeBar")){let Q=parseInt(J.replace("attributeBar",""));if(isNaN(Q))return{};let Z=game.settings.get(window.SBC.config.modData.mod,Q===1?"bar1":"bar2");if(Z==="0")return{};else return{attribute:k1[Z]}}return game.settings.get(window.SBC.config.modData.mod,J)}}var v$={debug:{default:!1,type:Boolean},defaultActorType:{default:0,type:String,choices:{0:"NPC",1:"PC"}},autoConvert:{default:!1,type:Boolean},inputDelay:{default:750,type:Number,range:{min:250,max:5000,step:10}},importFolder:{default:"sbc | Imported Statblocks",type:String,onChange:()=>V0.updateImportFolder()},customCompendiums:{default:"",type:String,onChange:async()=>await V0.updateCustomCompendiums()},createBuff:{default:!0,type:Boolean},createAttacks:{default:!1,type:Boolean},createAssociations:{default:!1,type:Boolean},rollBonusesIntegration:{default:!1,type:Boolean},pcsight:{default:!0,type:Boolean},npcsight:{default:!0,type:Boolean},actorArtFolder:{default:null,type:String},tokenArtFolder:{default:null,type:String},pchealth:{default:"",type:String,choices:{"":"System default",discrete:"Discrete",continuous:"Continuous"}},npchealth:{default:"",type:String,choices:{"":"System default",discrete:"Discrete",continuous:"Continuous"}},disposition:{default:-1,type:String,choices:{"-1":"Hostile",0:"Neutral",1:"Friendly"}},displayName:{default:20,type:String,choices:{0:"None",10:"Control",20:"Owner Hover",30:"Hover",40:"Owner",50:"Always"}},displayBars:{default:20,type:String,choices:{0:"None",10:"Control",20:"Owner Hover",30:"Hover",40:"Owner",50:"Always"}},bar1:{default:"24",type:String,choices:k1},bar2:{default:"0",type:String,choices:k1},sbcMigrationVersion:{config:!1,default:"0.0.0",type:String}},U$=function(){let J=window.SBC.config;Object.entries(v$).forEach(([Q,Z])=>{game.settings.register(J.modData.mod,Q,Object.assign({name:_.translate(`settings.${Q}.name`),hint:_.translate(`settings.${Q}.hint`),scope:"world",config:v$[Q].config??!0},Z))})};var K0={modData:{version:"5.6.2",mod:"pf1-statblock-converter",modName:"sbc | PF1 Statblock Converter"},const:{lineheight:20,crFractions:{"1/8":0.125,"1/6":0.1625,"1/4":0.25,"1/3":0.3375,"1/2":0.5},actorType:{0:"npc",1:"character"},suffixMultiples:["st","nd","rd","th"]},sources:M1,lineCategories:["Defense","Offense","Statistics","Special Abilities","Description","Tactics","Ecology","([a-z ]*)?Spells","([a-z ]*)?Extracts","([a-z ]*)?Spell-Like"],lineStarts:["Source","CR","XP","[LC][GNE]","N[GE]?","Init","Aura","Senses","Defense","AC","HP","Fort","Resist","Immun(?:e|ities)","DR","Offense","Speed","Spd","Melee","Ranged","Space","Special","^Spell-Like","^(.*) Spell-Like","^Spells","^(.*) Spells","^Extracts","^(.*) Extracts","Constant","At[- ]will","[456789]th","3rd","2nd","1st","Cantrips","Orisons","0","D\\s*domain spell","Domains?","Myster[y|ies]","S\\s*spirit magic spell","Spirits?","Bloodlines?","Thassilonian Specialization","Patrons?","Statistics","Str","Base","Feats","Skills","Languages?","Ecology","Environment","Organization","Treasure","S[QR]","(?:Other |Combat )?Gear","Gear","(?:M|Fem)ale","Tactics","(?:Before|During) Combat","Morale","(?:Opposition|Prohibited) School","Defensive Abilities","Immune","Weaknesses","Description","\\d+\\s*(?:rounds)?\\/(day|month|year)",".*\\((S[PU]|EX|\\-\\-)\\)","\\*"],armorBonusTypes:["touch","flat-footed","natural","size","dex","armor","shield","base","enhancement","dodge","inherent","deflection","morale","luck","sacred","insight","resistance","profane","trait","racial","competence","circumstance","alchemical","penalty","rage","monk","wis","untyped"],techColors:N1,techTiers:["Mark (?:I{1,3}|I?V)","Grade (?:I{1,3}|I?V)"],magicalAbilities:Y1,itemModifications:U1,weaponGroups:{},metamagic:O0,creatureTypes:R1,creatureSubTypes:v1,immunities:x1,sillyGear:S1,races:[],classes:[],mythicPaths:[],racialClasses:[],prestigeClassNames:[],templates:[],naturalAttacks:[],initializeConfig:async function(){let J=window.SBC.compendiumSearch.defaultCompendia,Q=window.SBC.settings.getSetting("customCompendiums");if(Q!=="")Q=Q.replace(/\s/g,""),J=J.concat(Q.split(/[,;]/g));await sJ(J),this.classes.sort(),this.mythicPaths.sort(),this.racialClasses.sort(),this.prestigeClassNames.sort();let Z=await game.packs.get("pf1.monster-abilities").index;for(let Y of Z)if(Y.name!=="")K0.naturalAttacks.push(Y.name);for(let[Y,H]of Object.entries(pf1.config.weaponGroups)){let X=H.toLowerCase().replace(/(.*), (.*)/,"$2 $1");if(!Object.values(K0.weaponGroups).includes(H))K0.weaponGroups[Y]=X}}};async function sJ(J){let Q=new Set,Z=new Set,Y=new Set,H=new Set,X=new Set,G=new Set,W=J.map(async(z)=>{let K=await game.packs.get(z);if(!K)return;let q=K.index;await Promise.all(q.map(async(j)=>{if(j.name==="")return;switch(j.type){case"class":switch(j.system?.subType){case"prestige":Z.add(j.name);break;case"mythic":Y.add(j.name);break;case"racial":H.add(j.name);break;default:Q.add(j.name);break}break;case"race":X.add(j.name);break;case"feat":switch(j.system?.subType){case"template":G.add(j.name.split("(")[0].replace("Creature","").trim());break}}}))});await Promise.all(W),K0.classes=Array.from(Q).filter((z)=>!!z),K0.mythicPaths=Array.from(Y).filter((z)=>!!z),K0.racialClasses=Array.from(H).filter((z)=>!!z),K0.prestigeClasses=Array.from(Z).filter((z)=>!!z),K0.races=Array.from(X),K0.templates=Array.from(G)}class N0{static re=/^(0|[1-9]\d*)\.(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)?$/;constructor(){this.major=0,this.minor=0,this.patch=0,this.preRelease="",this.buildMetaData=""}static fromString(J){if(J.match(this.re)){let Q=new this;return Q.major=parseInt(RegExp.$1),Q.minor=parseInt(RegExp.$2),Q.patch=parseInt(RegExp.$3||0),Q.preRelease=RegExp.$4||"",Q.buildMetaData=RegExp.$5||"",Q}return null}toString(){return`${this.major}.${this.minor}.${this.patch}`}isHigherThan(J){if(this.major>J.major)return!0;if(this.major===J.major&&this.minor>J.minor)return!0;if(this.major===J.major&&this.minor===J.minor&&this.patch>J.patch)return!0;return!1}isLowerThan(J){if(this.major<J.major)return!0;if(this.major===J.major&&this.minor<J.minor)return!0;if(this.major===J.major&&this.minor===J.minor&&this.patch<J.patch)return!0;return!1}isSame(J){return this.major==J.major&&this.minor==J.minor&&this.patch==J.patch}}var m1="5.6.2";async function x$(J){J=(!J?game.actors.contents:J).filter((Q)=>Q.type==="character"||Q.type==="npc");for(let Q of J)await w$(Q)}async function S$(){let J=game.packs.filter((Q)=>Q.metadata.type==="Actor"&&Q.index.some((Z)=>Z.type==="npc"||Z.type==="character"));for(let Q of J){let Z=Q.locked;if(Z)await Q.configure({locked:!1});ui.notifications.notify(`Migrating compendium pack "${Q.metadata.label}" (${Q.metadata.id})`);try{await aJ(Q),ui.notifications.notify(`Compendium pack "${Q.metadata.label}" (${Q.metadata.id}) migrated`)}catch(Y){ui.notifications.error(`Failed to migrate compendium pack "${Q.metadata.label}" (${Q.metadata.id}): ${Y.message}`)}if(Z)await Q.configure({locked:!0})}}async function aJ(J){let Q=J.index.reduce((Z,Y)=>{if(["npc","character"].includes(Y.type))Z.push(Y._id);return Z},[]);if(!Q.length)return;for(let Z of Q){let Y=await J.getDocument(Z);if(!Y)continue;await w$(Y,J.metadata.label)}}async function w$(J,Q=null){let Z=window.SBC,Y=!1;if(J.getFlag(Z.config.modData.mod,"version"))Y=!0;else if(J.itemTypes.buff.some((z)=>z.name.startsWith("sbc")))Y=!0;else if((typeof J.system.details.notes==="object"?J.system.details.notes.value:J.system.details.notes)?.includes("<p>sbc | Generated with version"))Y=!0;if(!Y)return;let X=N0.fromString(m1),G=N0.fromString(J.getFlag(Z.config.modData.mod,"version")||"0.0.0"),W=Z.config.modData.version;if(!G.isLowerThan(X))return;else{if(!Q)ui.notifications.notify(`Migrating actor "${J.name}" from version ${G.toString()} to ${W}`);else console.log(`Migrating actor "${J.name}" from version ${G.toString()} to ${W} in pack "${Q}"`);let z={[`flags.${Z.config.modData.mod}.version`]:W},K=[];if(eJ(J,z),tJ(J,z),$9(J,K),await J.update(z),K.length)await J.updateEmbeddedDocuments("Item",K);if(!Q)ui.notifications.notify(`Actor "${J.name}" migrated to version ${W}`);else console.log(`Actor "${J.name}" migrated to version ${W} in pack "${Q}"`)}}function eJ(J,Q){let Z=J.system.traits.dr.value,Y=[];if(Z.forEach((H)=>{if(H.amount&&typeof H.amount==="string"){let X=parseInt(H.amount);if(!isNaN(X))H.amount=X;Y.push(H)}}),Y.length)Q["system.traits.dr.value"]=Y}function tJ(J,Q){let Z=J.system.traits.eres.value,Y=[];if(Z.forEach((H)=>{if(H.amount&&typeof H.amount==="string"){let X=parseInt(H.amount);if(!isNaN(X))H.amount=X;Y.push(H)}}),Y.length)Q["system.traits.eres.value"]=Y}function $9(J,Q){let Z=J.itemTypes.buff.find((Y)=>Y.name==="sbc | Conversion Buff (Ability Scores)");if(Z){let Y=Z.toObject().system.changes.map((H)=>{return H.formula=H.formula==="NaN"?"0":H.formula,H});Q.push({_id:Z.id,"system.changes":Y})}}window.SBC={app:null,actor:null,actorType:null,folderId:"",wipFolderId:"",config:K0,configInitialized:!1,compendiumSearch:new J1,isImporting:!1,settings:V0,rollBonusOps:u,actorArtFolder:"",actorArtPath:"",tokenArtFolder:"",tokenArtPath:""};Hooks.once("setup",async()=>{let J=window.SBC,Q=typeof ForgeVTT!="undefined"&&ForgeVTT.usingTheForge;game.settings.register(J.config.modData.mod,"fileStorageSource",{name:_.translate("settings.fileStorageSource"),scope:"world",config:!Q,type:String,default:Q?"forgevtt":"data",choices:{data:game.i18n.localize("FILES.SourceUser"),s3:game.i18n.localize("FILES.SourceS3")},onChange:async()=>{await P1()}}),game.settings.register(J.config.modData.mod,"fileStorageFolder",{name:_.translate("settings.fileStorageFolder.name"),hint:_.translate("settings.fileStorageFolder.hint"),scope:"world",config:!0,type:String,default:"sbc",onChange:async()=>{await P1()}});try{let Z=await FilePicker.browse("s3",""),Y={};for(let H of Z.dirs)Y[H]=H;game.settings.register(J.config.modData.mod,"fileStorageBucket",{name:_.translate("settings.fileStorageBucket"),scope:"world",config:!Q,type:String,default:Q?"":FilePicker.S3_BUCKETS?.length>0?FilePicker.S3_BUCKETS[0]:"",choices:Y,onChange:async()=>{await P1()}})}catch{}U$()});Hooks.once("ready",async()=>{let J=window.SBC;await V0.updateCustomCompendiums(!0),await _.initializeSBC(),await P1(),I$(),Hooks.callAll("sbc.loadCustomCompendiums"),await J.config.initializeConfig(),console.log(_.translate("log.configInitialized")),J.configInitialized=!0,game.modules.get(J.config.modData.mod).api={openSBCDialog:_.openSBCDialog};let Q=m1,Z=game.settings.get(J.config.modData.mod,"sbcMigrationVersion");if(typeof Z==="number")Z=Z.toString()+".0";else if(typeof Z==="string"&&Z.match(/^([0-9]+)\.([0-9]+)$/))Z=`${Z}.0`;let Y=N0.fromString(Q).isHigherThan(N0.fromString(Z));if(console.log(`SBC Migration: ${Q} > ${Z} = ${Y}`),Y){if(Z!=="0.0.0")console.debug(_.translate("log.migrationMessage",{oldVersion:Z,newVersion:J.config.modData.version}));if(game.actors.size){let H=ui.notifications.notify(_.translate("interfaceMessages.migrationStarted"),"info",{permanent:!0});await x$(),await S$(),ui.notifications.notify(_.translate("interfaceMessages.migrationFinished")),ui.notifications.remove(H)}if(game.user.isGM)await game.settings.set(J.config.modData.mod,"sbcMigrationVersion",J.config.modData.version)}});Hooks.on("renderActorDirectory",(J,Q,Z)=>{if(I$(),window.jQuery&&Q instanceof jQuery)Q=Q[0];if(!game.user.hasPermission("ACTOR_CREATE"))return;_.log(_.translate("log.renderingButton"));let Y=document.createElement("button");Y.id="startSBCButton",Y.classList.add("create-entity","sbcButton");let H=document.createElement("i");H.classList.add("fas","fa-file-import"),Y.appendChild(H);let X=document.createTextNode(_.translate("sbcButton"));Y.appendChild(X),Q.querySelector(".directory-footer").append(Y),Y.addEventListener("click",async()=>await _.openSBCDialog())});Hooks.on("sbc.reset",async function(){let J=[],Q=window.SBC.settings.getSetting("customCompendiums");if(Q!=="")Q=Q.replace(/\s/g,""),J.push(...Q.split(/[,;]/g)),console.log(J);await f$(J)});Hooks.on("sbc.loadCustomCompendiums",async function(J){if(!J)return;let Q=window.SBC,Z=new Set,Y=window.SBC.settings.getSetting("customCompendiums");if(Y!=="")Y=Y.replace(/\s/g,""),Z=new Set(Y.split(/[,;]/g));J.forEach((H)=>{Z.add(H)}),await f$(Array.from(Z)),Q.config.initializeConfig(),game.settings.set(Q.config.modData.mod,"customCompendiums",Array.from(Z).join(","))});Hooks.on("pf1RegisterMaterials",(J)=>{let Q=J.get("alchemicalSilver");Q.addon=!1,Q.name="PF1.Materials.Types.silver",J.register("pf1-statblock-converter","silver",Q)});async function f$(J){await window.SBC.compendiumSearch.processCompendiums(J,{reset:!0})}function I$(){let J=window.SBC;document.querySelector(`.folder[data-folder-id="${J.wipFolderId}"]`)?.remove()}async function P1(){let J=window.SBC,Z=J.settings.getSetting("fileStorageFolder").split("/").filter((G)=>G!==""),Y=[];for(let G of Z)Y.push(G),await _.createFolderIfMissing(Y.join("/"));await _.createFolderIfMissing(Y.concat("actor").join("/")),await _.createFolderIfMissing(Y.concat("token").join("/"));let H=[],X=J.settings.getSetting("fileStorageFolder");H=H.concat(X.split("/")).filter((G)=>G!==""),J.targetFolder=H.join("/")}

//# debugId=FB37E4AC29B1BE3E64756E2164756E21
//# sourceMappingURL=sbc.js.map

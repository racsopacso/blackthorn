{
  "version": 3,
  "sources": ["../scripts/sbcCompendium.js", "../scripts/sbcRollBonuses.mjs", "../scripts/sbcError.js", "../scripts/Content/naturalAttacks.js", "../scripts/Content/otherRaces.js", "../scripts/Content/prestigeClasses.js", "../scripts/Content/additionalSenses.js", "../scripts/Content/wizardSchoolClasses.js", "../scripts/Content/metamagic.js", "../scripts/Content/techColors.js", "../scripts/Content/magicalAbilities.js", "../scripts/Content/sources.js", "../scripts/Content/creatureTypes.js", "../scripts/Content/creatureSubTypes.js", "../scripts/Content/itemModifications.js", "../scripts/Content/immunities.js", "../scripts/Content/sillyGear.js", "../scripts/sbcRegex.js", "../scripts/Parsers/abstract-parser.js", "../scripts/Parsers/Universal/entity-parser.js", "../scripts/Parsers/Universal/notes-parser.js", "../scripts/Parsers/Universal/simple-parser.js", "../scripts/Parsers/Universal/split-entity-parser.js", "../scripts/Parsers/BaseData/aura-parser.js", "../scripts/Parsers/BaseData/class-parser.js", "../scripts/Parsers/BaseData/creature-parser.js", "../scripts/Parsers/BaseData/race-parser.js", "../scripts/Parsers/BaseData/senses-parser.js", "../scripts/Parsers/BaseData/mythic-rank-parser.js", "../scripts/Parsers/Defense/ac-parser.js", "../scripts/Parsers/Defense/dr-parser.js", "../scripts/Parsers/Defense/hp-parser.js", "../scripts/Parsers/Defense/immunity-parser.js", "../scripts/Parsers/Defense/resistance-parser.js", "../scripts/Parsers/Defense/saves-parser.js", "../scripts/Parsers/Defense/sr-parser.js", "../scripts/Parsers/Defense/weakness-parser.js", "../scripts/Parsers/Misc/ecology-parser.js", "../scripts/Parsers/Misc/special-ability-parser.js", "../scripts/Parsers/Misc/tactics-parser.js", "../scripts/Parsers/Offense/attack-parser.js", "../scripts/Parsers/Offense/speed-parser.js", "../scripts/Parsers/Offense/spellbook-parser.js", "../scripts/Parsers/Statistics/ability-parser.js", "../scripts/Parsers/Statistics/gear-parser.js", "../scripts/Parsers/Statistics/language-parser.js", "../scripts/Parsers/Statistics/skill-parser.js", "../scripts/Parsers/BaseData/age-parser.js", "../scripts/Parsers/parser-mapping.js", "../scripts/sbcValidation.js", "../scripts/Process/base-data.js", "../scripts/Process/defense-data.js", "../scripts/Process/description-data.js", "../scripts/Process/ecology-data.js", "../scripts/Process/offense-data.js", "../scripts/Process/special-ability-data.js", "../scripts/Process/statistics-data.js", "../scripts/Process/tactics-data.js", "../scripts/sbcParser.js", "../scripts/sbcData.js", "../scripts/sbcInput.js", "../scripts/sbcUtils.js", "../scripts/sbcSettings.js", "../scripts/sbcConfig.js", "../scripts/sbc.js"],
  "sourcesContent": [
    "// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\nimport { sbcUtils } from \"./sbcUtils.js\";\n\n/* ------------------------------------ */\n/* Compendiums and Entities             */\n\n/* ------------------------------------ */\nexport class CompendiumOps {\n  constructor() {\n    this.packLookup = {};\n    this.packData = {};\n    this.packProcessing = false;\n  }\n\n  get defaultCompendia() {\n    return [...game.packs.keys()].filter(\n      (o) =>\n        o.startsWith(\"pf1.\") ||\n        o.startsWith(\"pf1e-archetypes\") ||\n        o.startsWith(\"pf-content\") ||\n        o.startsWith(\"pf1-statblock-converter\")\n    );\n  }\n\n  async registerDefaultCompendia() {\n    sbcUtils.log(\"Registering default compendia...\");\n    await this.processCompendiums(this.defaultCompendia, { bypassLock: true });\n  }\n\n  /**\n   * Process the compendiums to cache their contents for later use.\n   * This will create a lookup object for each type of entity in the compendiums.\n   *\n   * @param {string[]|string} packs           Array of pack names to process\n   * @param {object} [options]                Additional options\n   * @param {boolean} [options.reset]         Whether to reset the cache\n   * @param {boolean} [options.bypassLock]    Whether to bypass the lock and process anyway\n   * @returns {Promise<void>}                 A Promise that resolves once the compendiums have been processed\n   */\n  async processCompendiums(packs = [], { reset = false, bypassLock = false } = {}) {\n    if (this.packProcessing && !bypassLock) return;\n    if (!Array.isArray(packs)) packs = [packs];\n    if (packs.length === 0) return;\n\n    this.packProcessing = true;\n    if (this.packData && reset) {\n      this.packData = {};\n      this.packLookup = {};\n      await this.registerDefaultCompendia();\n    }\n\n    for (const pack of packs) {\n      let compendium = await game.packs.get(pack);\n\n      if (compendium) {\n        await compendium.getIndex();\n        compendium.fuzzyIndex = sbcUtils.sortArrayByName([...compendium.index]);\n\n        // Cache the compendium for later use\n        this.packData[pack] = compendium;\n\n        // Create a lookup for the compendium's contents by item (and subtype if available)\n        // Each entry will be the item's name as the key and the UUID as the value\n        for (const entity of compendium.fuzzyIndex) {\n          let type = entity.type;\n          let subtype = entity.system?.subType ?? null;\n\n          // Special exception, as the fuzzyIndex seems to not add the subtype for feat feats.\n          // I assume it's because that's the default in template.json.\n          if (type === \"feat\" && !subtype) subtype = \"feat\";\n\n          const packEntity = {\n            name: entity.name,\n            uuid: entity.uuid,\n            classes: entity.system?.associations?.classes ?? [],\n            tags: entity.system?.tags ?? [],\n            subType: subtype,\n          };\n\n          if (!this.packLookup[pack]) this.packLookup[pack] = {};\n          if (!this.packLookup[pack][type]) this.packLookup[pack][type] = { items: [] };\n          this.packLookup[pack][type][\"items\"].push(packEntity);\n\n          if (subtype) {\n            if (!(subtype in this.packLookup[pack][type])) this.packLookup[pack][type][subtype] = [];\n            this.packLookup[pack][type][subtype].push(packEntity);\n          }\n        }\n      }\n    }\n\n    this.packProcessing = false;\n  }\n\n  isKnownCompendium(packId) {\n    return !!this.packLookup[packId] || false;\n  }\n\n  /**\n   * Generate permutations of an array. Complexity is O(n!).\n   * Should be safe up to 7, though you should probably consider something else if you're reaching that high often.\n   *\n   * @template T\n   * @param {T[]} perm - The Array to be generated upon\n   * @returns {Array.<T[]>|false} An Array containing all Array permutations or false if failed.\n   */\n  uniquePermutations(perm) {\n    const total = new Set();\n    if (perm.length > 7) {\n      console.warn(\"Array too large. Not attempting.\", perm);\n      return false;\n    }\n\n    for (let i = 0; i < perm.length; i = i + 1) {\n      const rest = this.uniquePermutations(perm.slice(0, i).concat(perm.slice(i + 1)));\n\n      if (!rest.length) {\n        total.add([perm[i]]);\n      } else {\n        for (let j = 0; j < rest.length; j = j + 1) {\n          total.add([perm[i]].concat(rest[j]));\n        }\n      }\n    }\n    return [...total];\n  }\n\n  /**\n   * Searches through compendia quickly using the system generated index caches.\n   * Exact matches excluding punctuation and case are prioritized before searching word order permutations.\n   *\n   * @param {string} searchTerm                       The name of the Document being searched for\n   *\n   * @param {object} searchOptions                    Provides a filter to limit search to specific packs or Document types\n   * @param {Set} [searchOptions.packs]               A Set of packs to search in\n   * @param {string} [searchOptions.type]             A Document type to limit which packs are searched in\n   * @param {string[]} [searchOptions.itemTypes]      An Item type to limit which form is acceptable\n   * @param {string[]} [searchOptions.itemSubTypes]   An Item subtype to limit which form is acceptable\n   * @param {string[]} [searchOptions.classes]        The classes the entity belongs to\n   * @param {string} [searchOptions.race]             The race the entity has, if any\n   *\n   * @returns {Promise<string|undefined>}             The found entity or null if not found\n   * @private\n   */\n  async findInCompendia(searchTerm, searchOptions) {\n    if (!searchTerm) {\n      return undefined;\n    }\n\n    let packs;\n    if (searchOptions?.packs && searchOptions.packs.length)\n      packs = searchOptions.packs.flatMap((o) => game.packs.get(o) ?? []);\n    else packs = game.packs.filter((o) => !searchOptions?.type || o.metadata.type == searchOptions.type);\n    searchTerm = searchTerm.toLocaleLowerCase();\n    let found, uuid;\n\n    let itemTypes = searchOptions.itemTypes;\n    let searchArray = [];\n\n    for (const pack of packs) {\n      const packId = pack.metadata.id;\n      let packData = this.packData[packId];\n\n      if (!packData) {\n        sbcUtils.log(`Pack ${packId} not found in cache. Processing...`);\n        await this.processCompendiums(packId);\n        packData = this.packData[packId];\n      }\n\n      for (const type of itemTypes) {\n        if (!this.packLookup[packId]?.[type]) continue;\n\n        const subTypes = searchOptions.itemSubTypes ?? Object.keys(this.packLookup[packId][type]);\n        for (const subType of subTypes) {\n          let arrayData = this.packLookup[packId][type][subType] ?? [];\n          arrayData = arrayData.filter((o) => {\n            // Filter out any items that don't have the right class, if set\n            const classMatch =\n              o.classes?.length > 0\n                ? searchOptions.classes?.length !== undefined\n                  ? o.classes.some((c) => {\n                      try {\n                        return searchOptions.classes.includes(pf1.utils.createTag(c));\n                      } catch (err) {\n                        console.log(`There was an error in creating a class tag for \"${c}\".`);\n                        console.error(err);\n                        return false;\n                      }\n                    })\n                  : true\n                : true;\n\n            // Filter out any items that don't have the right race, if set\n            const raceMatch =\n              o.tags?.length > 0 && type === \"feat\" && o.subType === \"racial\"\n                ? searchOptions?.race?.length > 0\n                  ? o.tags.some((t) => pf1.utils.createTag(t) === searchOptions.race)\n                  : false\n                : true;\n\n            return classMatch && raceMatch;\n          });\n          searchArray = searchArray.concat(arrayData);\n        }\n      }\n    }\n\n    searchArray = sbcUtils.sortArrayByName(searchArray);\n    if (searchArray.length > 0) {\n      found = pf1.utils.binarySearch(searchArray, searchTerm, (sp, it) => {\n        return sp.localeCompare(it.name, undefined, {\n          ignorePunctuation: true,\n        });\n      });\n      if (found > -1) {\n        uuid = searchArray[found].uuid;\n      }\n    }\n\n    if (uuid) return uuid;\n\n    let searchMutations = this.uniquePermutations(searchTerm.split(/[ _-]/));\n    if (searchMutations) searchMutations = searchMutations.map((o) => o.join(\" \"));\n    else {\n      // If array is too long, search for just a reversed version and one that pivots around commas/ semicolons\n      searchMutations = [null];\n      searchMutations.push(searchTerm.split(/[ _-]/).reverse().join(\" \"));\n      searchMutations.push(\n        searchTerm\n          .split(/[,;] ?/)\n          .reverse()\n          .flatMap((o) => o.split(\" \"))\n          .join(\" \")\n      );\n    }\n\n    for (let mut = 1; mut < searchMutations.length; mut++) {\n      found = pf1.utils.binarySearch(searchArray, searchMutations[mut], (sp, it) =>\n        sp.localeCompare(it.name, undefined, {\n          ignorePunctuation: true,\n        })\n      );\n      if (found > -1) {\n        uuid = searchArray[found].uuid;\n      }\n    }\n\n    if (uuid) return uuid;\n    return null;\n  }\n\n  /**\n   * @private\n   *\n   * @param {object} searchTerm                       The name of the Document being searched for\n   * @param {string} [searchTerm.item]                The name being searched for\n   * @param {Set|string[]|string} [searchTerm.search] A list of search terms to be searched for\n   * @param {string} [searchTerm.name]                The name of the Document being searched for\n   * @param {string} [searchTerm.shortName]           The short name of the Document being searched for\n   * @param {string} [searchTerm.altName]             The alternative name of the Document being searched for\n   * @param {string} [searchTerm.altName2]            The second alternative name of the Document being searched for\n   *\n   * @param {object} searchOptions                    Provides a filter to limit search to specific packs or Document types\n   * @param {Set} [searchOptions.packs]               A Set of packs to search in\n   * @param {string} [searchOptions.type]             A Document type to limit which packs are searched in\n   * @param {string[]} [searchOptions.itemTypes]      An Item type to limit which form is acceptable\n   * @param {string[]} [searchOptions.itemSubTypes]   An Item subtype to limit which form is acceptable\n   * @param {string[]} [searchOptions.classes]        The classes the entity belongs to\n   * @param {string} [searchOptions.race]             The race the entity has, if any\n   *\n   * @returns {Promise<Item|null>}                    The found entity or null if not found\n   */\n  async searchCompendia(searchTerm, searchOptions = {}) {\n    if (!searchTerm) {\n      return null;\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    let searchResult;\n    let foundEntity = {};\n\n    searchOptions = Object.assign(\n      {\n        packs: [],\n        type: \"Item\",\n        itemTypes: [],\n        itemSubTypes: null,\n        classes: undefined,\n      },\n      searchOptions\n    );\n\n    // Filter invalid and duplicate search terms to avoid unnecessary lookups\n    if (!searchTerm.search) {\n      searchTerm.search = new Set();\n    } else if (typeof searchTerm.search === \"string\") {\n      searchTerm.search = new Set([searchTerm.search]);\n    } else if (Array.isArray(searchTerm.search)) {\n      searchTerm.search = new Set(searchTerm.search);\n    }\n\n    let searchTerms = searchTerm.search;\n    searchTerms.add(searchTerm.name).add(searchTerm.shortName).add(searchTerm.altName).add(searchTerm.altName2);\n    searchTerms = [...searchTerms].filter((o) => !!o);\n\n    if (searchTerm.item === \"Scribe Scroll\") console.log(searchOptions);\n    for (const searchName of searchTerms) {\n      sbcUtils.log(\n        `Searching compendium for \"${searchName}\" (item: ${searchTerm.item}) in packs:`,\n        searchOptions.packs\n      );\n      searchResult = await this.findInCompendia(searchName, searchOptions);\n      if (searchResult) break;\n    }\n\n    sbcUtils.log(`Search Result for \"${searchTerm.item}\": `, searchResult || \"<none>\");\n\n    // Return the searchResult, which either is a clone of the found entity or null\n    if (!searchResult) {\n      return null;\n    }\n\n    foundEntity = await fromUuid(searchResult);\n\n    // Turns out that this doesn't add the core sourceId flag, so we do so manually.\n    const itemData = foundEntity.toObject();\n    itemData.flags.core = { sourceId: searchResult };\n    const item = new Item.implementation(itemData);\n    return item;\n  }\n\n  /**\n   * @param {object} searchTerm                       The name of the Document being searched for\n   * @param {Set|string[]|string} [searchTerm.search] A list of search terms to be searched for\n   * @param {string} [searchTerm.name]                The name of the Document being searched for\n   * @param {string} [searchTerm.shortName]           The short name of the Document being searched for\n   * @param {string} [searchTerm.altName]             The alternative name of the Document being searched for\n   * @param {string} [searchTerm.altName2]            The second alternative name of the Document being searched for\n   *\n   * @param {object} searchOptions                    Provides a filter to limit search to specific packs or Document types\n   * @param {string} [searchOptions.type]             A Document type to limit which packs are searched in\n   * @param {string} [searchOptions.itemType]         An Item type to limit which form is acceptable\n   * @param {string[]} [searchOptions.itemTypes]      An Item type to limit which form is acceptable\n   * @param {string} [searchOptions.itemSubType]       An Item subtype to limit which form is acceptable\n   * @param {string[]} [searchOptions.itemSubTypes]   A list of Item subtypes to limit which form is acceptable\n   * @param {string[]} [searchOptions.classes]        The classes the entity belongs to\n   * @param {string} [searchOptions.race]             The race the entity has, if any\n   *\n   * @returns {Promise<Item|null>}                    The found entity or null if not found\n   */\n  async findEntityInCompendia(searchTerm, searchOptions = {}) {\n    if (searchOptions.itemType) {\n      searchOptions.itemTypes = Array.isArray(searchOptions.itemType)\n        ? searchOptions.itemType\n        : [searchOptions.itemType];\n      delete searchOptions.itemType;\n    }\n\n    if (searchOptions.itemSubType) {\n      searchOptions.itemSubTypes = Array.isArray(searchOptions.itemSubType)\n        ? searchOptions.itemSubType\n        : [searchOptions.itemSubType];\n      delete searchOptions.itemSubType;\n    }\n\n    const packValues = Object.values(this.packData);\n\n    let systemCompendia = new Set();\n    let defaultCompendia = new Set();\n    let customCompendia = new Set();\n\n    packValues.forEach((o) => {\n      switch (o.metadata.package) {\n        case \"pf1\":\n          systemCompendia.add(o.metadata.id);\n          break;\n\n        case \"pf1e-archetypes\":\n        case \"pf-content\":\n        case \"pf1-statblock-converter\":\n          defaultCompendia.add(o.metadata.id);\n          break;\n\n        default:\n          customCompendia.add(o.metadata.id);\n          break;\n      }\n    });\n\n    /** @type {string[]} customCompendiumSettings */\n    let customCompendiumSettings =\n      game.settings\n        .get(window.SBC.config.modData.mod, \"customCompendiums\")\n        ?.split(/[,;]/g)\n        .filter((o) => !this.packData[o]) ?? [];\n\n    await this.processCompendiums(customCompendiumSettings);\n\n    const results = await Promise.all([\n      await this.searchCompendia(searchTerm, foundry.utils.mergeObject(searchOptions, { packs: customCompendia })),\n      await this.searchCompendia(searchTerm, foundry.utils.mergeObject(searchOptions, { packs: defaultCompendia })),\n      await this.searchCompendia(searchTerm, foundry.utils.mergeObject(searchOptions, { packs: systemCompendia })),\n    ]);\n\n    return results.reduce((acc, val) => acc || val, null);\n  }\n}\n",
    "import { sbcUtils } from \"./sbcUtils.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\n/* ------------------------------------ */\n/* Roll Bonuses module integration Lib  */\n/* ------------------------------------ */\nexport class RollBonusOps {\n  static flagKey = \"ckl-roll-bonuses\";\n\n  static allTargets = [\n    \"armorFocus\",\n    \"improvedArmorFocus\",\n    \"elementalFocus\",\n    \"greaterElementalFocus\",\n    \"mythicElementalFocus\",\n    \"furiousFocus\",\n    \"martialFocus\",\n    \"snakeSidewind\",\n    \"spellFocus\",\n    \"greaterSpellFocus\",\n    \"mythicSpellFocus\",\n    \"spellSpecialization\",\n    \"vitalStrike\",\n    \"improvedVitalStrike\",\n    \"greaterVitalStrike\",\n    \"weaponFocus\",\n    \"weaponSpecialization\",\n    \"greaterWeaponFocus\",\n    \"greaterWeaponSpecialization\",\n    \"mythicWeaponFocus\",\n    \"fighterWeaponTraining\",\n    \"versatilePerformance\",\n    \"improvedCritical\",\n    \"ammunition\",\n  ];\n\n  /** @type {FlagSetup} */\n  static flagSetup = {\n    armorFocus: { boolean: \"armor-focus\", module: \"armor-focus\" },\n    improvedArmorFocus: { boolean: \"armor-focus-improved\", module: \"armor-focus-improved\" },\n    weaponFocus: { boolean: \"weapon-focus\", module: \"weapon-focus\" },\n    greaterWeaponFocus: { boolean: \"weapon-focus-greater\", module: \"weapon-focus-greater\" },\n    mythicWeaponFocus: { boolean: \"weapon-focus-mythic\", module: \"weapon-focus-mythic\" },\n    weaponSpecialization: { boolean: \"weapon-specialization\", module: \"weapon-specialization\" },\n    greaterWeaponSpecialization: { boolean: \"weapon-specialization-greater\", module: \"weapon-specialization-greater\" },\n    martialFocus: { boolean: \"martial-focus\", module: \"martial-focus\" },\n    elementalFocus: { boolean: \"elemental-focus\", module: \"elemental-focus\" },\n    spellFocus: { boolean: \"spell-focus\", module: \"spell-focus\" },\n    greaterSpellFocus: { boolean: \"spell-focus-greater\", module: \"spell-focus-greater\" },\n    mythicSpellFocus: { boolean: \"spell-focus-mythic\", module: \"spell-focus-mythic\" },\n    spellSpecialization: { boolean: \"spell-specialization\", module: \"spell-specialization\" },\n    furiousFocus: { boolean: \"furious-focus\", module: \"furious-focus\" },\n    snakeSidewind: { boolean: \"snake-sidewind\", module: \"snake-sidewind\" },\n    vitalStrike: { boolean: \"vital-strike\", module: \"vital-strike\" },\n    improvedVitalStrike: { boolean: \"vital-strike-improved\", module: \"vital-strike-improved\" },\n    greaterVitalStrike: { boolean: \"vital-strike-greater\", module: \"vital-strike-greater\" },\n    mythicVitalStrike: { boolean: \"vital-strike-mythic\", module: \"vital-strike-mythic\" },\n    devastatingStrike: { boolean: \"devastating-strike\", module: \"devastating-strike\" },\n    improvedDevastatingStrike: { boolean: \"devastating-strike-improved\", module: \"devastating-strike-improved\" },\n    versatilePerformance: { boolean: \"versatile-performance\", module: \"versatile-performance\" },\n  };\n\n  static targets = [];\n\n  static addTarget(target) {\n    if (!RollBonusOps.targets.includes(target)) {\n      RollBonusOps.targets.push(target);\n    }\n  }\n\n  static versatilePerformanceOptions = {\n    act: [\"blf\", \"dis\"],\n    comedy: [\"blf\", \"int\"],\n    dance: [\"acr\", \"fly\"],\n    keyboard: [\"dip\", \"int\"],\n    oratory: [\"blf\", \"sen\"],\n    percussion: [\"han\", \"int\"],\n    sing: [\"blf\", \"sen\"],\n    string: [\"blf\", \"dip\"],\n    wind: [\"dip\", \"han\"],\n  };\n\n  static favoredEnemyPlurals = {\n    aberrations: \"aberration\",\n    animals: \"animal\",\n    constructs: \"construct\",\n    dragons: \"dragon\",\n    humanoids: \"humanoid\",\n    \"magical beasts\": \"magical beast\",\n    \"monstrous humanoids\": \"monstrous humanoid\",\n    oozes: \"ooze\",\n    outsiders: \"outsider\",\n    plants: \"plant\",\n    dwarves: \"dwarf\",\n    elves: \"elf\",\n    giants: \"giant\",\n    goblinoids: \"goblinoid\",\n    gnolls: \"gnoll\",\n    gnomes: \"gnome\",\n    halfings: \"halfling\",\n    humans: \"human\",\n    orcs: \"orc\",\n    reptilians: \"reptilian\",\n  };\n\n  /**\n   * Processes the targets for the given items.\n   *\n   * @param { ItemPF[] } items   - The items to process.\n   * @returns {Promise<void>} - A promise that resolves when the processing is complete.\n   */\n  static async processTargets(items) {\n    for (const item of items) {\n      if (item.subType === \"feat\") {\n        const target = sbcUtils.parseSubtext(item.name)[1];\n\n        if (item.name.match(/^(?!.*Greater|Mythic).*Weapon Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"weaponFocus\", target);\n        } else if (item.name.match(/^(?!.*Greater).*Weapon Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"mythicWeaponFocus\", target);\n        } else if (item.name.match(/Weapon Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"greaterWeaponFocus\", target);\n        } else if (item.name.match(/^(?!.*Greater).*Weapon Specialization/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"weaponSpecialization\", target);\n        } else if (item.name.match(/Weapon Specialization/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"greaterWeaponSpecialization\", target);\n        } else if (item.name.match(/^(?!.*Improved).*Armor Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"armorFocus\", target);\n        } else if (item.name.match(/Armor Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"improvedArmorFocus\", target);\n        } else if (item.name.match(/^(?!.*Greater|Mythic).*Elemental Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"elementalFocus\", target);\n        } else if (item.name.match(/^(?!.*Greater).*Elemental Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"mythicElementalFocus\", target);\n        } else if (item.name.match(/Elemental Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"greaterElementalFocus\", target);\n        } else if (item.name.match(/Martial Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"martialFocus\", target);\n        } else if (item.name.match(/^(?!.*Greater|Mythic).*Spell Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"spellFocus\", target);\n        } else if (item.name.match(/^(?!.*Greater).*Spell Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"mythicSpellFocus\", target);\n        } else if (item.name.match(/Spell Focus/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"greaterSpellFocus\", target);\n        } else if (item.name.match(/^(?!.*Greater).*Spell Specialization/i)) {\n          await RollBonusOps.addSpecificBonus(item, \"spellSpecialization\", target);\n        } else if (item.name.match(/Furious Focus/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"furiousFocus\");\n        } else if (item.name.match(/Snake Sidewind/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"snakeSidewind\");\n        } else if (item.name.match(/Improved Critical/i)) {\n          await RollBonusOps.addImprovedCritical(item, target);\n        } else if (item.name.match(/^(?!.*Greater|Improved|Mythic).*Vital Strike/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"vitalStrike\");\n        } else if (item.name.match(/^(?!.*Greater|Mythic).*Vital Strike/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"improvedVitalStrike\");\n        } else if (item.name.match(/^(?!.*Mythic).*Vital Strike/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"greaterVitalStrike\");\n        } else if (item.name.match(/Vital Strike/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"mythicVitalStrike\");\n        } else if (item.name.match(/^(?!.*Improved).*Devastating Strike/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"devastatingStrike\");\n        } else if (item.name.match(/Devastating Strike/i)) {\n          await RollBonusOps.addSpecificBoolean(item, \"improvedDevastatingStrike\");\n        }\n      } else if (item.subType === \"classFeat\") {\n        const target = sbcUtils.parseSubtext(item.name)[1];\n\n        if (item.name.match(/Versatile Performance/i) && target) {\n          await RollBonusOps.addVersatilePerformance(item, target.toLowerCase());\n        } else if (item.name.match(/Weapon Training/i) && target) {\n          await RollBonusOps.addWeaponTraining(item, target);\n        } else if (item.name.match(/Favored Enemy/i) && target) {\n          await RollBonusOps.addFavoredEnemy(item, target);\n        } else if (item.name.match(/Favored Terrain/i) && target) {\n          //await RollBonusOps.addFavoredTerrain(item, target);\n        }\n      } else if (item.system.subType === \"ammo\") {\n        await RollBonusOps.addAmmoProperties(item);\n      }\n    }\n  }\n\n  /**\n   * Adds ammo properties to the item, such as enhancement bonus, bane, flaming, etc.\n   *\n   * @param {ItemPF} item - The item to which the properties are applied.\n   * @returns {Promise<void>} - A promise that resolves when the properties are added.\n   */\n  static async addAmmoProperties(item) {\n    const updates = {};\n    const name = item.name.toLowerCase();\n    const [enemyType, enemySubType] = sbcUtils.extractCreatureTypeInfo(name);\n    const damages = [];\n\n    // Check if the item is a bane ammo\n    if (item.name.match(/bane/i)) {\n      Object.assign(updates, {\n        \"ammo-bane-creature-type\": [enemyType],\n        \"ammo-bane-creature-subtype\": enemySubType ? [enemySubType] : [],\n      });\n    }\n\n    const m = name.match(/\\+[12345]/);\n    // Check if the item has an enhancement bonus\n    const enhancementValue = m?.[0] || 0;\n    if (enhancementValue) {\n      Object.assign(updates, {\n        \"ammo-enhancement\": `${enhancementValue.replace(\"+\", \"\")}`,\n      });\n    }\n\n    // Check for Flaming or Flaming Burst\n    if (name.match(/flaming/i)) {\n      damages.push({ formula: \"1d6[Flaming]\", types: [\"fire\"], crit: \"nonCrit\" });\n\n      if (name.match(/flaming burst/i)) {\n        damages.push({ formula: \"1d10[Flaming Burst]\", types: [\"fire\"], crit: \"crit\" });\n      }\n    }\n\n    // Check for Frost or Icy Burst\n    if (name.match(/frost/i)) {\n      damages.push({ formula: \"1d6[Frost]\", types: [\"cold\"], crit: \"nonCrit\" });\n\n      if (name.match(/icy burst/i)) {\n        damages.push({ formula: \"1d10[Icy Burst]\", types: [\"cold\"], crit: \"crit\" });\n      }\n    }\n\n    // Check for Shock or Shocking Burst\n    if (name.match(/shock/i)) {\n      damages.push({ formula: \"1d6[Shock]\", types: [\"electricit\"], crit: \"nonCrit\" });\n\n      if (name.match(/shocking burst/i)) {\n        damages.push({ formula: \"1d10[Shocking Burst]\", types: [\"electricit\"], crit: \"crit\" });\n      }\n    }\n\n    // Check for Corrosive or Corrosive Burst\n    if (name.match(/corrosive/i)) {\n      damages.push({ formula: \"1d6[Corrosive]\", types: [\"acid\"], crit: \"nonCrit\" });\n\n      if (name.match(/corrosive burst/i)) {\n        damages.push({ formula: \"1d10[Corrosive Burst]\", types: [\"acid\"], crit: \"crit\" });\n      }\n    }\n\n    // Add the damage types to the updates object\n    if (damages.length > 0) {\n      Object.assign(updates, {\n        \"ammo-damage\": damages,\n      });\n    }\n\n    await item.update({\n      flags: {\n        [RollBonusOps.flagKey]: updates,\n      },\n    });\n  }\n\n  /**\n   *\n   * @param {ItemPF} item - The item to which the bonus is applied.\n   * @param {string} key - The key of the bonus to be added.\n   * @param {string|number} target - The target to which the bonus is applied.\n   * @returns {Promise<void>} - A promise that resolves when the bonus is added.\n   * @throws {Error} - Throws an error if the key is not valid or if the target is not valid.\n   */\n  static async addSpecificBonus(item, key, target) {\n    try {\n      if (RollBonusOps.allTargets.includes(key)) {\n        if (!target) {\n          console.warn(`SBC: ${key} doesn not have a valid target.`);\n          return;\n        }\n\n        await item.addItemBooleanFlag(RollBonusOps.flagSetup[key].boolean);\n        await item.setFlag(RollBonusOps.flagKey, RollBonusOps.flagSetup[key].module, target);\n      } else {\n        console.warn(`SBC: ${key} is not a valid bonus.`);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  /**\n   *\n   * @param {ItemPF} item - The item to which the bonus is applied.\n   * @param {string} key - The key of the bonus to be added.\n   * @returns {Promise<void>} - A promise that resolves when the bonus is added.\n   * @throws {Error} - Throws an error if the key is not valid or if the target is not valid.\n   */\n  static async addSpecificBoolean(item, key) {\n    if (RollBonusOps.allTargets.includes(key)) {\n      await item.addItemBooleanFlag(RollBonusOps.flagSetup[key].boolean);\n    } else {\n      console.warn(`SBC: ${key} is not a valid bonus.`);\n    }\n  }\n\n  /**\n   *\n   * @param {ItemPF} item - The item to which the bonus is applied.\n   * @param {string} target - The target to which the bonus is applied.\n   * @returns {Promise<void>} - A promise that resolves when the bonus is added.\n   * @throws {Error} - Throws an error if the key is not valid or if the target is not valid.\n   */\n  static async addImprovedCritical(item, target) {\n    if (!target) {\n      console.warn(\"SBC: Improved Critical doesn not have a valid target.\");\n      return;\n    }\n\n    await item.update({\n      system: {\n        flags: {\n          boolean: {\n            bonus_crit: true,\n            \"target_weapon-type\": true,\n          },\n        },\n      },\n      flags: {\n        [RollBonusOps.flagKey]: {\n          \"bonus_crit-keen\": true,\n          \"target_weapon-type\": [target],\n        },\n      },\n    });\n  }\n\n  /**\n   *\n   * @param {ItemPF} item - The item to which the bonus is applied.\n   * @param {string} target - The target to which the bonus is applied.\n   * @returns {Promise<void>} - A promise that resolves when the bonus is added.\n   * @throws {Error} - Throws an error if the key is not valid or if the target is not valid.\n   */\n  static async addVersatilePerformance(item, target) {\n    if (!target) {\n      console.warn(\"SBC: Versatile Performance doesn not have a valid target.\");\n      return;\n    }\n\n    const options = RollBonusOps.versatilePerformanceOptions[target];\n    if (options) {\n      /** @type {ActorPF} */\n      const actor = item.actor;\n      const baseSkill = actor.allSkills.find(\n        (s) => s.startsWith(\"prf.\") && actor.getSkillInfo(s).name.toLowerCase() === target.toLowerCase()\n      );\n      if (!baseSkill) {\n        console.warn(`SBC: Perform (${target}) skill could not be found.`);\n        return;\n      }\n\n      await item.addItemBooleanFlag(RollBonusOps.flagSetup[\"versatilePerformance\"].boolean);\n      await item.setFlag(RollBonusOps.flagKey, RollBonusOps.flagSetup[\"versatilePerformance\"].module, [\n        { base: baseSkill, choice1: options[0], choice2: options[1], expanded: \"\" },\n      ]);\n    }\n  }\n\n  /**\n   *\n   * @param {ItemPF} item  - The item to which the bonus is applied.\n   * @param {string} target - The target to which the bonus is applied.\n   * @returns {Promise<void>} - A promise that resolves when the bonus is added.\n   * @throws {Error} - Throws an error if the key is not valid or if the target is not valid.\n   */\n  static async addWeaponTraining(item, target) {\n    if (!target) {\n      console.warn(\"SBC: Weapon Training doesn not have a valid target.\");\n      return;\n    }\n\n    const weaponBonus = target.match(/\\+(\\d+)/)[1];\n    const weaponGroup = target\n      .match(/(.*)\\s\\+\\d+/)[1]\n      .toLowerCase()\n      .replace(\"heavy blades\", \"bladesHeavy\")\n      .replace(\"light blades\", \"bladesLight\");\n\n    await item.update({\n      system: {\n        flags: {\n          boolean: {\n            bonus_attack: true,\n            bonus_damage: true,\n            \"target_weapon-group\": true,\n          },\n        },\n      },\n      flags: {\n        [RollBonusOps.flagKey]: {\n          bonus_attack: weaponBonus,\n          \"bonus_attack-type\": \"untyped\",\n          bonus_damage: [],\n          \"bonus_damage-change\": [{ formula: weaponBonus, type: \"untyped\" }],\n          \"target_weapon-group\": [weaponGroup],\n        },\n      },\n    });\n  }\n\n  static async addFavoredEnemy(item, target) {\n    if (!target) {\n      console.warn(\"SBC: Weapon Training doesn not have a valid target.\");\n      return;\n    }\n\n    /** @type {[string, number]} */\n    let [enemyGroup, enemyBonus] = target.split(\"+\").map((i) => i.trim());\n    enemyGroup = enemyGroup.toLowerCase();\n    for (const [key, value] of Object.entries(RollBonusOps.favoredEnemyPlurals)) {\n      if (enemyGroup.includes(key)) {\n        enemyGroup = enemyGroup.replace(key, value);\n        break;\n      }\n    }\n\n    const [enemyType, enemySubType] = sbcUtils.extractCreatureTypeInfo(enemyGroup);\n\n    await item.update({\n      system: {\n        flags: {\n          boolean: {\n            bonus_attack: true,\n            bonus_damage: true,\n            \"target_creature-type\": true,\n            \"target_creature-subtype\": true,\n          },\n        },\n      },\n      flags: {\n        [RollBonusOps.flagKey]: {\n          bonus_attack: enemyBonus,\n          \"bonus_attack-type\": \"untyped\",\n          bonus_damage: [],\n          \"bonus_damage-change\": [{ formula: enemyBonus, type: \"untyped\" }],\n          \"target_creature-type\": [enemyType],\n          \"target_creature-subtype\": enemySubType ? [enemySubType] : [],\n          target_toggle: \"all\",\n        },\n      },\n    });\n  }\n}\n\n/**\n * @typedef {object} Flag\n * @property {string} boolean - The boolean flag name.\n * @property {string} module - The module name.\n */\n\n/**\n * @typedef {{[key: string]: Flag}} FlagSetup\n *\n * @property {string} boolean - The boolean flag name.\n * @property {string} module - The module name.\n */\n",
    "// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\nexport class sbcError {\n  /**\n   * @readonly\n   * @enum {symbol}\n   * @static\n   */\n  static ERRORLEVELS = Object.freeze({\n    /** @type {symbol} 0: Fatal Error */\n    FATAL: Symbol(\"0\"),\n    /** @type {symbol} 1: Normal Error */\n    ERROR: Symbol(\"1\"),\n    /** @type {symbol} 2: Warning */\n    WARNING: Symbol(\"2\"),\n    /** @type {symbol} 3: Info */\n    INFO: Symbol(\"3\"),\n  });\n\n  /**\n   * A translation object for the error levels to their string representation\n   *\n   * @type {{number: string}}  A translation object for the error levels to their string representation\n   * @readonly\n   * @static\n   */\n  static levels = {\n    [sbcError.ERRORLEVELS.FATAL]: \"FATAL\",\n    [sbcError.ERRORLEVELS.ERROR]: \"ERROR\",\n    [sbcError.ERRORLEVELS.WARNING]: \"WARNING\",\n    [sbcError.ERRORLEVELS.INFO]: \"INFO\",\n  };\n\n  /**\n   * @type {sbcTypes.ErrorData}\n   */\n  constructor(\n    level = sbcError.ERRORLEVELS.FATAL,\n    keyword = \"Default Error Keyword\",\n    message = \"Default Error Message\",\n    line = -1,\n    value = undefined\n  ) {\n    this.level = level;\n    this.keyword = keyword;\n    this.message = message;\n    this.line = line;\n    this.value = value;\n  }\n\n  get errorLabel() {\n    //console.log(this, sbcError.levels[this.level]);\n    return sbcError.levels[this.level];\n  }\n}\n",
    "const naturalAttacks = {\n  hooves: {\n    img: \"systems/pf1/icons/items/inventory/monster-hoof.jpg\",\n    isPrimaryAttack: false,\n    damageTypes: \"B\",\n  },\n  tail: {\n    img: \"systems/pf1/icons/items/inventory/monster-tail.jpg\",\n    isPrimaryAttack: false,\n    damageTypes: \"B\",\n  },\n  other: {\n    img: \"systems/pf1/icons/items/inventory/monster-cat.jpg\",\n    isPrimaryAttack: false,\n    damageTypes: \"P, B or S\",\n  },\n};\nexport default naturalAttacks;\n",
    "const otherRaces = [\"Jotund Troll\", \"Troll\"];\nexport default otherRaces;\n",
    "const prestigeClasses = {\n  \"Agent of the Grave\": {\n    hd: 8,\n    bab: \"low\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\"blf\", \"hea\", \"int\", \"kar\", \"khi\", \"kre\", \"lin\", \"spl\", \"umd\"],\n    img: \"systems/pf1/icons/skills/affliction_08.jpg\",\n    offset: \"@classes.agentOfTheGrave.level - 1\",\n  },\n  \"Aldori Swordlord\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\"acr\", \"blf\", \"dip\", \"int\", \"kno\", \"prf\", \"sen\"],\n    img: \"systems/pf1/icons/skills/weapon_25.jpg\",\n  },\n  \"Arcane Archer\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\"per\", \"rid\", \"ste\", \"sur\"],\n    img: \"systems/pf1/icons/skills/weapon_03.jpg\",\n    offset: \"@classes.arcaneArcher.level - ceil(@classes.arcaneArcher.level / 4)\",\n    castingType: [\"arcane\"],\n  },\n  \"Arcane Trickster\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"blf\",\n      \"clm\",\n      \"dip\",\n      \"dev\",\n      \"dis\",\n      \"esc\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"per\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"swm\",\n    ],\n    img: \"systems/pf1/icons/skills/violet_28.jpg\",\n    offset: \"@classes.arcaneTrickster.level\",\n    castingType: [\"arcane\"],\n  },\n  \"Arclord of Nex\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\"dip\", \"lin\", \"sen\", \"umd\"],\n    img: \"systems/pf1/icons/skills/red_09.jpg\",\n    offset: \"@classes.arclordOfNex.level\",\n    castingType: [\"arcane\"],\n  },\n  \"Argent Dramaturge\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"blf\",\n      \"dip\",\n      \"esc\",\n      \"fly\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"prf\",\n      \"per\",\n      \"sen\",\n      \"spl\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/lute.jpg\",\n    offset: \"@classes.argentDramaturge.level\",\n  },\n  Asavir: {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\"blf\", \"crf\", \"han\", \"int\", \"kna\", \"kre\", \"per\", \"rid\", \"sen\", \"sur\"],\n    img: \"systems/pf1/icons/feats/ride-by-attack.jpg\",\n  },\n  \"Ashavic Dancer\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\"acr\", \"dip\", \"fly\", \"kpl\", \"kre\", \"per\", \"prf\", \"sen\", \"spl\", \"sur\"],\n    img: \"systems/pf1/icons/spells/wind-grasp-magenta-2.jpg\",\n    offset: \"@classes.ashavicDancer.level - 1\",\n  },\n  \"Aspis Agent\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\"blf\", \"dis\", \"kar\", \"khi\", \"sen\", \"slt\", \"umd\"],\n    img: \"systems/pf1/icons/skills/yellow_41.jpg\",\n  },\n  Assassin: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"blf\",\n      \"clm\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"int\",\n      \"lin\",\n      \"per\",\n      \"sen\",\n      \"slt\",\n      \"ste\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/skills/weapon_43.jpg\",\n  },\n  \"Battle Herald\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\"blf\", \"crf\", \"dip\", \"han\", \"hea\", \"int\", \"ken\", \"khi\", \"klo\", \"kno\", \"per\", \"prf\", \"rid\", \"sen\"],\n    img: \"systems/pf1/icons/skills/red_05.jpg\",\n  },\n  \"Bellflower Tiller\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 6,\n    classSkills: [\"acr\", \"blf\", \"dip\", \"dis\", \"esc\", \"hea\", \"int\", \"kge\", \"klo\", \"per\", \"sen\", \"slt\", \"ste\", \"sur\"],\n    img: \"systems/pf1/icons/skills/red_06.jpg\",\n  },\n\n  // DATA ENTRY AFTER THIS LINE NOT FINISHED\n\n  \"Blackfire Adept\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.blackfireAdept.level - ceil(@classes.blackfireAdept.level / 4)\",\n  },\n  Bloatmage: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.bloatmage.level\",\n    castingType: [\"arcane\"],\n  },\n  Brewkeeper: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.brewkeeper.level - 1\",\n    castingType: [\"alchemy\"],\n  },\n  \"Brother of the Seal\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Champion of Irori\": {\n    hd: 8,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Chernasardo Warden\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Crimson Templar\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Cyphermage: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.cyphermage.level\",\n    castingType: [\"arcane\"],\n  },\n  \"Daggermark Poisoner\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Daivrat: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.daivrat.level - 1\",\n    castingType: [\"arcane\"],\n  },\n  Darechaser: {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Dawnflower Anchorite\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.dawnflowerAnchorite.level - 1\",\n  },\n  \"Dawnflower Dissident\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.dawnflowerDissident.level\",\n    castingType: [\"divine\"],\n  },\n  \"Death Slayer\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.deathSlayer.level - ceil(@classes.deathSlayer.level / 5)\",\n  },\n  Demoniac: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.demoniac.level - 1\",\n  },\n  \"Devoted Muse\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Diabolist: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.diabolist.level - 1\",\n  },\n  \"Divine Scion\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.divineScion.level\",\n    castingType: [\"divine\"],\n  },\n  \"Dragon Disciple\": {\n    hd: 12,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.dragonDisciple.level - ceil(@classes.dragonDisciple.level / 4)\",\n    castingType: [\"arcane\"],\n  },\n  Duelist: {\n    hd: 10,\n    bab: \"high\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Eldritch Knight\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.eldritchKnight.level - 1\",\n    castingType: [\"arcane\"],\n  },\n  \"Enchanting Courtesan\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.enchantingCourtesan.level - 1\",\n  },\n  \"Envoy of Balance\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.envoyOfBalance.level\",\n  },\n  \"Esoteric Knight\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"floor(@classes.esotericKnight.level / 2)\",\n    castingType: [\"psychic\"],\n  },\n  Evangelist: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Exalted: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.exalted.level\",\n    castingType: [\"divine\"],\n  },\n  Feysworn: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.feysworn.level - 1\",\n  },\n  \"Genie Binder\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"floor(@classes.genieBinder.level / 2) + floor(@classes.genieBinder.level / 5)\",\n  },\n  \"Golden Legionnaire\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Gray Corsair\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Gray Gardener\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.grayGardener.level - ceil(@classes.grayGardener.level / 4)\",\n    castingType: [\"divine\"],\n  },\n  \"Green Faith Acolyte\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.greenFaithAcolyte.level\",\n    castingType: [\"divine\"],\n  },\n  \"Halfling Opportunist\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Harrower: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.harrower.level\",\n  },\n  \"Hellknight Signifer\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.hellknightSignifer.level\",\n  },\n  Hellknight: {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Heritor Knight\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Hinterlander: {\n    hd: 10,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.hinterlander.level - 1\",\n  },\n  \"Holy Vindicator\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.holyVindicator.level - ceil(@classes.holyVindicator.level / 4)\",\n    castingType: [\"divine\"],\n  },\n  \"Horizon Walker\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Inheritor's Crusader\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 1,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.inheritorsCrusader.level\",\n    castingClass: [\"cleric\", \"paladin\"],\n  },\n  \"Inner Sea Pirate\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Knight of Ozem\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Lantern Bearer\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Lion Blade\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Living Monolith\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Loremaster: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.loremaster.level\",\n  },\n  \"Low Templar\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Magaambyan Arcanist\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.magaambyanArcanist.level\",\n    castingType: [\"arcane\"],\n  },\n  \"Mammoth Rider\": {\n    hd: 12,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Master Chymist\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.masterChymist.level - floor(@classes.masterChymist.level / 4) - 1\",\n    castingType: [\"alchemy\"],\n  },\n  \"Master Spy\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Mortal Usher\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Mystery Cultist\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.mysteryCultist.level - 1\",\n  },\n  \"Mystic Theurge\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.mysticTheurge.level\",\n    castingType: [\"arcane\", \"divine\"],\n  },\n  \"Nature Warden\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.natureWarden.level - ceil(@classes.natureWarden.level / 4)\",\n    castingType: [\"divine\"],\n  },\n  \"Noble Scion\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Pain Taster\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Pathfinder Chronicler\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 8,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Pathfinder Delver\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 8,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Pathfinder Field Agent\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Pathfinder Savant\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.pathfinderSavant.level - 1\",\n  },\n  \"Pit Fighter\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Proctor: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.proctor.level - 1\",\n  },\n  \"Prophet of Kalistrade\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Pure Legion Enforcer\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Rage Prophet\": {\n    hd: 10,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset:\n      \"@classes.rageProphet.level - (floor((@classes.rageProphet.level + 3) / 8) + floor(@classes.rageProphet.level / 8) + 1)\",\n  },\n  \"Razmiran Priest\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.razmiranPriest.level - ceil(@classes.razmiranPriest.level / 4)\",\n    castingType: [\"arcane\"],\n  },\n  \"Red Mantis Assassin\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Riftwarden: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.riftwarden.level - ceil(@classes.riftwarden.level / 4)\",\n  },\n  Ritualist: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.ritualist.level\",\n  },\n  \"Rivethun Emissary\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.rivethunEmissary.level - ceil(@classes.rivethunEmissary.level / 4)\",\n  },\n  \"Rose Warden\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Runeguard: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.runeguard.level - 1\",\n  },\n  \"Sacred Sentinel\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Sanguine Angel\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Scar Seeker\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"floor(@classes.scarSeeker.level / 2)\",\n  },\n  Sentinel: {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Shadowdancer: {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Shieldmarshal: {\n    hd: 10,\n    bab: \"high\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Skyseeker: {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.skyseeker.level - ceil(@classes.skyseeker.level / 4)\",\n    castingType: [\"divine\"],\n  },\n  \"Sleepless Detective\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Soul Warden\": {\n    hd: 8,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.soulWarden.level\",\n  },\n  Souldrinker: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.souldrinker.level - ceil(@classes.souldrinker.level / 5)\",\n  },\n  \"Sphere Singer\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.sphereSinger.level - floor((@classes.sphereSinger.level + 7) / 8)\",\n  },\n  \"Stalwart Defender\": {\n    hd: 12,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  Stargazer: {\n    hd: 6,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.stargazer.level\",\n  },\n  \"Steel Falcon\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Storm Kindler\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.stormKindler.level - ceil(@classes.stormKindler.level / 4)\",\n  },\n  \"Student of Perfection\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Student of War\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Tattooed Mystic\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.tattooedMystic.level - ceil(@classes.tattooedMystic.level / 4)\",\n  },\n  Technomancer: {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.technomancer.level - 1\",\n    castingType: [\"arcane\"],\n  },\n  \"Thuvian Alchemist\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.thuvianAlchemist.level\",\n    castingType: [\"arcane\"],\n  },\n  \"Twilight Talon\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Ulfen Guard\": {\n    hd: 10,\n    bab: \"high\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Umbral Court Agent\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"high\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 4,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.umbralCourtAgent.level - ceil(@classes.umbralCourtAgent.level / 4)\",\n  },\n  \"Veiled Illusionist\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.veiledIllusionist.level\",\n  },\n  \"Westcrown Devil\": {\n    hd: 8,\n    bab: \"med\",\n    fort: \"low\",\n    ref: \"high\",\n    will: \"low\",\n    skillsPerLevel: 6,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n  },\n  \"Winter Witch\": {\n    hd: 6,\n    bab: \"low\",\n    fort: \"low\",\n    ref: \"low\",\n    will: \"high\",\n    skillsPerLevel: 2,\n    classSkills: [\n      \"acr\",\n      \"apr\",\n      \"art\",\n      \"blf\",\n      \"clm\",\n      \"crf\",\n      \"dev\",\n      \"dip\",\n      \"dis\",\n      \"esc\",\n      \"fly\",\n      \"han\",\n      \"hea\",\n      \"int\",\n      \"kar\",\n      \"kdu\",\n      \"ken\",\n      \"kge\",\n      \"khi\",\n      \"klo\",\n      \"kna\",\n      \"kno\",\n      \"kpl\",\n      \"kre\",\n      \"lin\",\n      \"lor\",\n      \"per\",\n      \"prf\",\n      \"pro\",\n      \"rid\",\n      \"sen\",\n      \"slt\",\n      \"spl\",\n      \"ste\",\n      \"sur\",\n      \"swm\",\n      \"umd\",\n    ],\n    img: \"systems/pf1/icons/items/inventory/monster-eyes.jpg\",\n    offset: \"@classes.winterWitch.level - 1\",\n    castingClass: [\"witch\"],\n  },\n};\nexport default prestigeClasses;\n",
    "const additionalSenses = [\n  \"all-around vision\",\n  \"carrion sense\",\n  \"deepsight\",\n  \"deathwatch\",\n  \"dragon senses\",\n  \"greensight\",\n  \"lifesense\",\n  \"minesight\",\n  \"water sense\",\n];\nexport default additionalSenses;\n",
    "const wizardSchoolClasses = [\n  \"Abjurer\",\n  \"Conjurer\",\n  \"Diviner\",\n  \"Enchanter\",\n  \"Evoker\",\n  \"Illusionist\",\n  \"Necromancer\",\n  \"Transmuter\",\n  \"Universalist\",\n];\nexport default wizardSchoolClasses;\n",
    "const metamagic = [\n  \"Apocalyptic\",\n  \"Aquatic\",\n  \"Ascendant\",\n  \"Authoritative\",\n  \"Benthic\",\n  \"Blissful\",\n  \"Bouncing\",\n  \"Brackish\",\n  \"Brisk\",\n  \"Burning\",\n  \"Centered\",\n  \"Cherry Blossom\",\n  \"Coaxing\",\n  \"Concussive\",\n  \"Conditional\",\n  \"Consecrate\",\n  \"Contagious\",\n  \"Contingent\",\n  \"Crypt\",\n  \"Dazing\",\n  \"Delayed\",\n  \"Disruptive\",\n  \"Echoing\",\n  \"Eclipsed\",\n  \"Ectoplasmic\",\n  \"Elemental\",\n  \"Empower\",\n  \"Empowered\",\n  \"Encouraging\",\n  \"Enlarge\",\n  \"Enlarged\",\n  \"Extend\",\n  \"Extended\",\n  \"Familiar\",\n  \"Fearsome\",\n  \"Flaring\",\n  \"Fleeting\",\n  \"Focused\",\n  \"Furious\",\n  \"Heighten\",\n  \"Heightened\",\n  \"Intensified\",\n  \"Intuitive\",\n  \"Jinxed\",\n  \"Latent Curse\",\n  \"Lingering\",\n  \"Logical\",\n  \"Maximize\",\n  \"Maximized\",\n  \"Merciful\",\n  \"Murky\",\n  \"Persistent\",\n  \"Piercing\",\n  \"Quicken\",\n  \"Quickened\",\n  \"Reach\",\n  \"Rime\",\n  \"Scarring\",\n  \"Scouting Summons\",\n  \"Seeking\",\n  \"Selective\",\n  \"Shadow Grasp\",\n  \"Sickening\",\n  \"Silent\",\n  \"Snuffing\",\n  \"Solar\",\n  \"Solid Shadows\",\n  \"Stable\",\n  \"Steam\",\n  \"Still\",\n  \"Stilled\",\n  \"Studied\",\n  \"Stygian\",\n  \"Stylized\",\n  \"Tenacious\",\n  \"Tenebrous\",\n  \"Thanatopic\",\n  \"Threatening Illusion\",\n  \"Threnodic\",\n  \"Thundering\",\n  \"Toppling\",\n  \"Toxic\",\n  \"Traumatic\",\n  \"Trick\",\n  \"Tumultuous\",\n  \"Umbral\",\n  \"Ursurping\",\n  \"Vast\",\n  \"Verdant\",\n  \"Widen\",\n  \"Widened\",\n  \"Yai-Mimic\",\n];\nexport default metamagic;\n",
    "const techColors = [\"Black\", \"Blue\", \"Brown\", \"Gray\", \"Green\", \"Orange\", \"Prismatic\", \"Red\", \"White\"];\nexport default techColors;\n",
    "export const Auras = Object.freeze({\n  Abjuration: \"abj\",\n  Conjuration: \"con\",\n  Divination: \"div\",\n  Enchantment: \"enc\",\n  Evocation: \"evo\",\n  Illusion: \"ill\",\n  Necromancy: \"nec\",\n  Transmutation: \"trs\",\n  Universal: \"uni\",\n});\n\nexport const Prefixes = [\"Normal\", \"Lesser\", \"Improved\", \"Greater\", \"Light\", \"Moderate\", \"Heavy\"];\n\n/**\n *\n * @type {{[key: string]: {name: string, staticCost: number, cl: number, aura: string, desc: string}}}\n */\nexport const Abilities = {\n  Concealed: {\n    staticCost: 7_500,\n    cl: 10,\n    available: { lightWeapon: true, oneHanded: true },\n    aura: Auras.Transmutation,\n  },\n  Dueling: {\n    staticCost: 14_000,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  LesserConcealed: {\n    staticCost: 3_000,\n    cl: 5,\n    available: { lightWeapon: true, oneHanded: true },\n    aura: Auras.Transmutation,\n  },\n  Prehensile: {\n    staticCost: 2_500,\n    cl: 7,\n    available: { specific: \"whip\" },\n    aura: Auras.Enchantment,\n  },\n  Shrinking: {\n    staticCost: 1_000,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Sneaky: {\n    staticCost: 5_000,\n    cl: 7,\n    available: { melee: true },\n    aura: Auras.Necromancy,\n  },\n  Transformative: {\n    staticCost: 10_000,\n    cl: 10,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Agile: {\n    bonus: 1,\n    cl: 7,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Answering: {\n    bonus: 1,\n    cl: 7,\n    available: { melee: true },\n    aura: Auras.Enchantment,\n  },\n  BloodSong: {\n    bonus: 1,\n    cl: 6,\n    available: { melee: true, damageTypes: [\"slashing\", \"piercing\"] },\n    aura: Auras.Transmutation,\n  },\n  Countering: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Courageous: {\n    bonus: 1,\n    cl: 3,\n    available: { melee: true },\n    aura: Auras.Enchantment,\n  },\n  DazzlingRadiance: {\n    bonus: 1,\n    cl: 7,\n    available: { melee: true },\n    aura: \"misc\",\n  },\n  Deadly: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true, damage: [\"nonlethal\"] },\n    aura: Auras.Necromancy,\n  },\n  Defending: {\n    bonus: 1,\n    cl: 8,\n    available: { melee: true },\n    aura: Auras.Abjuration,\n  },\n  Disjoining: {\n    bonus: 1,\n    cl: 7,\n    available: { melee: true },\n    aura: Auras.Necromancy,\n  },\n  FateStealing: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Necromancy,\n  },\n  Flamboyant: {\n    bonus: 1,\n    cl: 8,\n    available: { lightWeapon: true, oneHanded: true, damageTypes: [\"piercing\"] },\n    aura: Auras.Transmutation,\n  },\n  Fortuitous: {\n    bonus: 1,\n    cl: 8,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Furious: {\n    bonus: 1,\n    cl: 8,\n    available: { melee: true },\n    aura: Auras.Enchantment,\n  },\n  GrayFlame: {\n    bonus: 1,\n    cl: 6,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Grounding: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Growing: {\n    bonus: 1,\n    cl: 6,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Guardian: {\n    bonus: 1,\n    cl: 8,\n    available: { melee: true },\n    aura: Auras.Abjuration,\n  },\n  Guided: {\n    bonus: 1,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  HeartSeeker: {\n    bonus: 1,\n    cl: 7,\n    available: { melee: true },\n    aura: Auras.Necromancy,\n  },\n  Injecting: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Conjuration,\n  },\n  Keen: {\n    bonus: 1,\n    cl: 10,\n    available: { melee: true, damage: [\"piercing\", \"slashing\"] },\n    aura: Auras.Transmutation,\n  },\n  KiFocus: {\n    bonus: 1,\n    cl: 8,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Leveraging: {\n    bonus: 1,\n    cl: 6,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Menacing: {\n    bonus: 1,\n    cl: 10,\n    available: { melee: true },\n    aura: \"misc\",\n  },\n  MightyCleaving: {\n    bonus: 1,\n    cl: 8,\n    available: { melee: true },\n    aura: Auras.Evocation,\n  },\n  Mimetic: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Abjuration,\n  },\n  Neutralizing: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Ominous: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Evocation,\n  },\n  Pitfall: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Quenching: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Sapping: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true, damage: [\"nonlethal\"] },\n    aura: Auras.Enchantment,\n  },\n  Seaborne: {\n    bonus: 1,\n    cl: 7,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Skewering: {\n    bonus: 1,\n    cl: 5,\n    available: { lightWeapon: true, oneHanded: true, damageTypes: [\"piercing\"] },\n    aura: Auras.Divination,\n  },\n  Slithering: {\n    bonus: 1,\n    cl: 11,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Smashing: {\n    bonus: 1,\n    cl: 10,\n    available: { melee: true, damage: [\"bludgeoning\"] },\n    aura: Auras.Conjuration,\n  },\n  Sticky: {\n    bonus: 1,\n    cl: 8,\n    available: { melee: true, special: [\"reach\"] },\n    aura: Auras.Transmutation,\n  },\n  Thawing: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Throwing: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Underwater: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true, damage: [\"bludgeoning\", \"slashing\"] },\n    aura: Auras.Divination,\n  },\n  Valiant: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Divination,\n  },\n  Vampiric: {\n    bonus: 1,\n    cl: 5,\n    available: { melee: true, damage: [\"slashing\", \"piercing\"] },\n    aura: Auras.Necromancy,\n  },\n  Vicious: {\n    bonus: 1,\n    cl: 9,\n    available: { melee: true },\n    aura: Auras.Necromancy,\n  },\n  Culling: {\n    bonus: 2,\n    cl: 8,\n    available: { melee: true, damage: [\"slashing\"] },\n    aura: Auras.Evocation,\n  },\n  Disruption: {\n    bonus: 2,\n    cl: 14,\n    available: { melee: true, damage: [\"bludgeoning\"] },\n    aura: Auras.Conjuration,\n  },\n  Furyborn: {\n    bonus: 2,\n    cl: 7,\n    available: { melee: true },\n    aura: Auras.Enchantment,\n  },\n  Glorious: {\n    bonus: 2,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Evocation,\n  },\n  GreaterVampiric: {\n    bonus: 2,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  Harvesting: {\n    bonus: 2,\n    cl: 9,\n    available: { melee: true },\n    aura: Auras.Necromancy,\n  },\n  Impact: {\n    bonus: 2,\n    cl: 9,\n    available: { oneHanded: true, twoHanded: true },\n    aura: Auras.Transmutation,\n  },\n  Invigorating: {\n    bonus: 2,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Enchantment,\n  },\n  KiIntensifying: {\n    bonus: 2,\n    cl: 12,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  LegBreaker: {\n    bonus: 2,\n    cl: 7,\n    available: { melee: true, damage: [\"bludgeoning\"] },\n    aura: Auras.Transmutation,\n  },\n  Liberating: {\n    bonus: 2,\n    cl: 12,\n    available: { melee: true },\n    aura: Auras.Abjuration,\n  },\n  LifeSurge: {\n    bonus: 2,\n    cl: 8,\n    available: { melee: true },\n    aura: Auras.Conjuration,\n  },\n  Negating: {\n    bonus: 2,\n    cl: 5,\n    available: { melee: true },\n    aura: Auras.Abjuration,\n  },\n  Obliviating: {\n    bonus: 2,\n    cl: 10,\n    available: { melee: true, damageTypes: [\"bludgeoning\"] },\n    aura: Auras.Enchantment,\n  },\n  Quaking: {\n    bonus: 2,\n    cl: 6,\n    available: { melee: true, damageTypes: [\"bludgeoning\"] },\n    aura: Auras.Evocation,\n  },\n  Truthful: {\n    bonus: 2,\n    cl: 11,\n    available: { melee: true },\n    aura: Auras.Abjuration,\n  },\n  Unseen: {\n    bonus: 2,\n    cl: 7,\n    available: { melee: true },\n    aura: \"misc\",\n  },\n  Wounding: {\n    bonus: 2,\n    cl: 10,\n    available: { melee: true },\n    aura: Auras.Evocation,\n  },\n  Exhausting: {\n    bonus: 3,\n    cl: 12,\n    available: { melee: true },\n    aura: Auras.Necromancy,\n  },\n  GreaterFlamboyant: {\n    bonus: 3,\n    cl: 5,\n    available: { lightWeapon: true, oneHanded: true, damageTypes: [\"piercing\"] },\n    aura: Auras.Transmutation,\n  },\n  Nullifying: {\n    bonus: 3,\n    cl: 12,\n    available: { melee: true },\n    aura: Auras.Abjuration,\n  },\n  Repositioning: {\n    bonus: 3,\n    cl: 10,\n    available: { melee: true },\n    aura: Auras.Enchantment,\n  },\n  SpellStealing: {\n    bonus: 3,\n    cl: 13,\n    available: { melee: true },\n    aura: Auras.Divination,\n  },\n  Umbral: {\n    bonus: 3,\n    cl: 9,\n    available: { melee: true },\n    aura: Auras.Evocation,\n  },\n  Dancing: {\n    bonus: 4,\n    cl: 15,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Flying: {\n    bonus: 5,\n    cl: 16,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  SpellSiphon: {\n    bonus: 5,\n    cl: 15,\n    available: { melee: true },\n    aura: Auras.Transmutation,\n  },\n  Vorpal: {\n    bonus: 5,\n    cl: 18,\n    available: { melee: true, damageTypes: [\"slashing\"] },\n    aura: \"misc\",\n  },\n  Adaptive: {\n    staticCost: 1_000,\n    cl: 1,\n    available: { specific: \"composite bow\" },\n    aura: Auras.Transmutation,\n  },\n  GreaterTransformative: {\n    staticCost: 15_000,\n    cl: 15,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  LiberatingWMH: {\n    staticCost: 7_000,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Abjuration,\n  },\n  Resizing: {\n    staticCost: 4_000,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Sacrosanct: {\n    staticCost: 5_000,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  GreaterSniping: {\n    staticCost: 16_875,\n    cl: 15,\n    available: { ranged: true },\n    aura: \"misc\",\n  },\n  ImprovedSniping: {\n    staticCost: 7_500,\n    cl: 10,\n    available: { ranged: true },\n    aura: \"misc\",\n  },\n  NormalSniping: {\n    staticCost: 1_875,\n    cl: 5,\n    available: { ranged: true },\n    aura: \"misc\",\n  },\n  Ambushing: {\n    bonus: 1,\n    cl: 7,\n    available: { ranged: true },\n    aura: Auras.Transmutation,\n  },\n  Beaming: {\n    bonus: 1,\n    cl: 10,\n    available: { ranged: true },\n    aura: Auras.Evocation,\n  },\n  Conserving: {\n    bonus: 1,\n    cl: 7,\n    available: { firearm: true },\n    aura: Auras.Conjuration,\n  },\n  Distance: {\n    bonus: 1,\n    cl: 6,\n    available: { ranged: true },\n    aura: Auras.Divination,\n  },\n  Driving: {\n    bonus: 1,\n    cl: 10,\n    available: { ranged: true },\n    aura: Auras.Evocation,\n  },\n  Huntsman: {\n    bonus: 1,\n    cl: 7,\n    available: { ranged: true },\n    aura: Auras.Divination,\n  },\n  Inspired: {\n    bonus: 1,\n    cl: 7,\n    available: { simple: true, specific: [\"hand crossbow\", \"rapier\", \"shortbow\", \"short sword\", \"sword cane\"] },\n    aura: Auras.Enchantment,\n  },\n  Jurist: {\n    bonus: 1,\n    cl: 4,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Lucky: {\n    bonus: 1,\n    cl: 8,\n    available: { firearm: true },\n    aura: Auras.Transmutation,\n  },\n  Plummeting: {\n    bonus: 1,\n    cl: 7,\n    available: { ranged: true },\n    aura: Auras.Transmutation,\n  },\n  Reliable: {\n    bonus: 1,\n    cl: 8,\n    available: { firearm: true },\n    aura: Auras.Transmutation,\n  },\n  Returning: {\n    bonus: 1,\n    cl: 7,\n    available: { thrown: true },\n    aura: Auras.Transmutation,\n  },\n  Sacred: {\n    bonus: 1,\n    cl: 16,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Seeking: {\n    bonus: 1,\n    cl: 12,\n    available: { ranged: true },\n    aura: Auras.Divination,\n  },\n  ShadowShooting: {\n    bonus: 1,\n    cl: 8,\n    available: { ranged: true },\n    aura: Auras.Conjuration,\n  },\n  SpellHurling: {\n    bonus: 1,\n    cl: 8,\n    available: { thrown: true },\n    aura: Auras.Evocation,\n  },\n  Training: {\n    bonus: 1,\n    cl: 3,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Unaligned: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Abjuration,\n  },\n  Veering: {\n    bonus: 1,\n    cl: 5,\n    available: { ranged: true },\n    aura: Auras.Evocation,\n  },\n  Anchoring: {\n    bonus: 2,\n    cl: 10,\n    available: { melee: true, thrown: true },\n    aura: Auras.Transmutation,\n  },\n  EndlessAmmunition: {\n    bonus: 2,\n    cl: 9,\n    available: { bow: true, crossbow: true },\n    aura: Auras.Conjuration,\n  },\n  GlitterWake: {\n    bonus: 2,\n    cl: 12,\n    available: { ranged: true },\n    aura: Auras.Conjuration,\n  },\n  Potent: {\n    bonus: 2,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Sharding: {\n    bonus: 2,\n    cl: 10,\n    available: { melee: true, thrown: true },\n    aura: Auras.Conjuration,\n  },\n  Sniping: {\n    bonus: 2,\n    cl: 7,\n    available: { ranged: true },\n    aura: Auras.Transmutation,\n  },\n  Stalking: {\n    bonus: 2,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Divination,\n  },\n  GreaterLucky: {\n    bonus: 3,\n    cl: 12,\n    available: { firearm: true },\n    aura: Auras.Enchantment,\n  },\n  GreaterReliable: {\n    bonus: 3,\n    cl: 12,\n    available: { firearm: true },\n    aura: Auras.Enchantment,\n  },\n  Speed: {\n    bonus: 3,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Tailwind: {\n    bonus: 3,\n    cl: 12,\n    available: { ranged: true },\n    aura: Auras.Evocation,\n  },\n  NimbleShot: {\n    bonus: 4,\n    cl: 11,\n    available: { ranged: true },\n    aura: Auras.Abjuration,\n  },\n  SecondChance: {\n    bonus: 4,\n    cl: 11,\n    available: { bow: true },\n    aura: Auras.Abjuration,\n  },\n  HeartPiercing: {\n    bonus: 5,\n    cl: 10,\n    available: { ranged: true, damageTypes: [\"piercing\"] },\n    aura: Auras.Evocation,\n  },\n  Interfering: {\n    bonus: 5,\n    cl: 18,\n    available: { ranged: true },\n    aura: Auras.Transmutation,\n  },\n  DryLoad: {\n    staticCost: 1_500,\n    cl: 3,\n    available: { firearm: true },\n    aura: Auras.Abjuration,\n  },\n  Exclusionary: {\n    staticCost: 3_750,\n    cl: 1,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  PhantomAmmunition: {\n    staticCost: 2_000,\n    cl: 7,\n    available: { ammunition: true },\n    aura: Auras.Transmutation,\n  },\n  Allying: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Bane: {\n    bonus: 1,\n    cl: 8,\n    hasSpecialTerm: true,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Bewildering: {\n    bonus: 1,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  BloodHunting: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Breaking: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Called: {\n    bonus: 1,\n    cl: 9,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Catalytic: {\n    bonus: 1,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  ClusterShot: {\n    bonus: 1,\n    cl: 5,\n    available: { ranged: true },\n    aura: Auras.Transmutation,\n  },\n  Compassionate: {\n    bonus: 1,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Conductive: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  Confounding: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Corrosive: {\n    bonus: 1,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Cruel: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  Cunning: {\n    bonus: 1,\n    cl: 6,\n    available: { weapon: true },\n    aura: Auras.Divination,\n  },\n  Debilitating: {\n    bonus: 1,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  Deceptive: {\n    bonus: 1,\n    cl: 9,\n    available: { weapon: true },\n    aura: \"misc\",\n  },\n  Dispelling: {\n    bonus: 1,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Abjuration,\n  },\n  Distracting: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Enchantment,\n  },\n  DrowScourge: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  DuelingPSFG: {\n    bonus: 1,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Fervent: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Flaming: {\n    bonus: 1,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Frost: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  HealersSorrow: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  KinSlayer: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Limning: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Merciful: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Miserable: {\n    bonus: 1,\n    cl: 8,\n    hasSpecialTerm: true,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  MythicBane: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Patriotic: {\n    bonus: 1,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Planar: {\n    bonus: 1,\n    cl: 9,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Rusting: {\n    bonus: 1,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Shock: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  SparkflyCrystalArrow: {\n    bonus: 1,\n    cl: 3,\n    available: { ammunition: true },\n    aura: Auras.Evocation,\n  },\n  SpiritHunting: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  SummonBane: {\n    bonus: 1,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Thundering: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  Virulent: {\n    bonus: 1,\n    cl: 5,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  Anarchic: {\n    bonus: 2,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Axiomatic: {\n    bonus: 2,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Burning: {\n    bonus: 2,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  CorrosiveBurst: {\n    bonus: 2,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Cyclonic: {\n    bonus: 2,\n    cl: 12,\n    available: { ranged: true },\n    aura: Auras.Conjuration,\n  },\n  Dazzling: {\n    bonus: 2,\n    cl: 8,\n    available: { firearm: true },\n    aura: Auras.Evocation,\n  },\n  LesserDesignating: {\n    bonus: 2,\n    cl: 7,\n    available: { ranged: true },\n    aura: Auras.Enchantment,\n  },\n  DispellingBurst: {\n    bonus: 2,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Abjuration,\n  },\n  FlamingBurst: {\n    bonus: 2,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  GreaterDistracting: {\n    bonus: 2,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Enchantment,\n  },\n  Heretical: {\n    bonus: 2,\n    cl: 9,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Holy: {\n    bonus: 2,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  IcyBurst: {\n    bonus: 2,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Igniting: {\n    bonus: 2,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Peaceful: {\n    bonus: 2,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Enchantment,\n  },\n  Penetrating: {\n    bonus: 2,\n    cl: 9,\n    available: { ammunition: true },\n    aura: Auras.Evocation,\n  },\n  PhaseLocking: {\n    bonus: 2,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Abjuration,\n  },\n  Planestriking: {\n    bonus: 2,\n    cl: 9,\n    available: { weapon: true },\n    aura: Auras.Abjuration,\n  },\n  RuneForged: {\n    bonus: 2,\n    cl: 13,\n    available: { weapon: true },\n    aura: \"misc\",\n  },\n  Shattering: {\n    bonus: 2,\n    cl: 8,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  ShockingBurst: {\n    bonus: 2,\n    cl: 10,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Silencing: {\n    bonus: 2,\n    cl: 8,\n    available: { weapon: true },\n    aura: \"misc\",\n  },\n  Toxic: {\n    bonus: 2,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  Treasonous: {\n    bonus: 2,\n    cl: 12,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  Unholy: {\n    bonus: 2,\n    cl: 7,\n    available: { weapon: true },\n    aura: Auras.Evocation,\n  },\n  Gory: {\n    bonus: 3,\n    cl: 15,\n    available: { weapon: true },\n    aura: Auras.Necromancy,\n  },\n  Redeemed: {\n    bonus: 3,\n    cl: 12,\n    available: { weapon: true },\n    aura: \"misc\",\n  },\n  SonicBoom: {\n    bonus: 3,\n    cl: 8,\n    available: { firearm: true },\n    aura: Auras.Evocation,\n  },\n  BrilliantEnergy: {\n    bonus: 4,\n    cl: 16,\n    available: { weapon: true },\n    aura: Auras.Transmutation,\n  },\n  GreaterDesignating: {\n    bonus: 4,\n    cl: 12,\n    available: { ranged: true },\n    aura: Auras.Enchantment,\n  },\n  Adhesive: {\n    staticCost: 7_000,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Amorphous: {\n    staticCost: 4_500,\n    cl: 8,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  AquaDynamic: {\n    staticCost: 3_750,\n    cl: 5,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  BuoyantLight: {\n    staticCost: 1_000,\n    cl: 5,\n    available: { lightArmor: true },\n    aura: Auras.Transmutation,\n  },\n  BuoyantMediumHeavy: {\n    staticCost: 2_000,\n    cl: 5,\n    available: { mediumArmor: true, heavyArmor: true },\n    aura: Auras.Transmutation,\n  },\n  Burdenless: {\n    staticCost: 4_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Cloudburst: {\n    staticCost: 5_000,\n    cl: 5,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  Comfort: {\n    staticCost: 5_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Corsair: {\n    staticCost: 5_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Creeping: {\n    staticCost: 5_000,\n    cl: 7,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  Cushioned: {\n    staticCost: 1_000,\n    cl: 1,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Deceiving: {\n    staticCost: 5_000,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Evocation,\n  },\n  Delving: {\n    staticCost: 10_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Etherealness: {\n    staticCost: 49_000,\n    cl: 13,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Expeditious: {\n    staticCost: 4_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Fitting: {\n    staticCost: 2_000,\n    cl: 5,\n    available: { armor: true, shield: true },\n    aura: Auras.Transmutation,\n  },\n  Glamered: {\n    staticCost: 2_700,\n    cl: 10,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  GreaterAquaDynamic: {\n    staticCost: 33_750,\n    cl: 5,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  GreaterShadow: {\n    staticCost: 33_750,\n    cl: 15,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  GreaterSlick: {\n    staticCost: 33_750,\n    cl: 15,\n    available: { armor: true },\n    aura: Auras.Conjuration,\n  },\n  Harmonizing: {\n    staticCost: 15_000,\n    cl: 7,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  ImprovedAquaDynamic: {\n    staticCost: 15_000,\n    cl: 5,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  ImprovedShadow: {\n    staticCost: 15_000,\n    cl: 10,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  ImprovedSlick: {\n    staticCost: 15_000,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Conjuration,\n  },\n  Jousting: {\n    staticCost: 3_750,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Locksmith: {\n    staticCost: 6_500,\n    cl: 3,\n    available: { lightArmor: true },\n    aura: Auras.Transmutation,\n  },\n  Malevolent: {\n    staticCost: 5_000,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Evocation,\n  },\n  Martyring: {\n    staticCost: 18_000,\n    cl: 9,\n    available: { armor: true },\n    aura: Auras.Conjuration,\n  },\n  MentalFocus: {\n    staticCost: 3_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Evocation,\n  },\n  PhaseLurching: {\n    staticCost: 9_100,\n    cl: 13,\n    available: { lightArmor: true },\n    aura: Auras.Conjuration,\n  },\n  Putrid: {\n    staticCost: 10_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Conjuration,\n  },\n  RadiantFlight: {\n    staticCost: 15_000,\n    cl: 10,\n    available: { heavyArmor: true },\n    aura: Auras.Transmutation,\n  },\n  Restful: {\n    staticCost: 4_500,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Necromancy,\n  },\n  Righteous: {\n    staticCost: 27_000,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Shadow: {\n    staticCost: 3_750,\n    cl: 5,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  Slick: {\n    staticCost: 3_750,\n    cl: 4,\n    available: { armor: true },\n    aura: Auras.Conjuration,\n  },\n  SpiritBonded: {\n    staticCost: 6_000,\n    cl: 9,\n    available: { mediumArmor: true },\n    aura: Auras.Conjuration,\n  },\n  Spiteful: {\n    staticCost: 7_000,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Enchantment,\n  },\n  Trackless: {\n    staticCost: 7_500,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Unbound: {\n    staticCost: 27_000,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Unrighteous: {\n    staticCost: 27_000,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  VenomEating: {\n    staticCost: 15_000,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Vigilant: {\n    staticCost: 27_000,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Advancing: {\n    bonus: 1,\n    cl: 5,\n    available: { heavyArmor: true },\n    aura: Auras.Necromancy,\n  },\n  Balanced: {\n    bonus: 1,\n    cl: 3,\n    available: { mediumArmor: true },\n    aura: Auras.Evocation,\n  },\n  Benevolent: {\n    bonus: 1,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Enchantment,\n  },\n  Billowing: {\n    bonus: 1,\n    cl: 3,\n    available: { armor: true },\n    aura: Auras.Conjuration,\n  },\n  Bitter: {\n    bonus: 1,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Bolstering: {\n    bonus: 1,\n    cl: 5,\n    available: { mediumArmor: true, heavyArmor: true, shield: true },\n    aura: Auras.Enchantment,\n  },\n  Calming: {\n    bonus: 1,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Enchantment,\n  },\n  Champion: {\n    bonus: 1,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  Cocooning: {\n    bonus: 1,\n    cl: 9,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Crusading: {\n    bonus: 1,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  Dastard: {\n    bonus: 1,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  Deathless: {\n    bonus: 1,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  Evolving: {\n    bonus: 1,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Poisoning: {\n    bonus: 1,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Necromancy,\n  },\n  Resonating: {\n    bonus: 1,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  SpellStoring: {\n    bonus: 1,\n    cl: 12,\n    available: { armor: true },\n    aura: Auras.Evocation,\n  },\n  SpellSink: {\n    bonus: 1,\n    cl: 6,\n    available: { armor: true, shield: true },\n    aura: Auras.Abjuration,\n  },\n  Stanching: {\n    bonus: 1,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  TerrainStriding: {\n    bonus: 1,\n    cl: 13,\n    available: { armor: true },\n    aura: Auras.Enchantment,\n  },\n  TrapWarding: {\n    bonus: 1,\n    cl: 5,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  VouchSafing: {\n    bonus: 1,\n    cl: 9,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  Warding: {\n    bonus: 1,\n    cl: 12,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  Withstanding: {\n    bonus: 1,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Enchantment,\n  },\n  Adamant: {\n    bonus: 2,\n    cl: 9,\n    available: { heavyArmor: true },\n    aura: Auras.Conjuration,\n  },\n  Bloodthirsty: {\n    bonus: 2,\n    cl: 7,\n    available: { lightArmor: true, mediumArmor: true },\n    aura: Auras.Enchantment,\n  },\n  Frosted: {\n    bonus: 2,\n    cl: 3,\n    available: { armor: true, shield: true },\n    aura: Auras.Transmutation,\n  },\n  GhostSpike: {\n    bonus: 2,\n    cl: 10,\n    available: { armor: true },\n    aura: Auras.Evocation,\n  },\n  Jarring: {\n    bonus: 2,\n    cl: 6,\n    available: { armor: true, shield: true },\n    aura: Auras.Evocation,\n  },\n  MindButtressing: {\n    bonus: 2,\n    cl: 12,\n    available: { mediumArmor: true, heavyArmor: true },\n    aura: Auras.Abjuration,\n  },\n  Phantasmal: {\n    bonus: 2,\n    cl: 7,\n    available: { lightArmor: true },\n    aura: \"misc\",\n  },\n  Rampaging: {\n    bonus: 2,\n    cl: 3,\n    available: { heavyArmor: true },\n    aura: \"misc\",\n  },\n  ShadowBlending: {\n    bonus: 2,\n    cl: 11,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  SpellDodging: {\n    bonus: 2,\n    cl: 4,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  Steaming: {\n    bonus: 2,\n    cl: 3,\n    available: { mediumArmor: true, heavyArmor: true },\n    aura: Auras.Evocation,\n  },\n  Volcanic: {\n    bonus: 2,\n    cl: 14,\n    available: { heavyArmor: true },\n    aura: Auras.Evocation,\n  },\n  ArrowCollecting: {\n    bonus: 3,\n    cl: 11,\n    available: { mediumArmor: true },\n    aura: \"misc\",\n  },\n  Brawling: {\n    bonus: 3,\n    cl: 5,\n    available: { lightArmor: true },\n    aura: Auras.Transmutation,\n  },\n  Cotraveling: {\n    bonus: 3,\n    cl: 14,\n    available: { armor: true },\n    aura: Auras.Conjuration,\n  },\n  Invulnerability: {\n    bonus: 3,\n    cl: 18,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  Sensing: {\n    bonus: 3,\n    cl: 14,\n    available: { armor: true },\n    aura: Auras.Divination,\n  },\n  Titanic: {\n    bonus: 3,\n    cl: 7,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Denying: {\n    bonus: 4,\n    cl: 13,\n    available: { armor: true },\n    aura: Auras.Abjuration,\n  },\n  DreadWing: {\n    bonus: 5,\n    cl: 15,\n    available: { armor: true, specific: [\"full plate\", \"hellknight plate\"] },\n    aura: Auras.Transmutation,\n  },\n  Unbowed: {\n    bonus: 5,\n    cl: 9,\n    available: { armor: true },\n    aura: \"misc\",\n  },\n  BuoyantShield: {\n    staticCost: 1_000,\n    cl: 5,\n    available: { shield: true },\n    aura: Auras.Transmutation,\n  },\n  Channeling: {\n    staticCost: 18_000,\n    cl: 8,\n    available: { shield: true },\n    aura: Auras.Conjuration,\n  },\n  Determination: {\n    staticCost: 30_000,\n    cl: 10,\n    available: { shield: true, armor: true },\n    aura: Auras.Conjuration,\n  },\n  EnergyResistance: {\n    staticCost: 18_000,\n    cl: 3,\n    available: { shield: true, armor: true },\n    aura: Auras.Abjuration,\n  },\n  GreaterEnergyResistance: {\n    staticCost: 66_000,\n    cl: 11,\n    available: { shield: true, armor: true },\n    aura: Auras.Abjuration,\n  },\n  Hosteling: {\n    staticCost: 7_500,\n    cl: 9,\n    available: { shield: true, armor: true },\n    aura: Auras.Conjuration,\n  },\n  ImprovedEnergyResistance: {\n    staticCost: 42_000,\n    cl: 7,\n    available: { shield: true, armor: true },\n    aura: Auras.Abjuration,\n  },\n  PoisonResistant: {\n    staticCost: 2_250,\n    cl: 7,\n    available: { shield: true, armor: true },\n    aura: Auras.Conjuration,\n  },\n  Radiant: {\n    staticCost: 7_500,\n    cl: 6,\n    available: { shield: true, armor: true },\n    aura: Auras.Evocation,\n  },\n  Rallying: {\n    staticCost: 5_000,\n    cl: 5,\n    available: { shield: true, armor: true },\n    aura: Auras.Abjuration,\n  },\n  UndeadControlling: {\n    staticCost: 49_000,\n    cl: 13,\n    available: { shield: true, armor: true },\n    aura: Auras.Necromancy,\n  },\n  WyrmsBreath: {\n    staticCost: 5_000,\n    cl: 5,\n    available: { shield: true },\n    aura: Auras.Evocation,\n  },\n  ArrowCatching: {\n    bonus: 1,\n    cl: 8,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  Assiduous: {\n    bonus: 1,\n    cl: 1,\n    available: { shield: true },\n    aura: \"misc\",\n  },\n  Bashing: {\n    bonus: 1,\n    cl: 8,\n    available: { shield: true },\n    aura: Auras.Transmutation,\n  },\n  Blinding: {\n    bonus: 1,\n    cl: 7,\n    available: { shield: true },\n    aura: Auras.Evocation,\n  },\n  Clangorous: {\n    bonus: 1,\n    cl: 7,\n    available: { shield: true, armor: true },\n    aura: Auras.Evocation,\n  },\n  Defiant: {\n    bonus: 1,\n    cl: 8,\n    hasSpecialTerm: true,\n    available: { shield: true, armor: true },\n    aura: Auras.Conjuration,\n  },\n  Folding: {\n    bonus: 1,\n    cl: 13,\n    available: { shield: true },\n    aura: \"misc\",\n  },\n  LightFortification: {\n    bonus: 1,\n    cl: 13,\n    available: { shield: true, armor: true },\n    aura: Auras.Abjuration,\n  },\n  Grinding: {\n    bonus: 1,\n    cl: 5,\n    available: { shield: true, armor: true },\n    aura: Auras.Transmutation,\n  },\n  Guarding: {\n    bonus: 1,\n    cl: 8,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  Heraldric: {\n    bonus: 1,\n    cl: 13,\n    available: { shield: true },\n    aura: Auras.Enchantment,\n  },\n  Impervious: {\n    bonus: 1,\n    cl: 7,\n    available: { shield: true, armor: true },\n    aura: Auras.Transmutation,\n  },\n  Mirrored: {\n    bonus: 1,\n    cl: 8,\n    available: { shield: true, armor: true },\n    aura: Auras.Abjuration,\n  },\n  Ramming: {\n    bonus: 1,\n    cl: 5,\n    available: { shield: true },\n    aura: Auras.Evocation,\n  },\n  Rebounding: {\n    bonus: 1,\n    cl: 5,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  Singing: {\n    bonus: 1,\n    cl: 10,\n    available: { shield: true },\n    aura: Auras.Evocation,\n  },\n  Spellrending: {\n    bonus: 1,\n    cl: 9,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  Animated: {\n    bonus: 2,\n    cl: 12,\n    available: { shield: true },\n    aura: Auras.Transmutation,\n  },\n  ArrowDeflection: {\n    bonus: 2,\n    cl: 5,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  GreaterGuarding: {\n    bonus: 2,\n    cl: 12,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  Jawbreaker: {\n    bonus: 2,\n    cl: 9,\n    available: { shield: true },\n    aura: Auras.Necromancy,\n  },\n  Mastering: {\n    bonus: 2,\n    cl: 13,\n    available: { shield: true },\n    aura: \"misc\",\n  },\n  Merging: {\n    bonus: 2,\n    cl: 10,\n    available: { shield: true },\n    aura: Auras.Transmutation,\n  },\n  SpellResistance13: {\n    bonus: 2,\n    cl: 15,\n    available: { armor: true, shield: true },\n    aura: Auras.Abjuration,\n  },\n  Weeping: {\n    bonus: 2,\n    cl: 10,\n    available: { shield: true },\n    aura: Auras.Enchantment,\n  },\n  Deflecting: {\n    bonus: 3,\n    cl: 13,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  ModerateFortification: {\n    bonus: 3,\n    cl: 13,\n    available: { armor: true, shield: true },\n    aura: Auras.Abjuration,\n  },\n  GhostTouch_: {\n    bonus: 1,\n    cl: 9,\n    available: { weapon: true },\n    aura: Auras.Conjuration,\n  },\n  GhostTouch: {\n    bonus: 3,\n    cl: 15,\n    available: { armor: true, shield: true },\n    aura: Auras.Transmutation,\n  },\n  SpellResistance15: {\n    bonus: 3,\n    cl: 15,\n    available: { armor: true, shield: true },\n    aura: Auras.Abjuration,\n  },\n  Wild: {\n    bonus: 3,\n    cl: 9,\n    available: { armor: true },\n    aura: Auras.Transmutation,\n  },\n  Bastion: {\n    bonus: 4,\n    cl: 15,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  SpellResistance17: {\n    bonus: 4,\n    cl: 15,\n    available: { armor: true, shield: true },\n    aura: Auras.Abjuration,\n  },\n  HeavyFortification: {\n    bonus: 5,\n    cl: 13,\n    available: { armor: true, shield: true },\n    aura: Auras.Abjuration,\n  },\n  Reflecting: {\n    bonus: 5,\n    cl: 14,\n    available: { shield: true },\n    aura: Auras.Abjuration,\n  },\n  SpellResistance19: {\n    bonus: 5,\n    cl: 15,\n    available: { armor: true, shield: true },\n    aura: Auras.Abjuration,\n  },\n};\n",
    "const sources = [\n  \"A(?:[AM]|A2|SoL|[CPR]G)\",\n  \"AP:?(?:CC|CoT|CotCT|JR|K|LoF|RotR|S[DS])\",\n  \"BotD[123]\",\n  \"BM\",\n  \"C(?:o[GS]|RB|C[TH]R|EoD)\",\n  \"D(?:E|ou?)G\",\n  \"D(?:HB|DR)\",\n  \"EoG\",\n  \"F[FG]\",\n  \"G(?:aM|MG|n?oG|ttRK)\",\n  \"H(?:uo?G|otJ|[AH])\",\n  \"IS(?:WG|[MPBGCR])\",\n  \"L(?:otLK|CoG)\",\n  \"M:?(?:AoS|CH?|CoGD|CotED?|CotRS|FoR|FStS|G?H|GoD|Mot(?:LG|FF)|M[MR]?|RotFQ|RPT|TotIM|WBG|WL)\",\n  \"NPCG\",\n  \"O(?:oG|LoP|[AO])\",\n  \"P(?:A|otIS|&P|FSG)\",\n  \"QGttE\",\n  \"R(?:G|oF)\",\n  \"S(?:tLC|D|oS)\",\n  \"T(?:EoG|G)\",\n  \"U(?:[CEMRIW]|SH)\",\n  \"(!STATISTICS)CS\",\n];\nexport default sources;\n",
    "const creatureTypes = [\n  \"aberration\",\n  \"animal\",\n  \"construct\",\n  \"dragon\",\n  \"fey\",\n  \"magical beast\",\n  \"monstrous humanoid\",\n  \"humanoid\",\n  \"ooze\",\n  \"outsider\",\n  \"plant\",\n  \"undead\",\n  \"vermin\",\n];\nexport default creatureTypes;\n",
    "const creatureSubTypes = [\n  \"adlet\",\n  \"aeon\",\n  \"aether\",\n  \"agathion\",\n  \"air\",\n  \"android\",\n  \"angel\",\n  \"aquatic\",\n  \"archon\",\n  \"astomoi\",\n  \"asura\",\n  \"augmented\",\n  \"azata\",\n  \"behemoth\",\n  \"blight\",\n  \"catfolk\",\n  \"changeling\",\n  \"chaotic\",\n  \"clockwork\",\n  \"cold\",\n  \"colossus\",\n  \"daemon\",\n  \"darkfolk\",\n  \"deepone\",\n  \"demodand\",\n  \"demon\",\n  \"derro\",\n  \"devil\",\n  \"div\",\n  \"dwarf\",\n  \"earth\",\n  \"elemental\",\n  \"elf\",\n  \"evil\",\n  \"extraplanar\",\n  \"fire\",\n  \"giant\",\n  \"gnome\",\n  \"goblinoid\",\n  \"good\",\n  \"gray\",\n  \"greatoldone\",\n  \"grippli\",\n  \"halfling\",\n  \"hive\",\n  \"human\",\n  \"incorporeal\",\n  \"inevitable\",\n  \"kaiju\",\n  \"kami\",\n  \"kasatha\",\n  \"kitsune\",\n  \"kyton\",\n  \"lawful\",\n  \"leshy\",\n  \"manasaputra\",\n  \"mortic\",\n  \"munavri\",\n  \"mythic\",\n  \"native\",\n  \"nightshade\",\n  \"oni\",\n  \"orc\",\n  \"phantom\",\n  \"protean\",\n  \"psychopomp\",\n  \"qlippoth\",\n  \"rakshasa\",\n  \"ratfolk\",\n  \"reptilian\",\n  \"robot\",\n  \"sahkil\",\n  \"samsaran\",\n  \"sasquatch\",\n  \"shapechanger\",\n  \"skinwalker\",\n  \"spawnofrovagug\",\n  \"swarm\",\n  \"troop\",\n  \"vanara\",\n  \"vishkanya\",\n  \"water\",\n  \"wayang\",\n  \"wildhunt\",\n];\nexport default creatureSubTypes;\n",
    "const itemModifications = [\n  // Weapon modifications\n  \"Brutally weighted\",\n  \"Dual-balanced\",\n  \"Jagged hooks?\",\n  \"Razor-Sharp\",\n  \"Serrated Edge\",\n  \"Tactically Adapted\",\n  \"Verstaille Design\",\n\n  // Armor modifications\n  \"Burnished\",\n  \"Deflecting\",\n  \"Double-plated\",\n  \"Jarring\",\n  \"Nimble\",\n  \"Razored\",\n  \"Slumbering\",\n  \"Throwing Shield\",\n  \"Vitalguard\",\n  \"With Armor Spikes?\",\n\n  // Other\n  \"Spiked(?! Chain(?:\\b|$)| Gauntlet)\",\n];\n\nexport default itemModifications;\n",
    "const immunities = {\n  construct: {\n    damage: [\"nonlethal\"],\n    conditions: [\n      \"mindAffecting\",\n      \"bleed\",\n      \"disease\",\n      \"deathEffects\",\n      \"paralyze\",\n      \"poison\",\n      \"sleep\",\n      \"stun\",\n      \"fatigue\",\n      \"exhausted\",\n      \"energyDrain\",\n    ],\n    custom: [\n      \"Necromancy Effects\",\n      \"Effects that require a Fort. save\",\n      \"Ability Damage\",\n      \"Ability Drain\",\n      \"Massive Damage\",\n    ],\n  },\n  dragon: {\n    conditions: [\"paralyze\", \"sleep\"],\n  },\n  ooze: {\n    damage: [\"precision\"],\n    condition: [\"mindAffecting\", \"poison\", \"sleep\", \"paralyze\", \"polymorph\", \"stun\"],\n    custom: [\n      \"Gaze Attacks\",\n      \"Visual Effects\",\n      \"Illusions\",\n      \"Attack forms that rely on sight\",\n      \"Flanking\",\n      \"Critical Hits\",\n    ],\n  },\n  plant: {\n    condition: [\"mindAffecting\", \"paralyze\", \"polymorph\", \"poison\", \"sleep\", \"stun\"],\n  },\n  undead: {\n    damage: [\"nonlethal\"],\n    condition: [\n      \"mindAffecting\",\n      \"bleed\",\n      \"deathEffects\",\n      \"disease\",\n      \"paralyze\",\n      \"poison\",\n      \"sleep\",\n      \"stun\",\n      \"exhausted\",\n      \"fatigue\",\n    ],\n    custom: [\n      \"Ability Drain\",\n      \"Energy Drain\",\n      \"Damage to phys. Ability Scores\",\n      \"Effects that require a Fort. save\",\n      \"Massive Damage\",\n      \"Raise Dead\",\n      \"Reincarnate\",\n    ],\n  },\n  vermin: {\n    condition: [\"mindAffecting\"],\n  },\n};\nexport default immunities;\n",
    "const sillyGear = {\n  \"sandals of elvenkind\": \"Boots of Elvenkind\",\n  \"sawtooth sabre\": \"Sawtoothed Sabre\",\n  \"resist (?:fire|cold|acid|electric(?:ity)?|sonic)\": \"Resist Energy\",\n  \"^backpack$\": \"Backpack, common\",\n  \"pale lavender ioun stone\": \"pale lavender ellipsoid ioun stone\",\n  \"robes of the archmagi\": \"robe of the archmagi\",\n  \"^ambrosia$\": \"Ambrosia (Vial)\",\n  \"^Rations \\\\((\\\\d+) days\\\\)$\": \"Trail Rations\",\n  \"Winter Blanket\": \"Blanket\",\n  \"spherewalker staff\": \"Spherewalker's Staff\",\n  \"coat of resistance\": \"Cloak of Resistance\",\n};\n\nexport default sillyGear;\n",
    "import { NaturalAttacks, WizardSchoolClasses } from \"./Content/index.js\";\n\n/**\n * @param {Array<string>|{[key: string]: string}} list        An item list to include in the regex.\n * @param {object} options                                    Regex configuration options\n * @param {boolean} [options.pluralize]                       Whether to pluralize the items in the list.\n * @param {boolean} [options.matchStart]                      Whether to match the start of the string.\n * @param {boolean} [options.matchEnd]                        Whether to match the end of the string.\n * @param {boolean} [options.wordBoundary]                    Whether to include word boundaries.\n * @param {boolean|string} [options.capture]                  Whether to capture the match, alternatively a string to name the capture group.\n * @param {string} [options.append]                           Text to append to the regex.\n * @param {string} [options.prepend]                          Text to prepend to the regex.\n * @param {string} [options.flags]                            Regular expression flags.\n * @param {boolean} [options.escape]                          Whether to escape the items in the list.\n * @param {string} [options.appendMatch]                      Text to append each item in the list.\n *\n * @returns {RegExp}                                          The final regular expression.\n */\nfunction basicAlterationRegex(list, options = {}) {\n  options = Object.assign(\n    {\n      pluralize: false,\n      matchStart: false,\n      matchEnd: false,\n      wordBoundary: true,\n      capture: true,\n      escape: true,\n      append: \"\",\n      prepend: \"\",\n      flags: \"gi\",\n      appendMatch: \"\",\n    },\n    options\n  );\n\n  if (!Array.isArray(list)) list = Object.values(list);\n  list = list\n    .filter((x, i, a) => a.indexOf(x) === i) // Unique only\n    .sort((a, b) => b.length - a.length) // Sort by length, desc\n    .map((x) => (options.escape ? escapeForRegex(x) : x)) // Escape regex characters\n    .map((x) => (options.appendMatch ? x + options.appendMatch : x)) // Escape regex characters\n    .filter((x) => x.length > 0); // Remove empty strings\n\n  return new RegExp(\n    (options.matchStart ? \"^\" : \"\") +\n      options.prepend +\n      (options.wordBoundary ? \"\\\\b\" : \"\") +\n      (options.capture ? (typeof options.capture === \"string\" ? `(?<${options.capture}>` : \"(\") : \"(?:\") +\n      (list.length ? list.join(options.pluralize ? \"s?|\" : \"|\") : \"_\") +\n      (options.pluralize ? \"s?\" : \"\") +\n      \")\" +\n      (options.wordBoundary ? \"\\\\b\" : \"\") +\n      options.append +\n      (options.matchEnd ? \"$\" : \"\"),\n    options.flags\n  );\n}\n\n/**\n * Escapes a given string for regex\n *\n * @param {string} string     String to escape\n * @returns {string} string     Escaped string\n */\nexport function escapeForRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n *\n * @param {boolean} includeExtras   Whether to include extra class information\n * @returns {RegExp} A regular expression.\n */\nexport function classesRegex(includeExtras = true) {\n  const possibleClasses = window.SBC.config.classes\n    .concat(window.SBC.config.prestigeClasses)\n    .concat(window.SBC.config.mythicPaths)\n    .concat(WizardSchoolClasses);\n\n  return basicAlterationRegex(possibleClasses, {\n    capture: \"class\",\n    prepend: includeExtras ? \"(?<exClass>Ex-)?\" : \"\",\n    append: includeExtras ? \"(\\\\s+of\\\\s+(?<deity>[a-z- ]+))?\\\\s*(?: \\\\((?<archetype>.*)\\\\))?\\\\s+(?<level>\\\\d+)\" : \"\",\n  });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function baseClassesRegex() {\n  return basicAlterationRegex(window.SBC.config.classes);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function prestigeClassesRegex() {\n  return basicAlterationRegex(window.SBC.config.prestigeClasses);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function wizardClassesRegex() {\n  return basicAlterationRegex(WizardSchoolClasses);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function mythicPathRegex() {\n  return basicAlterationRegex(window.SBC.config.mythicPaths);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function acTypesRegex() {\n  return basicAlterationRegex(window.SBC.config.armorBonusTypes);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n *\n * @param {boolean} [wholeWord] Whether to match whole words only, default is false.\n */\nexport function damageTypesRegex(wholeWord = false) {\n  const systemSupportedDamageTypes = Object.values(pf1.registry.damageTypes.getLabels())\n    .concat(Object.values(pf1.registry.materials.getLabels()))\n    .concat(Object.values(pf1.config.damageResistances));\n  return basicAlterationRegex(systemSupportedDamageTypes, wholeWord ? { matchStart: true, matchEnd: true } : {});\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function conditionTypesRegex() {\n  return basicAlterationRegex(pf1.config.conditionTypes);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function conditionRegistryTypesRegex() {\n  return basicAlterationRegex(pf1.registry.conditions.getLabels());\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function naturalAttacksRegex() {\n  // Natural Attack Pattern for finding attacks\n  const naturalAttackItems = window.SBC.config.naturalAttacks.concat(Object.keys(NaturalAttacks));\n  return basicAlterationRegex(naturalAttackItems, { pluralize: true, wordBoundary: false });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function materialsRegex() {\n  return basicAlterationRegex(pf1.registry.materials.contents.filter((mt) => mt.addon === false).map((mt) => mt.name));\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function materialsBasicRegex() {\n  return basicAlterationRegex(pf1.registry.materials.contents.filter((mt) => mt.basic).map((mt) => mt.name));\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function materialsNonBasicRegex() {\n  return basicAlterationRegex(\n    pf1.registry.materials.contents.filter((mt) => mt.addon === false && mt.basic === false).map((mt) => mt.name)\n  );\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function materialAddonsRegex() {\n  return basicAlterationRegex(pf1.registry.materials.contents.filter((mt) => mt.addon === true).map((mt) => mt.name));\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function skillsRegex() {\n  return basicAlterationRegex(pf1.config.skills, { wordBoundary: false });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function racialModifiersRegex() {\n  return basicAlterationRegex(pf1.config.skills, {\n    capture: \"name\",\n    prepend: \"\\\\+?(?<value>-?\\\\d*)\\\\s*\",\n    append: \"(?<context>.*)\",\n    flags: \"i\",\n    wordBoundary: false,\n  });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function parensMergeRegex() {\n  return /\\d+d\\d+|\\d+\\s?(?:hp|damage|minutes?)|[AD]C\\s?\\d+|\\d+\\s*(?:rounds)?\\/(?:day|week|month|year)|at[ -]will|constant|\\d+-ft|\\d+\\s*natural|(lesser|greater|minor|major)|[-+]?\\d/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function frequencyWithPeriodRegex() {\n  return /(?<uses>\\d+(?!\\d*,\\s*))\\s*(?<useTerm>.*?)?\\/(?<period>day|week|month|year)/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function languagesRegex() {\n  const systemSupportedLanguages = Object.values(pf1.config.languages).map((x) => x.toLowerCase());\n  return basicAlterationRegex(systemSupportedLanguages);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function supportedSpellsRegex() {\n  return /(potion|wand|scroll|oil)s?\\s+of\\s+(.+)/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function techColorRegex() {\n  return basicAlterationRegex(window.SBC.config.techColors, {\n    append: \"(?!\\\\s+Powder)\",\n  });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function techTierRegex() {\n  return basicAlterationRegex(window.SBC.config.techTiers, {\n    escape: false,\n  });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function quantityOfRegex() {\n  // TODO: There's probably more terms that we need to transform like this\n  return /^(Vial|Keg|Dose|Cup)s? of (.*)$/gi;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function magicalAbilitiesRegex() {\n  const magicAbilityKeys = Object.keys(window.SBC.config.magicalAbilities.Abilities).map((magicalAbilityKey) => {\n    return magicalAbilityKey\n      .replace(\"_\", \"\")\n      .replace(/([A-Z])/g, \" $1\")\n      .trim()\n      .replaceAll(\" \", \"[ -]?\");\n  });\n  const prefixes = window.SBC.config.magicalAbilities.Prefixes;\n\n  return basicAlterationRegex(magicAbilityKeys, {\n    escape: false,\n    // wordBoundary: false,\n    capture: \"ability\",\n    prepend: `(?<prefix>(?:${prefixes.join(\"|\")})\\\\s+)?`,\n    append: `(?<postfix>(?:\\\\s+\\\\(|,\\\\s+)(?:${prefixes.join(\"|\")})\\\\)?)?`,\n  });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function itemModificationsRegex() {\n  return basicAlterationRegex(window.SBC.config.itemModifications, { escape: false });\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function goldRegex() {\n  return /(?:(?<pp>\\d+)\\s*pp)?\\s*(?:(?<gp>\\d+)\\s*gp)?\\s*(?:(?<sp>\\d+)\\s*sp)?\\s*(?:(?<cp>\\d+)\\s*cp)?/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function specialAbilityTypesRegex() {\n  return /\\((--|S[UP]|EX)\\)/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function specialAbilityRegex() {\n  return /^(?<name>.+?)\\s*\\((?<type>--|S[UP]|EX)\\)\\s*(?<description>.+?)$/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function savesRegex() {\n  return /(?<type>Fort|Ref|Will)\\s*(?<value>[+-]?\\d+)/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function sizeRegex() {\n  return basicAlterationRegex(pf1.config.actorSizes);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function genderRegex() {\n  return /\\b(?:fe)?male\\b/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function alignmentRegex() {\n  return /^(Any Alignment|\\\\*A|[LNC][GE]|[LC]?N)\\b/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function creatureTypeRegex() {\n  return basicAlterationRegex(window.SBC.config.creatureTypes);\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function creatureTypeAndSizeRegex() {\n  return new RegExp(\n    \"\\\\b(?:\" +\n      Object.values(pf1.config.actorSizes).join(\"|\") +\n      \")\\\\b\\\\s*\\\\b(\" +\n      Object.values(window.SBC.config.creatureTypes).join(\".*|\") +\n      \")\\\\b\",\n    \"i\"\n  );\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function abilityDCregex() {\n  return /(?<type>Fortitude|Reflex|Will)?\\s*DC\\s*(?<dc>\\d+)?\\s*(?<effect>.*)?/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function abilityDamageRegex() {\n  return /(?<formula>\\d+d\\d+\\s*\\+?\\s*\\d*)\\s*(?<type>.*damage?)?\\s*(?<effect>.*)/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function abilityRangeRegex() {\n  return /(?<range>\\d+).*?ft.*\\s*(?<type>cone|ray|radius|diameter)/i;\n}\n\n/**\n * @returns {RegExp} A regular expression.\n */\nexport function fluffGearTermRegex() {\n  return basicAlterationRegex([\"battered\", \"ragged and torn\", \"tattered\"], {\n    matchStart: true,\n    wordBoundary: false,\n  });\n}\n",
    "import { sbcUtils } from \"../sbcUtils.js\";\nimport { sbcError } from \"../sbcError.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\nimport { escapeForRegex, parensMergeRegex } from \"../sbcRegex.js\";\n\n// Base class for specialized parsers\nexport class AbstractParser {\n  /**\n   * Create a new AbstractParser\n   *\n   * @param {sbcTypes.InputDialog} app  The SBC application\n   */\n  constructor(app) {\n    this.app = app;\n  }\n\n  /**\n   * The group that the parser belongs to\n   *\n   * @returns {string}  The parser group\n   */\n  get parserGroup() {\n    return \"Parser\";\n  }\n\n  /**\n   * The type of parser\n   *\n   * @returns {string}  The parser type\n   */\n  get parserType() {\n    return \"base\";\n  }\n\n  /**\n   * Parse a specific bit of content and process it onto an actor or item\n   *\n   * @param {string} _value       The value to parse\n   * @param {number} _line        The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   * @private\n   */\n  async _parse(_value, _line, _type) {\n    return true;\n  }\n\n  throwError(err, phraseKey, value, line, ...data) {\n    err && window.SBC.settings.getSetting(\"debug\") && console.error(err);\n    const errorMessage = sbcUtils.translate(phraseKey, {\n      value: value,\n      line: line,\n      ...data,\n    });\n    const error = new sbcError(sbcError.ERRORLEVELS.ERROR, this.parserGroup, errorMessage, line, value);\n    this.app.processData.errors.push(error);\n  }\n\n  logInfo(phraseKey, value, line, data) {\n    const infoMessage = sbcUtils.translate(phraseKey, {\n      value: value,\n      line: line,\n      ...data,\n    });\n    const info = new sbcError(sbcError.ERRORLEVELS.INFO, this.parserGroup, infoMessage, line, value);\n    this.app.processData.errors.push(info);\n  }\n\n  /**\n   * Throw a parser error\n   *\n   * @param {Error} err     The error that occurred\n   * @param {string} value  The value that caused the error\n   * @param {number} line   The line number\n   * @param {string} type   The type of value\n   * @internal\n   */\n  throwParseError(err, value, line, type) {\n    this.throwError(err, `parser.${this.parserType}.error`, value, line, type);\n  }\n\n  /**\n   * Parse a specific bit of content and process it onto an actor or item\n   * This is a generic method that should be overridden by any subclass\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} type         The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async parse(value, line, type = undefined) {\n    try {\n      sbcUtils.log(\n        sbcUtils.translate(`parser.${this.parserType}.status`, {\n          value: value,\n          line: line,\n          type: type,\n        })\n      );\n      return await this._parse(value, line, type);\n    } catch (err) {\n      this.throwParseError(err, value, line, type);\n      return false;\n    }\n  }\n\n  /**\n   * Split a string into an array of items, using commas as the delimiter\n   *  - Commas within parenthesis are ignored\n   *  - If splitGroups is true, it will split items in parentheses into separate items\n   *  - If splitGroups is false, it will keep items in parentheses together\n   *\n   * @param {string} input        The input string to split\n   * @param {boolean} splitGroups Whether to split items in parentheses into separate items\n   * @returns {Array<string>}     The array of items\n   * @example\n   * // Basic Usage\n   * splitText(\"Fireball, Lightning Bolt (3d6), Cure Wounds\") => [\"Fireball\", \"Lightning Bolt (3d6)\", \"Cure Wounds\"]\n   *\n   * @example\n   * // Split class feature sub-choices into separate items\n   * splitText(\"Sneak Attack +3d6, Rogue Talents (ambusher, trap spotter)\") => [\"Sneak Attack +3d6\", \"Rogue Talents (ambusher)\", \"Rogue Talents (trap spotter)\"]\n   *\n   * @example\n   * // Keep a spell's pieces together\n   * splitText(\"Fireball (DC15), Lightning Bolt (8d6, DC15)\", false) => [\"Fireball (DC15)\", \"Lightning Bolt (8d6, DC15)\"]\n   */\n  splitText(input, splitGroups = true) {\n    // Split the input string at commas, excluding commas in parentheses, and return an array of the items\n    let items = [];\n\n    // Remove Commas in large Numbers, e.g. 3,000 GP --> 3000 GP\n    let tempInput = input.replace(/(\\d)(,)(\\d)/g, \"$1$3\").trim();\n\n    // Check if there are any commas or semicolons\n    if (tempInput.search(/[,;]/g) === -1) {\n      // When there is only one item, split at the first closing bracket and put it into the array\n      items = tempInput.replace(/\\)\\s/, \");\").split(/;/);\n    }\n    // Check if there are parenthesis including commas in the input\n    else if (tempInput.match(/([^,;]+\\([^(]+?[,;][^(]+?\\))+?/gi) === null) {\n      // If there are no parenthesis with commas, just split at commas/semicolons\n      items = tempInput.split(/[,;]/g);\n    } else {\n      // Get the input with parenthesis and commas inside the parenthesis\n      let itemsWithCommasInParenthesis = tempInput.match(/([^,;]+\\([^(]+?[,;][^(]+?\\)[^,]*)+?/gi);\n      // let itemsWithCommasInParenthesis = tempInput.match(\n      //   /([^,;]+\\((?:[^[\\]()]*|\\[[^\\]]*\\])*?[,;](?:[^[\\]()]*|\\[[^\\]]*\\])*?\\)[^,]*)+?/gi\n      // );\n      let itemsWithCommasInParenthesisKeys = Object.keys(itemsWithCommasInParenthesis);\n\n      for (let i = 0; i < itemsWithCommasInParenthesisKeys.length; i++) {\n        let tempKey = itemsWithCommasInParenthesisKeys[i];\n        let tempItem = itemsWithCommasInParenthesis[tempKey].trim();\n\n        if (splitGroups) {\n          const re = /^(?<name>.*?)(?:\\s\\((?<parens>.*)\\)(?<bonus>.*))?$/g.exec(tempItem);\n          const { name, parens, bonus } = re.groups;\n\n          if (\n            [\"change shape\", \"witch's familiar\", \"hex\", \"hexes\", \"bardic performances\", \"rogue talents\"].includes(\n              name.toLowerCase()\n            )\n          ) {\n            items.push(tempItem);\n          } else {\n            let parensList = parens.split(\", \");\n            let matchCount = 0;\n            for (let i = 1; i < parensList.length; i++) {\n              let el = parensList[i].trim();\n              if (!parensMergeRegex().test(el)) {\n                matchCount = 0;\n                continue;\n              }\n\n              const newEl = (parensList[i - ++matchCount] + `, ${el}`).replace(/,\\s*,/g, \",\");\n              parensList[i - matchCount] = newEl;\n              parensList[i] = \"\";\n            }\n            parensList = parensList.filter((el) => el !== \"\");\n\n            parensList.forEach((subItem) => {\n              subItem = subItem.trim();\n\n              subItem = `${name} (${subItem})${bonus}`;\n\n              items.push(subItem);\n            });\n          }\n        } else {\n          items.push(tempItem);\n        }\n\n        let patternTempItem = new RegExp(escapeForRegex(tempItem), \"i\");\n\n        tempInput = tempInput.replace(patternTempItem, \"\").replace(/,\\s*,/, \",\").replace(/^,/, \"\").trim();\n      }\n\n      // Add any items without parenthesis back into the \"items\"-array\n      let itemsWithoutParenthesis = [];\n\n      if (tempInput !== \"\") {\n        itemsWithoutParenthesis = tempInput\n          .replace(/,\\s*,/, \",\")\n          .replace(/[;,]\\s*$/, \"\")\n          .split(/[,;]/g);\n      }\n\n      if (itemsWithoutParenthesis.length > 0) {\n        //items = items.concat(...itemsWithoutParenthesis)\n        for (let i = 0; i < itemsWithoutParenthesis.length; i++) {\n          itemsWithoutParenthesis[i] = itemsWithoutParenthesis[i].trim();\n        }\n\n        items = itemsWithoutParenthesis.concat(...items);\n      }\n    }\n\n    return items.map((item) => item.trim());\n  }\n\n  /**\n   * Fix the split group, starting from the end of the array\n   * - If the previous item starts with a +, add the current item to the previous item\n   * - If the current item does not start with a +, return the current item\n   * - Filter out any empty items\n   * - Reverse the array to the original order and return it\n   *\n   * @param {Array<string>} input The array of items to fix\n   * @returns {Array<string>}     The fixed array of items\n   */\n  fixSplitGroup(input) {\n    const reversedInput = input.reverse();\n    return reversedInput\n      .map((element, index) => {\n        if (index > 0 && reversedInput[index - 1].startsWith(\"+\")) return `${element} ${reversedInput[index - 1]}`;\n        if (!element.startsWith(\"+\")) return element;\n      })\n      .filter((element) => !!element)\n      .reverse();\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\nimport {\n  abilityDamageRegex,\n  abilityDCregex,\n  abilityRangeRegex,\n  escapeForRegex,\n  frequencyWithPeriodRegex,\n} from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n/**\n * EntityParser is a class that parses entities of a given type\n * mainly used for feats and abilities\n *\n * @augments AbstractParser\n */\nexport default class EntityParser extends AbstractParser {\n  // noinspection JSCheckFunctionSignatures\n  /**\n   * Parses the given value and creates entities for it\n   *\n   * @param {string} value              The value to parse\n   * @param {number} line               The line number\n   * @param {string} pack               The pack to search in\n   * @param {string} type               The type of the entity\n   * @param {string} subtype            The subtype of the entity\n   * @param {boolean} processClusters   Whether to process clusters\n   * @returns {Promise<[boolean, string[]]>}        Always true, unless an error occurs\n   */\n  async parse(value, line, pack, type = null, subtype = null, processClusters = true) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n    sbcUtils.log(sbcUtils.translate(\"parser.entity.status\", { value, pack }));\n\n    let logEntities = [];\n    try {\n      let compendium = [];\n      if (typeof pack === \"string\") {\n        compendium.push(\"pf1.\" + pack);\n      } else {\n        pack.forEach((element) => {\n          compendium.push(\"pf1.\" + element);\n        });\n      }\n\n      let array = this.splitText(value, processClusters);\n      array = this.fixSplitGroup(array);\n\n      for (let i = 0; i < array.length; i++) {\n        let input = array[i].trim().replaceAll(/\\*/g, \"\").trim();\n\n        const frequencyMatch = frequencyWithPeriodRegex().exec(input);\n        if (frequencyMatch) {\n          input = input.replace(` ${frequencyMatch[0]}`, \"\");\n          if (input.indexOf(\"(\")) {\n            input = input.replace(\"(\", `(${frequencyMatch[0]}, `).replace(/,\\s\\)/g, \")\");\n          } else {\n            input += ` (${frequencyMatch[0]})`;\n          }\n        }\n\n        // Catch instances of a stray ')' at the end of the input\n        if (/(?!\\()\\)$/.test(input)) {\n          input = input.replace(/\\)$/, \"\");\n        }\n        // Catch instances of a stray '(' in the input\n        if (/\\((?!\\))/.test(input)) {\n          input += \")\";\n        }\n        input = input.replace(/\\[/g, \"(\").replace(/]/g, \")\").replaceAll(/,\\s+,/g, \",\");\n        if (/sneak attack \\+\\d+d\\d+ plus \\d+ bleed/i.test(input)) {\n          input = input.replace(/ plus \\d+ bleed/i, \"\");\n        }\n\n        let inputSeparated = input.split(/\\s/);\n        console.log(`Looking at ${input}.`);\n\n        if (/\\+?\\d+(d\\d+)?/.test(inputSeparated[inputSeparated.length - 1])) {\n          inputSeparated.splice(inputSeparated.length - 1, 1);\n        }\n\n        if (type === \"feat\") {\n          input.replace(/B$/, \"\");\n          if (input.endsWith(\"M\")) {\n            input = input.substring(0, input.length - 1);\n            const mythicName = `${input} (Mythic)`;\n\n            // Check if the mythic version is already in the array, otherwise add it\n            if (!array.find((f) => f === mythicName)) array.push(mythicName);\n\n            // If the non-mythic version has already been processed, skip this one\n            if (array.slice(0, Math.max(0, i - 1)).find((f) => f === input)) continue;\n          } else {\n            // const mythicMatch = input.match(/(\\w+)M\\b\\s*\\(.*(?!Mythic)\\)/gi);\n            const mythicMatch = input.match(/(.*)M \\((.*)\\)/);\n            if (mythicMatch) {\n              input = `${mythicMatch[1]} (${mythicMatch[2]})`;\n              const mythicName = `${mythicMatch[1]} (Mythic) (${mythicMatch[2]})`;\n\n              // Check if the mythic version is already in the array, otherwise add it\n              if (!array.find((f) => f === mythicName)) array.push(mythicName);\n\n              // If the non-mythic version has already been processed, skip this one\n              if (array.slice(0, Math.max(0, i - 1)).find((f) => f === mythicMatch[1])) continue;\n            }\n          }\n        }\n\n        let shortName = sbcUtils\n          .parseSubtext(`${input.replace(/\\+*\\d+$/g, \"\").trim()}`)[0]\n          .replace(/(\\d+[ -]ft\\.$)/i, \"\")\n          .trim();\n        let altName = `${inputSeparated.join(\" \").trim()}`;\n        let altName2 = `${input.match(/\\((.*)\\)/) ? input.match(/\\((.*)\\)/)[1] : \"\"}`;\n        if (frequencyMatch) {\n          altName = altName.replace(frequencyMatch[0], \"\").replace(/,\\s*/, \"\").trim();\n          altName2 = altName2.replace(frequencyMatch[0], \"\").replace(/,\\s*/, \"\").trim();\n        }\n        let altName3 = altName2\n          .replace(/(\\+?\\d+?)$/, \"\")\n          .trim()\n          .replace(/^(.*?action;)/i, \"\")\n          .trim();\n\n        if (altName2.match(/^Mythic\\) \\(/i)) {\n          shortName += \" (Mythic)\";\n        }\n\n        let searchEntity = {\n          search: new Set(), // The search strings\n          type: pack,\n          item: input,\n        };\n        searchEntity.search = sbcUtils.createSearchSet([altName3, altName2, altName, input, shortName], true);\n\n        if (/channel\\s*(positive|negative)\\s*energy/i.test(input)) {\n          searchEntity.search.add(\"channel energy\");\n        }\n\n        // If the input is found in one of the compendiums, generate an entity from that\n        /** @type {import (\"../../../pf1/module/documents/item/item-pf.mjs\").ItemPF} */\n        let entity = null;\n        if (typeof type !== \"string\") {\n          entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n            itemTypes: type,\n            itemSubTypes: Array.isArray(subtype) ? subtype : [subtype],\n            classes: this.app.processData.characterData.classes,\n            race: this.app.processData.characterData.race,\n          });\n\n          if (!entity) {\n            entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n              itemTypes: type,\n              itemSubTypes: [\"classFeat\", \"misc\"],\n              classes: this.app.processData.characterData.classes,\n              race: this.app.processData.characterData.race,\n            });\n          }\n        } else {\n          entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n            itemType: type,\n            itemSubTypes: Array.isArray(subtype) ? subtype : [subtype],\n            classes: this.app.processData.characterData.classes,\n            race: this.app.processData.characterData.race,\n          });\n        }\n\n        let name = (entity?.name || input).capitalize();\n        let subText = sbcUtils.parseSubtext(input);\n        let subBase = subText[0];\n        let subInput = subText[1]?.replace(/^(.*?action;)/i, \"\").trim();\n        let subInput2 = subInput?.replace(/(\\+?\\d+?)$/, \"\").trim();\n        let quantity = subText[1]?.match(/(?:^|,)\\s*(\\d+)\\s*(?:,|$)/);\n        if (quantity) quantity = quantity[1];\n        else quantity = 1;\n\n        if (entity !== null) {\n          if (!subInput) {\n            await entity.updateSource({ name: sbcUtils.capitalize(input) });\n          } else if (\n            (subInput &&\n              new RegExp(`(^${escapeForRegex(subInput)}|^${escapeForRegex(subInput2)})`, \"i\").test(entity.name) ===\n                false) ||\n            shortName === \"weapon training\"\n          ) {\n            await entity.updateSource({ name: sbcUtils.capitalize(subBase + (subInput ? ` (${subInput})` : \"\")) });\n          } else if (\n            subInput &&\n            entity.name !== sbcUtils.capitalize(subInput) &&\n            entity.name !== sbcUtils.capitalize(subInput2)\n          ) {\n            await entity.updateSource({ name: sbcUtils.capitalize(input.trim()) });\n          }\n\n          if (/\\*$/g.test(input)) {\n            await entity.updateSource({ name: entity.name + \"*\" });\n          }\n\n          await sbcUtils.addAssociatedClass(entity, window.SBC.actor.itemTypes.class);\n        } else {\n          if (typeof pack === \"object\") {\n            switch (pack[0]) {\n              case \"monster-abilities\":\n                Object.assign(searchEntity, {\n                  name: sbcUtils.translate(\"parser.entity.placeholderSpecialAbilityName\", { input }),\n                  type: \"misc\",\n                  desc: sbcUtils.translate(\"parser.entity.placeholderSpecialAbilityDescription\"),\n                });\n                break;\n\n              case \"special-attacks\":\n                Object.assign(searchEntity, {\n                  name: sbcUtils.translate(\"parser.entity.placeholderSpecialAttackName\", { input }),\n                  type: \"attack\",\n                  desc: sbcUtils.translate(\"parser.entity.placeholderSpecialAttackDescription\"),\n                });\n                break;\n            }\n          }\n\n          if (searchEntity.type === \"class-abilities\" || searchEntity.type === \"classFeat\") searchEntity.type = \"misc\";\n          entity = await sbcUtils.generatePlaceholderEntity(searchEntity, line);\n        }\n\n        if (quantity > 1) {\n          let entityName = entity.name;\n          entityName = entityName\n            .replace(/(?<![+-]\\s*\\d*\\s*|DC\\s*)\\b(\\d+)\\b(?!\\s*d\\s*\\d*\\s*[+-])/i, \"\")\n            .replace(/\\(\\s*\\)/, \"\")\n            .trim();\n\n          await entity.updateSource({ name: entityName });\n        }\n\n        let [_a, resultItem, foundName] = [null, null, name + (subInput ? ` (${subInput})` : \"\")];\n        // Check if the entity is already in the actor\n        // If so, update the name\n        // If not, create it\n        if (\n          (typeof pack === \"string\" && (pack === \"class-abilities\" || pack === \"monster-abilities\")) ||\n          (typeof pack === \"object\" && pack.length > 0)\n        ) {\n          let foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, \"feat\", \"classFeat\", foundName, entity);\n\n          if (!foundItem) {\n            foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, \"feat\", null, foundName, entity);\n          }\n\n          if (foundItem && !pack.includes(\"special-attacks\")) {\n            if (\n              (subInput &&\n                new RegExp(`(^${escapeForRegex(subInput)}|^${escapeForRegex(subInput2)})`, \"i\").test(foundItem.name) ===\n                  false) ||\n              (!subInput && new RegExp(`(^${escapeForRegex(subBase)})`, \"i\").test(foundItem.name) === false)\n            ) {\n              await foundItem.update({\n                name: sbcUtils.capitalize(input),\n              });\n            } else if (subInput && subInput !== subInput2 && foundItem.name.toLowerCase() === subInput2.toLowerCase()) {\n              await foundItem.update({\n                name: sbcUtils.capitalize(subInput),\n              });\n            }\n            resultItem = foundItem;\n          } else {\n            [_a, resultItem] = await createItem(entity);\n\n            if (quantity > 1) {\n              for (let i = 1; i < quantity; i++) {\n                await createItem(entity);\n              }\n            }\n          }\n        } else {\n          let foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, type, subtype, foundName, entity);\n\n          if (!foundItem) {\n            [_a, resultItem] = await createItem(entity);\n\n            if (quantity > 1) {\n              for (let i = 1; i < quantity; i++) {\n                await createItem(entity);\n              }\n            }\n          } else resultItem = foundItem;\n        }\n\n        if (resultItem) {\n          let subText = sbcUtils.parseSubtext(input);\n          let nameRegex = new RegExp(`(^${escapeForRegex(resultItem.name)})`, \"i\");\n          let nameMatch = nameRegex.test(input);\n          if (nameMatch === false) {\n            subText[0] = resultItem.name.replace(/^Special (.*?):/, \"\").trim();\n            subText[1] = \"\";\n\n            await resultItem.update({ name: subText[0] + (subText[1] ? ` (${subText[1]})` : \"\") });\n          }\n\n          if (quantity > 1) {\n            let entityName = subText[1];\n            entityName = entityName\n              .replace(/(?<![+-]\\s*\\d*\\s*|DC\\s*)\\b(\\d+)\\b(?!\\s*d\\s*\\d*\\s*[+-])[,)]?/i, \"\")\n              .replace(/\\(\\s*\\)/, \"\")\n              .trim();\n\n            subText[1] = entityName;\n          }\n\n          let subName = subText[1];\n          let subParts = subName?.split(/[;,]\\s?/);\n\n          if (subParts) {\n            let entityMods = {\n              attack: null,\n              damageFormula: null,\n              damageType: null,\n              damageEffect: [],\n              saveDC: null,\n              saveType: null,\n              saveEffect: null,\n              templateRange: null,\n              templateType: null,\n              uses: null,\n              usesPeriod: null,\n            };\n\n            /** @type {RegExpMatchArray} */\n            let regexMatch = null;\n            subParts.forEach((part) => {\n              // Check for damage\n              if ((regexMatch = part.match(abilityDamageRegex())) !== null && entityMods.damageFormula === null) {\n                entityMods.damageFormula = regexMatch.groups.formula;\n                entityMods.damageType = regexMatch.groups.type?.replace(\" damage\", \"\").trim();\n                entityMods.damageEffect.push(regexMatch.groups.effect);\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for attack bonus\n              else if (/([+|-]\\d+)/.test(part)) {\n                entityMods.attack = part.match(/([+|-]\\d+)/)[0].replace(\"+\", \"\");\n              }\n              // Check for saving throw data\n              else if ((regexMatch = part.match(abilityDCregex())) !== null && entityMods.saveDC === null) {\n                entityMods.saveDC = regexMatch.groups.dc;\n                entityMods.saveType = regexMatch.groups.type;\n                entityMods.saveEffect = regexMatch.groups.effect;\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for frequency uses\n              else if ((regexMatch = part.match(frequencyWithPeriodRegex())) !== null) {\n                entityMods.uses = regexMatch.groups.uses;\n                entityMods.usesPeriod = regexMatch.groups.period;\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for template range and type\n              else if ((regexMatch = part.match(abilityRangeRegex())) !== null) {\n                entityMods.templateRange = regexMatch.groups.range;\n                entityMods.templateType = regexMatch.groups.type;\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for useable restrictions (like breath weapon)\n              else if (part.match(/useable/i)) {\n                // Skip these, as they're usually already included.\n                entityMods.damageEffect.push(part);\n                subName = subName.replace(part, \"\").trim();\n              }\n            });\n\n            subName = subName.replace(/^\\s*,|,\\s*$/g, \"\").trim();\n            subParts = subName?.split(/[;,]\\s?/);\n\n            if (subParts.length > 0 && subParts[0] !== \"\") subParts = subParts.map((word) => sbcUtils.capitalize(word));\n            else subParts = null;\n\n            const updatedActions = [];\n            if (Object.keys(entityMods).length > 0 && resultItem.actions.size > 0) {\n              await sbcUtils.runParallelOps(\n                resultItem.actions.contents,\n                async (content, _index, updatedActions) => {\n                  let action = resultItem.actions.get(content.id);\n\n                  let updates = {};\n                  // Effect notes\n                  if (entityMods.damageEffect.length > 0) {\n                    /** @type {string[]} */\n                    let effectNotes = action.notes.effect ?? [];\n                    effectNotes = effectNotes.concat(entityMods.damageEffect);\n\n                    updates[\"notes.effect\"] = effectNotes;\n                    subName = subName.replace(entityMods.damageEffect.join(\"\"), \"\").trim();\n                  }\n                  // Damage formula and type\n                  if (entityMods.damageFormula && action.damage.parts.length > 0) {\n                    let damageType = action.damage.parts[0].types;\n                    const isDamageType = pf1.registry.damageTypes.get(entityMods.damageType) !== undefined;\n                    if (!isDamageType) {\n                      damageType.values = [];\n                      damageType.custom = entityMods.damageType ?? \"\";\n                    } else {\n                      damageType.values = [entityMods.damageType];\n                      damageType.custom = \"\";\n                    }\n\n                    const comparisonFormula = (\n                      await sbcUtils.processFormula(action.damage.parts[0].formula, window.SBC.actor, resultItem)\n                    ).formula;\n                    if (comparisonFormula !== entityMods.damageFormula) {\n                      updates[\"damage.parts\"] = [\n                        {\n                          formula: entityMods.damageFormula,\n                          type: damageType,\n                        },\n                      ];\n                    }\n                  }\n                  // Attack bonus\n                  if (\n                    entityMods.attack &&\n                    [\"spellsave\", \"save\", \"heal\", \"other\"].includes(action.actionType) === false\n                  ) {\n                    updates[\"attackBonus\"] = entityMods.attack;\n                  }\n                  // If the action has a saving throw, process our modifiers to save data.\n                  if (action.save.dc) {\n                    // Save DC\n                    if (entityMods.saveDC) {\n                      const comparisonFormula = (\n                        await sbcUtils.processFormula(action.save.dc, window.SBC.actor, resultItem)\n                      ).total;\n                      if (comparisonFormula !== entityMods.saveDC) {\n                        const difference = entityMods.saveDC - comparisonFormula;\n                        if (+difference > 0) updates[\"save.dc\"] = action.save.dc + ` + ${+difference}`;\n                      }\n                    }\n                    // Save Type\n                    if (entityMods.saveType) {\n                      switch (entityMods.saveType) {\n                        case \"Fortitude\":\n                          updates[\"save.type\"] = \"fort\";\n                          break;\n                        case \"Reflex\":\n                          updates[\"save.type\"] = \"ref\";\n                          break;\n                        case \"Will\":\n                          updates[\"save.type\"] = \"will\";\n                          break;\n                        default:\n                          updates[\"save.type\"] = null;\n                          break;\n                      }\n                    }\n                    // Save Description\n                    if (entityMods.saveEffect) {\n                      updates[\"save.description\"] =\n                        (entityMods.saveType ? `${entityMods.saveType} ` : \"\") + entityMods.saveEffect;\n                    }\n                  }\n                  // Template range\n                  if (entityMods.templateRange) {\n                    updates[\"measureTemplate.size\"] = entityMods.templateRange;\n                  }\n                  // Template type\n                  if (entityMods.templateType) {\n                    switch (entityMods.templateType) {\n                      case \"cone\":\n                        updates[\"measureTemplate.type\"] = \"cone\";\n                        break;\n                      case \"ray\":\n                        updates[\"measureTemplate.type\"] = \"ray\";\n                        break;\n                      default: // Anything else should just be a circle\n                        updates[\"measureTemplate.type\"] = \"circle\";\n                        break;\n                    }\n                  }\n\n                  if (Object.keys(updates).length > 0) {\n                    await action.update(updates);\n                    updatedActions.push(action);\n                  }\n                },\n                [updatedActions]\n              );\n            }\n            await resultItem.update({ \"system.actions\": updatedActions });\n\n            if (entityMods.uses) {\n              const comparisonFormula = resultItem.system.uses.maxFormula\n                ? (await sbcUtils.processFormula(resultItem.system.uses.maxFormula, window.SBC.actor, resultItem)).total\n                : 0;\n              if (comparisonFormula !== entityMods.uses) {\n                const currentUses = resultItem.system.uses.maxFormula;\n                const difference = (entityMods.uses - comparisonFormula).toString();\n                let usesPeriod = resultItem.system.uses.per ? resultItem.system.uses.per : \"charges\";\n                switch (usesPeriod) {\n                  case \"round\":\n                    usesPeriod = \"round\";\n                    break;\n                  case \"hour\":\n                    usesPeriod = \"hour\";\n                    break;\n                  case \"day\":\n                    usesPeriod = \"day\";\n                    break;\n                  case \"week\":\n                    usesPeriod = \"week\";\n                    break;\n                  default:\n                    break;\n                }\n\n                let updates = {\n                  \"system.uses.maxFormula\": currentUses\n                    ? +difference > 0\n                      ? currentUses + ` + ${+difference}`\n                      : currentUses\n                    : difference,\n                  \"system.uses.per\": usesPeriod,\n                  \"system.uses.value\": resultItem.system.uses.value + +difference,\n                };\n\n                if (resultItem.actions.size === 0) {\n                  const defaultActionData = new pf1.components.ItemAction().toObject(undefined, false);\n                  let actionData = {\n                    ...defaultActionData,\n                    name: game.i18n.localize(\"PF1.Use\"),\n                  };\n\n                  //let action = await resultItem.createEmbeddedEntity(\"OwnedItem\", actionData);\n                  updates[\"system.actions\"] = [actionData];\n                }\n\n                await resultItem.update(updates);\n\n                subName = subName\n                  .replace(/(\\d+)\\/(day|week|month|year)/i, \"\")\n                  .trim()\n                  .replace(/^,|,$/g, \"\")\n                  .trim();\n                subParts = subName?.split(/[;,]\\s?/) ?? [];\n\n                if (subParts.length > 0 && subParts[0] !== \"\")\n                  subParts = subParts.map((word) => sbcUtils.capitalize(word));\n                else subParts = null;\n\n                await resultItem.update({\n                  name: sbcUtils.capitalize(subText[0]) + (subParts?.length > 0 ? ` (${subParts.join(\", \")})` : \"\"),\n                });\n              }\n            }\n          }\n\n          if (altName2.match(/^Mythic\\) \\(/i)) {\n            const index = altName2.indexOf(\"(\");\n            const part = altName2.substring(index + 1).replace(\")\", \"\");\n            subParts?.push(part);\n          }\n\n          if (quantity > 1) {\n            if (subParts) subParts.unshift(quantity);\n            else subParts = [quantity];\n          }\n\n          logEntities.push({\n            name: subText[0],\n            kind: resultItem.system.abilityType,\n            description: resultItem.system.description.value,\n            subParts: subParts,\n          });\n        }\n        // Check for Weapon Finesse and set a flag accordingly\n        if (input.toLowerCase() === \"weapon finesse\" && pack === \"feats\")\n          this.app.processData.flags.hasWeaponFinesse = true;\n      }\n\n      // entities were created successfully\n      return [true, logEntities];\n    } catch (err) {\n      this.throwError(err, \"parser.entity.error\", value, line, { type });\n      return [false, []];\n    }\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { parseValueToPath } from \"../../sbcParser.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\n/**\n * NotesParser is a class that writes a given value into all\n * fields defined in parserMapping\n *\n * @augments AbstractParser\n */\nexport default class NotesParser extends AbstractParser {\n  /**\n   * Parses values into a child of this.app.processData.notes, which gets read when creating the styled preview statblock\n   *\n   * @param {sbcTypes.InputDialog} app The InputDialog instance.\n   * @param {Array.<string>} targetField Foundry Actor's field where this is pointing to.\n   */\n  constructor(app, targetField) {\n    super(app);\n\n    if (!targetField) {\n      throw Error(sbcUtils.translate(\"parser.errors.missingArgument\", { arg: \"targetField\" }));\n    }\n    this.targetField = targetField;\n  }\n\n  // noinspection JSCheckFunctionSignatures: This is an intentional override of the base signature\n  /**\n   * @param {string|number} value The value to parse.\n   * @param {number} line The line where the parsing is occurring.\n   * @returns {Promise.<boolean>} `true` if correctly parsed.\n   */\n  async parse(value, line) {\n    if (value === undefined) {\n      throw Error(sbcUtils.translate(\"parser.errors.missingArgument\", { arg: \"value\" }));\n    }\n    if (line === undefined) {\n      throw Error(sbcUtils.translate(\"parser.errors.missingArgument\", { arg: \"line\" }));\n    }\n\n    sbcUtils.log(\n      sbcUtils.translate(\"parser.notes.status\", {\n        value: value,\n        targetField: this.targetField,\n      })\n    );\n    this.app.processData.notes[value] = value;\n\n    try {\n      for (const field of this.targetField) {\n        await parseValueToPath(this.app.processData.notes, field, value);\n      }\n      return true;\n    } catch (err) {\n      this.throwError(err, \"parser.notes.error\", value, line, { targetField: this.targetField });\n      return false;\n    }\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { parseValueToDocPath } from \"../../sbcParser.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\n/**\n * SimpleParser is a class that writes a given value into all\n * fields defined in parserMapping\n *\n * @augments AbstractParser\n */\nexport default class SimpleParser extends AbstractParser {\n  /**\n   * Writes a given value into all fields defined in parserMapping\n   *\n   * @param {sbcTypes.InputDialog} app The InputDialog instance.\n   * @param {Array.<string>} targetFields Foundry Actor's fields where this is pointing to.\n   * @param {\"number\"|\"string\"} supportedType The type of data this value is.\n   * @throws {Error} If the 'targetFields' or 'supportedType' arguments are missing.\n   */\n  constructor(app, targetFields, supportedType) {\n    super(app);\n\n    if (!targetFields) {\n      throw new Error(sbcUtils.translate(\"parser.simple.missingArgument\", { arg: \"targetFields\" }));\n    }\n    this.targetFields = targetFields;\n\n    if (!supportedType) {\n      throw new Error(sbcUtils.translate(\"parser.simple.missingArgument\", { arg: \"supportedType\" }));\n    }\n    if (![\"number\", \"string\"].includes(supportedType)) {\n      throw new Error(sbcUtils.translate(\"parser.simple.invalidArgumentType\"));\n    }\n    this.supportedType = supportedType;\n  }\n\n  /**\n   *\n   * @param {string|number} value The value to parse.\n   * @param {number} line The line where the parsing is occurring.\n   * @param {string} _type The type of the value.\n   * @returns {Promise.<boolean>} `true` if correctly parsed.\n   */\n  async parse(value, line, _type = undefined) {\n    if (value === undefined) {\n      throw new Error(sbcUtils.translate(\"parser.simple.missingArgument\", { arg: \"value\" }));\n    }\n    if (line === undefined) {\n      throw new Error(sbcUtils.translate(\"parser.simple.missingArgument\", { arg: \"line\" }));\n    }\n    if (value === \"\") {\n      return false;\n    }\n\n    sbcUtils.log(\n      sbcUtils.translate(\"parser.simple.status\", { value: value, targetFields: this.targetFields.join(\", \") })\n    );\n    // Check if the given value is one of the supported ones\n    if (typeof value === this.supportedType || value === \"NaN\") {\n      try {\n        for (const field of this.targetFields) {\n          await parseValueToDocPath(window.SBC.actor, field, value === \"NaN\" ? null : value);\n        }\n        return true;\n      } catch (err) {\n        this.throwError(err, \"parser.simple.error\", value, line, { targetFields: this.targetFields.join(\", \") });\n        return false;\n      }\n    } else {\n      this.throwError(undefined, \"parser.simple.inputNotOfSupportedType\", value, line, {\n        supportedType: this.supportedType,\n      });\n      return false;\n    }\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\nimport {\n  abilityDamageRegex,\n  abilityDCregex,\n  abilityRangeRegex,\n  escapeForRegex,\n  frequencyWithPeriodRegex,\n} from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n/**\n * EntityParser is a class that parses entities of a given type\n * mainly used for feats and abilities\n *\n * @augments AbstractParser\n */\nexport default class SplitEntityParser extends AbstractParser {\n  // noinspection JSCheckFunctionSignatures\n  /**\n   * Parses the given value and creates entities for it\n   *\n   * @param {string} value              The value to parse\n   * @param {number} line               The line number\n   * @param {string} pack               The pack to search in\n   * @param {string} type               The type of the entity\n   * @param {string} subtype            The subtype of the entity\n   * @param {boolean} processClusters   Whether to process clusters\n   * @returns {Promise<[boolean, string[]]>}        Always true, unless an error occurs\n   */\n  async parse(value, line, pack, type = null, subtype = null, processClusters = true) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n    sbcUtils.log(sbcUtils.translate(\"parser.entity.status\", { value, pack }));\n\n    let logEntities = [];\n    try {\n      let compendium = [];\n      if (typeof pack === \"string\") {\n        compendium.push(\"pf1.\" + pack);\n      } else {\n        pack.forEach((element) => {\n          compendium.push(\"pf1.\" + element);\n        });\n      }\n\n      let array = this.splitText(value, processClusters);\n      array = this.fixSplitGroup(array);\n      this.processForChoices(array);\n\n      for (let i = 0; i < array.length; i++) {\n        let input = array[i].trim().replaceAll(/\\*/g, \"\").trim();\n\n        const frequencyMatch = frequencyWithPeriodRegex().exec(input);\n        if (frequencyMatch) {\n          input = input.replace(` ${frequencyMatch[0]}`, \"\");\n          if (input.indexOf(\"(\")) {\n            input = input.replace(\"(\", `(${frequencyMatch[0]}, `).replace(/,\\s\\)/g, \")\");\n          } else {\n            input += ` (${frequencyMatch[0]})`;\n          }\n        }\n\n        // Catch instances of a stray ')' at the end of the input\n        if (/(?!\\()\\)$/.test(input)) {\n          input = input.replace(/\\)$/, \"\");\n        }\n        // Catch instances of a stray '(' in the input\n        if (/\\((?!\\))/.test(input)) {\n          input += \")\";\n        }\n        input = input.replace(/\\[/g, \"(\").replace(/]/g, \")\").replaceAll(/,\\s+,/g, \",\");\n        if (/sneak attack \\+\\d+d\\d+ plus \\d+ bleed/i.test(input)) {\n          input = input.replace(/ plus \\d+ bleed/i, \"\");\n        }\n\n        let inputSeparated = input.split(/\\s/);\n        console.log(`Looking at ${input}.`);\n\n        if (/\\+?\\d+(d\\d+)?/.test(inputSeparated[inputSeparated.length - 1])) {\n          inputSeparated.splice(inputSeparated.length - 1, 1);\n        }\n\n        if (type === \"feat\") {\n          input.replace(/B$/, \"\");\n          if (input.endsWith(\"M\")) {\n            input = input.substring(0, input.length - 1);\n            const mythicName = `${input} (Mythic)`;\n\n            // Check if the mythic version is already in the array, otherwise add it\n            if (!array.find((f) => f === mythicName)) array.push(mythicName);\n\n            // If the non-mythic version has already been processed, skip this one\n            if (array.slice(0, Math.max(0, i - 1)).find((f) => f === input)) continue;\n          } else {\n            // const mythicMatch = input.match(/(\\w+)M\\b\\s*\\(.*(?!Mythic)\\)/gi);\n            const mythicMatch = input.match(/(.*)M \\((.*)\\)/);\n            if (mythicMatch) {\n              input = `${mythicMatch[1]} (${mythicMatch[2]})`;\n              const mythicName = `${mythicMatch[1]} (Mythic) (${mythicMatch[2]})`;\n\n              // Check if the mythic version is already in the array, otherwise add it\n              if (!array.find((f) => f === mythicName)) array.push(mythicName);\n\n              // If the non-mythic version has already been processed, skip this one\n              if (array.slice(0, Math.max(0, i - 1)).find((f) => f === mythicMatch[1])) continue;\n            }\n          }\n        }\n\n        let shortName = sbcUtils\n          .parseSubtext(`${input.replace(/\\+*\\d+$/g, \"\").trim()}`)[0]\n          .replace(/(\\d+[ -]ft\\.$)/i, \"\")\n          .trim();\n        let altName = `${inputSeparated.join(\" \").trim()}`;\n        let altName2 = `${input.match(/\\((.*)\\)/) ? input.match(/\\((.*)\\)/)[1] : \"\"}`;\n        if (frequencyMatch) {\n          altName = altName.replace(frequencyMatch[0], \"\").replace(/,\\s*/, \"\").trim();\n          altName2 = altName2.replace(frequencyMatch[0], \"\").replace(/,\\s*/, \"\").trim();\n        }\n        let altName3 = altName2\n          .replace(/(\\+?\\d+?)$/, \"\")\n          .trim()\n          .replace(/^(.*?action;)/i, \"\")\n          .trim();\n\n        if (altName2.match(/^Mythic\\) \\(/i)) {\n          shortName += \" (Mythic)\";\n        }\n\n        let searchEntity = {\n          search: new Set(), // The search strings\n          type: pack,\n          item: input,\n        };\n        searchEntity.search = sbcUtils.createSearchSet([altName3, altName2, altName, input, shortName], true);\n\n        if (/channel\\s*(positive|negative)\\s*energy/i.test(input)) {\n          searchEntity.search.add(\"channel energy\");\n        }\n\n        // If the input is found in one of the compendiums, generate an entity from that\n        /** @type {import (\"../../../pf1/module/documents/item/item-pf.mjs\").ItemPF} */\n        let entity = null;\n        if (typeof type !== \"string\") {\n          entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n            itemTypes: type,\n            itemSubTypes: Array.isArray(subtype) ? subtype : [subtype],\n            classes: this.app.processData.characterData.classes,\n            race: this.app.processData.characterData.race,\n          });\n\n          if (!entity) {\n            entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n              itemTypes: type,\n              itemSubTypes: [\"classFeat\", \"misc\"],\n              classes: this.app.processData.characterData.classes,\n              race: this.app.processData.characterData.race,\n            });\n          }\n        } else {\n          entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n            itemType: type,\n            itemSubTypes: Array.isArray(subtype) ? subtype : [subtype],\n            classes: this.app.processData.characterData.classes,\n            race: this.app.processData.characterData.race,\n          });\n        }\n\n        let name = (entity?.name || input).capitalize();\n        let subText = sbcUtils.parseSubtext(input);\n        let subBase = subText[0];\n        let subInput = subText[1]?.replace(/^(.*?action;)/i, \"\").trim();\n        let subInput2 = subInput?.replace(/(\\+?\\d+?)$/, \"\").trim();\n        let quantity = subText[1]?.match(/(?:^|,)\\s*(\\d+)\\s*(?:,|$)/);\n        if (quantity) quantity = quantity[1];\n        else quantity = 1;\n\n        if (entity !== null) {\n          if (!subInput) {\n            await entity.updateSource({ name: sbcUtils.capitalize(input) });\n          } else if (\n            (subInput &&\n              new RegExp(`(^${escapeForRegex(subInput)}|^${escapeForRegex(subInput2)})`, \"i\").test(entity.name) ===\n                false) ||\n            shortName === \"weapon training\"\n          ) {\n            await entity.updateSource({ name: sbcUtils.capitalize(subBase + (subInput ? ` (${subInput})` : \"\")) });\n          } else if (\n            subInput &&\n            entity.name !== sbcUtils.capitalize(subInput) &&\n            entity.name !== sbcUtils.capitalize(subInput2)\n          ) {\n            await entity.updateSource({ name: sbcUtils.capitalize(input.trim()) });\n          }\n\n          if (/\\*$/g.test(input)) {\n            await entity.updateSource({ name: entity.name + \"*\" });\n          }\n\n          await sbcUtils.addAssociatedClass(entity, window.SBC.actor.itemTypes.class);\n        } else {\n          if (typeof pack === \"object\") {\n            switch (pack[0]) {\n              case \"monster-abilities\":\n                Object.assign(searchEntity, {\n                  name: sbcUtils.translate(\"parser.entity.placeholderSpecialAbilityName\", { input }),\n                  type: \"misc\",\n                  desc: sbcUtils.translate(\"parser.entity.placeholderSpecialAbilityDescription\"),\n                });\n                break;\n\n              case \"special-attacks\":\n                Object.assign(searchEntity, {\n                  name: sbcUtils.translate(\"parser.entity.placeholderSpecialAttackName\", { input }),\n                  type: \"attack\",\n                  desc: sbcUtils.translate(\"parser.entity.placeholderSpecialAttackDescription\"),\n                });\n                break;\n            }\n          }\n\n          if (searchEntity.type === \"class-abilities\" || searchEntity.type === \"classFeat\") searchEntity.type = \"misc\";\n          entity = await sbcUtils.generatePlaceholderEntity(searchEntity, line);\n        }\n\n        if (quantity > 1) {\n          let entityName = entity.name;\n          entityName = entityName\n            .replace(/(?<![+-]\\s*\\d*\\s*|DC\\s*)\\b(\\d+)\\b(?!\\s*d\\s*\\d*\\s*[+-])/i, \"\")\n            .replace(/\\(\\s*\\)/, \"\")\n            .trim();\n\n          await entity.updateSource({ name: entityName });\n        }\n\n        let [_a, resultItem, foundName] = [null, null, name + (subInput ? ` (${subInput})` : \"\")];\n        // Check if the entity is already in the actor\n        // If so, update the name\n        // If not, create it\n        if (\n          (typeof pack === \"string\" && (pack === \"class-abilities\" || pack === \"monster-abilities\")) ||\n          (typeof pack === \"object\" && pack.length > 0)\n        ) {\n          let foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, \"feat\", \"classFeat\", foundName, entity);\n\n          if (!foundItem) {\n            foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, \"feat\", null, foundName, entity);\n          }\n\n          if (foundItem && !pack.includes(\"special-attacks\")) {\n            if (\n              (subInput &&\n                new RegExp(`(^${escapeForRegex(subInput)}|^${escapeForRegex(subInput2)})`, \"i\").test(foundItem.name) ===\n                  false) ||\n              (!subInput && new RegExp(`(^${escapeForRegex(subBase)})`, \"i\").test(foundItem.name) === false)\n            ) {\n              await foundItem.update({\n                name: sbcUtils.capitalize(input),\n              });\n            } else if (subInput && subInput !== subInput2 && foundItem.name.toLowerCase() === subInput2.toLowerCase()) {\n              await foundItem.update({\n                name: sbcUtils.capitalize(subInput),\n              });\n            }\n            resultItem = foundItem;\n          } else {\n            [_a, resultItem] = await createItem(entity);\n\n            if (quantity > 1) {\n              for (let i = 1; i < quantity; i++) {\n                await createItem(entity);\n              }\n            }\n          }\n        } else {\n          let foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, type, subtype, foundName, entity);\n\n          if (!foundItem) {\n            [_a, resultItem] = await createItem(entity);\n\n            if (quantity > 1) {\n              for (let i = 1; i < quantity; i++) {\n                await createItem(entity);\n              }\n            }\n          } else resultItem = foundItem;\n        }\n\n        if (resultItem) {\n          let subText = sbcUtils.parseSubtext(input);\n          let nameRegex = new RegExp(`(^${escapeForRegex(resultItem.name)})`, \"i\");\n          let nameMatch = nameRegex.test(input);\n          if (nameMatch === false) {\n            subText[0] = resultItem.name.replace(/^Special (.*?):/, \"\").trim();\n            subText[1] = \"\";\n\n            await resultItem.update({ name: subText[0] + (subText[1] ? ` (${subText[1]})` : \"\") });\n          }\n\n          if (quantity > 1) {\n            let entityName = subText[1];\n            entityName = entityName\n              .replace(/(?<![+-]\\s*\\d*\\s*|DC\\s*)\\b(\\d+)\\b(?!\\s*d\\s*\\d*\\s*[+-])[,)]?/i, \"\")\n              .replace(/\\(\\s*\\)/, \"\")\n              .trim();\n\n            subText[1] = entityName;\n          }\n\n          let subName = subText[1];\n          let subParts = subName?.split(/[;,]\\s?/);\n\n          if (subParts) {\n            let entityMods = {\n              attack: null,\n              damageFormula: null,\n              damageType: null,\n              damageEffect: [],\n              saveDC: null,\n              saveType: null,\n              saveEffect: null,\n              templateRange: null,\n              templateType: null,\n              uses: null,\n              usesPeriod: null,\n            };\n\n            /** @type {RegExpMatchArray} */\n            let regexMatch = null;\n            subParts.forEach((part) => {\n              // Check for damage\n              if ((regexMatch = part.match(abilityDamageRegex())) !== null && entityMods.damageFormula === null) {\n                entityMods.damageFormula = regexMatch.groups.formula;\n                entityMods.damageType = regexMatch.groups.type?.replace(\" damage\", \"\").trim();\n                entityMods.damageEffect.push(regexMatch.groups.effect);\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for attack bonus\n              else if (/([+|-]\\d+)/.test(part)) {\n                entityMods.attack = part.match(/([+|-]\\d+)/)[0].replace(\"+\", \"\");\n              }\n              // Check for saving throw data\n              else if ((regexMatch = part.match(abilityDCregex())) !== null && entityMods.saveDC === null) {\n                entityMods.saveDC = regexMatch.groups.dc;\n                entityMods.saveType = regexMatch.groups.type;\n                entityMods.saveEffect = regexMatch.groups.effect;\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for frequency uses\n              else if ((regexMatch = part.match(frequencyWithPeriodRegex())) !== null) {\n                entityMods.uses = regexMatch.groups.uses;\n                entityMods.usesPeriod = regexMatch.groups.period;\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for template range and type\n              else if ((regexMatch = part.match(abilityRangeRegex())) !== null) {\n                entityMods.templateRange = regexMatch.groups.range;\n                entityMods.templateType = regexMatch.groups.type;\n\n                subName = subName.replace(regexMatch[0], \"\").trim();\n              }\n              // Check for useable restrictions (like breath weapon)\n              else if (part.match(/useable/i)) {\n                // Skip these, as they're usually already included.\n                entityMods.damageEffect.push(part);\n                subName = subName.replace(part, \"\").trim();\n              }\n            });\n\n            subName = subName.replace(/^\\s*,|,\\s*$/g, \"\").trim();\n            subParts = subName?.split(/[;,]\\s?/);\n\n            if (subParts.length > 0 && subParts[0] !== \"\") subParts = subParts.map((word) => sbcUtils.capitalize(word));\n            else subParts = null;\n\n            const updatedActions = [];\n            if (Object.keys(entityMods).length > 0 && resultItem.actions.size > 0) {\n              await sbcUtils.runParallelOps(\n                resultItem.actions.contents,\n                async (content, _index, updatedActions) => {\n                  let action = resultItem.actions.get(content.id);\n\n                  let updates = {};\n                  // Effect notes\n                  if (entityMods.damageEffect.length > 0) {\n                    /** @type {string[]} */\n                    let effectNotes = action.notes.effect ?? [];\n                    effectNotes = effectNotes.concat(entityMods.damageEffect);\n\n                    updates[\"notes.effect\"] = effectNotes;\n                    subName = subName.replace(entityMods.damageEffect.join(\"\"), \"\").trim();\n                  }\n                  // Damage formula and type\n                  if (entityMods.damageFormula && action.damage.parts.length > 0) {\n                    let damageType = action.damage.parts[0].types;\n                    const isDamageType = pf1.registry.damageTypes.get(entityMods.damageType) !== undefined;\n                    if (!isDamageType) {\n                      damageType.values = [];\n                      damageType.custom = entityMods.damageType ?? \"\";\n                    } else {\n                      damageType.values = [entityMods.damageType];\n                      damageType.custom = \"\";\n                    }\n\n                    const comparisonFormula = (\n                      await sbcUtils.processFormula(action.damage.parts[0].formula, window.SBC.actor, resultItem)\n                    ).formula;\n                    if (comparisonFormula !== entityMods.damageFormula) {\n                      updates[\"damage.parts\"] = [\n                        {\n                          formula: entityMods.damageFormula,\n                          type: damageType,\n                        },\n                      ];\n                    }\n                  }\n                  // Attack bonus\n                  if (\n                    entityMods.attack &&\n                    [\"spellsave\", \"save\", \"heal\", \"other\"].includes(action.actionType) === false\n                  ) {\n                    updates[\"attackBonus\"] = entityMods.attack;\n                  }\n                  // If the action has a saving throw, process our modifiers to save data.\n                  if (action.save.dc) {\n                    // Save DC\n                    if (entityMods.saveDC) {\n                      const comparisonFormula = (\n                        await sbcUtils.processFormula(action.save.dc, window.SBC.actor, resultItem)\n                      ).total;\n                      if (comparisonFormula !== entityMods.saveDC) {\n                        const difference = entityMods.saveDC - comparisonFormula;\n                        if (+difference > 0) updates[\"save.dc\"] = action.save.dc + ` + ${+difference}`;\n                      }\n                    }\n                    // Save Type\n                    if (entityMods.saveType) {\n                      switch (entityMods.saveType) {\n                        case \"Fortitude\":\n                          updates[\"save.type\"] = \"fort\";\n                          break;\n                        case \"Reflex\":\n                          updates[\"save.type\"] = \"ref\";\n                          break;\n                        case \"Will\":\n                          updates[\"save.type\"] = \"will\";\n                          break;\n                        default:\n                          updates[\"save.type\"] = null;\n                          break;\n                      }\n                    }\n                    // Save Description\n                    if (entityMods.saveEffect) {\n                      updates[\"save.description\"] =\n                        (entityMods.saveType ? `${entityMods.saveType} ` : \"\") + entityMods.saveEffect;\n                    }\n                  }\n                  // Template range\n                  if (entityMods.templateRange) {\n                    updates[\"measureTemplate.size\"] = entityMods.templateRange;\n                  }\n                  // Template type\n                  if (entityMods.templateType) {\n                    switch (entityMods.templateType) {\n                      case \"cone\":\n                        updates[\"measureTemplate.type\"] = \"cone\";\n                        break;\n                      case \"ray\":\n                        updates[\"measureTemplate.type\"] = \"ray\";\n                        break;\n                      default: // Anything else should just be a circle\n                        updates[\"measureTemplate.type\"] = \"circle\";\n                        break;\n                    }\n                  }\n\n                  if (Object.keys(updates).length > 0) {\n                    await action.update(updates);\n                    updatedActions.push(action);\n                  }\n                },\n                [updatedActions]\n              );\n            }\n            await resultItem.update({ \"system.actions\": updatedActions });\n\n            if (entityMods.uses) {\n              const comparisonFormula = resultItem.system.uses.maxFormula\n                ? (await sbcUtils.processFormula(resultItem.system.uses.maxFormula, window.SBC.actor, resultItem)).total\n                : 0;\n              if (comparisonFormula !== entityMods.uses) {\n                const currentUses = resultItem.system.uses.maxFormula;\n                const difference = (entityMods.uses - comparisonFormula).toString();\n                let usesPeriod = resultItem.system.uses.per ? resultItem.system.uses.per : \"charges\";\n                switch (usesPeriod) {\n                  case \"round\":\n                    usesPeriod = \"round\";\n                    break;\n                  case \"hour\":\n                    usesPeriod = \"hour\";\n                    break;\n                  case \"day\":\n                    usesPeriod = \"day\";\n                    break;\n                  case \"week\":\n                    usesPeriod = \"week\";\n                    break;\n                  default:\n                    break;\n                }\n\n                let updates = {\n                  \"system.uses.maxFormula\": currentUses\n                    ? +difference > 0\n                      ? currentUses + ` + ${+difference}`\n                      : currentUses\n                    : difference,\n                  \"system.uses.per\": usesPeriod,\n                  \"system.uses.value\": resultItem.system.uses.value + +difference,\n                };\n\n                if (resultItem.actions.size === 0) {\n                  const defaultActionData = new pf1.components.ItemAction().toObject(undefined, false);\n                  let actionData = {\n                    ...defaultActionData,\n                    name: game.i18n.localize(\"PF1.Use\"),\n                  };\n\n                  //let action = await resultItem.createEmbeddedEntity(\"OwnedItem\", actionData);\n                  updates[\"system.actions\"] = [actionData];\n                }\n\n                await resultItem.update(updates);\n\n                subName = subName\n                  .replace(/(\\d+)\\/(day|week|month|year)/i, \"\")\n                  .trim()\n                  .replace(/^,|,$/g, \"\")\n                  .trim();\n                subParts = subName?.split(/[;,]\\s?/) ?? [];\n\n                if (subParts.length > 0 && subParts[0] !== \"\")\n                  subParts = subParts.map((word) => sbcUtils.capitalize(word));\n                else subParts = null;\n\n                await resultItem.update({\n                  name: sbcUtils.capitalize(subText[0]) + (subParts?.length > 0 ? ` (${subParts.join(\", \")})` : \"\"),\n                });\n              }\n            }\n          }\n\n          if (altName2.match(/^Mythic\\) \\(/i)) {\n            const index = altName2.indexOf(\"(\");\n            const part = altName2.substring(index + 1).replace(\")\", \"\");\n            subParts?.push(part);\n          }\n\n          if (quantity > 1) {\n            if (subParts) subParts.unshift(quantity);\n            else subParts = [quantity];\n          }\n\n          logEntities.push({\n            name: subText[0],\n            kind: resultItem.system.abilityType,\n            description: resultItem.system.description.value,\n            subParts: subParts,\n          });\n        }\n        // Check for Weapon Finesse and set a flag accordingly\n        if (input.toLowerCase() === \"weapon finesse\" && pack === \"feats\")\n          this.app.processData.flags.hasWeaponFinesse = true;\n      }\n\n      // entities were created successfully\n      return [true, logEntities];\n    } catch (err) {\n      this.throwError(err, \"parser.entity.error\", value, line, { type });\n      return [false, []];\n    }\n  }\n\n  /**\n   * Processes the array of items for choices\n   * These will be split up so that SBC will find them better.\n   * Of note, things that can have choices, among many others:\n   * - Bardic Performances\n   * - Versatile Performances\n   * - Rogue Talents\n   * - Hexes\n   * - Rage Powers\n   * - Ki Powers\n   *\n   * @param {string[]} choices  The array of items to process\n   */\n  processForChoices(choices) {\n    /** @type {string[]} */\n    const options = [\n      \"bardic performance\",\n      \"versatile performance\",\n      \"rogue talent\",\n      \"hexes\",\n      \"rage power\",\n      \"ki power\",\n      \"discoveries\",\n      \"exploit\",\n      \"deed\",\n      \"investigator talent\",\n      \"infusion\",\n      \"mesmerist trick\",\n      \"ninja trick\",\n      \"investigator talent\",\n      \"magus arcana\",\n      \"revelation\",\n      \"mercies\",\n      \"cruelties\",\n      \"slayer talent\",\n      \"vigilante trick\",\n      \"weapon training\",\n      \"favored terrain\",\n      \"favored enemy\",\n    ];\n\n    choices.forEach((choice) => {\n      const choiceParts = [];\n      let foundOption = null;\n      if (\n        options.find((o) => {\n          if (choice.toLowerCase().startsWith(o)) {\n            foundOption = o;\n            return true;\n          }\n          return false;\n        })\n      ) {\n        const subText = sbcUtils.parseSubtext(choice);\n        let subTextFrequency = frequencyWithPeriodRegex().exec(subText[0])?.[0];\n        if (subTextFrequency) {\n          subText[0] = subText[0]\n            .replace(subTextFrequency, \"\")\n            .replace(/\\s{2,}/, \"\")\n            .trim();\n        }\n\n        if (subText[1]) {\n          subText[1] = subText[1].replaceAll(\"[\", \"(\").replaceAll(\"]\", \")\");\n          const parts = this.splitText(subText[1], true);\n          parts.forEach((part) => {\n            if ([\"favored enemy\", \"favored terrain\", \"versatile performance\", \"weapon training\"].includes(foundOption))\n              choiceParts.push(`${subText[0]} (${part})`);\n            else choiceParts.push(`${part}`);\n          });\n        }\n\n        if (choiceParts.length > 0) {\n          if (choiceParts[0].toLowerCase().includes(\"action\")) {\n            const choiceText = choiceParts[0].replace(`${subText[0]} `, \"\").trim();\n            if (subTextFrequency) subText[0] = `${subText[0]} ${subTextFrequency}`;\n            subText[0] += ` (${choiceText})`;\n            choiceParts.shift();\n          }\n          switch (foundOption) {\n            case \"hexes\":\n              subText[0] = subText[0].replace(/hexes/i, \"Hex\");\n              break;\n            case \"discoveries\":\n              subText[0] = subText[0].replace(/discoveries/i, \"Discovery\");\n              break;\n            case \"cruelties\":\n              subText[0] = subText[0].replace(/cruelties/i, \"Cruelty\");\n              break;\n            case \"mercies\":\n              subText[0] = subText[0].replace(/mercies/i, \"Mercy\");\n              break;\n            default:\n              break;\n          }\n\n          choices[choices.indexOf(choice)] = subText[0];\n\n          if (choiceParts.length > 0) choices.push(...choiceParts);\n        }\n      }\n    });\n  }\n}\n",
    "import { createItem, parseValueToDocPath } from \"../../sbcParser.js\";\nimport { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n/**\n * AuraParser is a class that parses auras\n *\n * @augments AbstractParser\n */\nexport default class AuraParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Base\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"aura\";\n  }\n\n  /**\n   * Parses an aura string\n   *\n   * @inheritDoc\n   * @param {string} value        The value to parse\n   * @param {number} _line        The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   * @private\n   */\n  async _parse(value, _line, _type = undefined) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n\n    this.app.processData.notes.aura = [];\n\n    // Send the aura line to the actor's aura trait field.\n    await parseValueToDocPath(window.SBC.actor, \"system.traits.aura.custom\", value);\n\n    // Split the auras into individual auras\n    let auras = this.splitText(value, false);\n    console.log(sbcUtils.translate(\"parser.aura.parseInfo\", { value }), auras);\n\n    let auraCount = 0;\n    // Loop through the auras and create an item for each\n    for (const auraInput of auras) {\n      if (auraInput === \"\" || auraInput === \",\") {\n        continue;\n      }\n\n      // Name = Everything before the opening parenthesis or first number\n      const auraName = auraInput.replace(/(\\(.*\\)|\\d.*)/, \"\").trim();\n\n      // Now check if the actor has an item with the same name\n      // Short of that, look for an \"Aura of X\" instead.\n      const auraNameLC = auraName.toLowerCase();\n      const testName = sbcUtils.translate(\"parser.aura.testName\", { value: auraNameLC }).toLowerCase();\n\n      let foundAura = window.SBC.actor.itemTypes.feat.find(\n        (item) => item.name.toLowerCase() === auraNameLC || item.name.toLowerCase() === testName\n      );\n\n      let auraNote = {\n        raw: auraInput,\n        name: auraName,\n      };\n\n      // Range = Numbers before \".ft\"\n      const auraRangeMatch = auraInput.match(/([^(,;a-zA-Z]+)ft./i);\n      let auraRange = 0;\n      if (auraRangeMatch) {\n        auraRange = parseInt(auraRangeMatch[1].trim());\n        const convertedAuraRange = pf1.utils.convertDistance(auraRange);\n        auraNote.range = `${convertedAuraRange[0]} ${convertedAuraRange[1]}`;\n      }\n\n      let auraSaveType = \"\";\n      let auraDC = \"\";\n      let auraDCNotes = \"\";\n      let actionType = null;\n      // DC = Number after \"DC\"\n      if (/\\bDC\\b/.test(auraInput)) {\n        auraDC = auraInput.match(/DC\\s*(\\d+)/)[1];\n        actionType = \"save\";\n        auraNote.dc = auraDC;\n\n        // auraDCNotes, e.g. negates, halves\n        if (/DC\\s*\\d+\\s*([^)(,;0-9]+)/.test(auraInput)) {\n          auraDCNotes = auraInput.match(/DC\\s*\\d+\\s*([^)(,;0-9]+)/)[1];\n          auraNote.dcNotes = auraDCNotes;\n        }\n\n        if (/\\s+([^)(,;]+)DC\\s*\\d+/.test(auraInput)) {\n          auraSaveType = auraInput\n            .match(/\\s+([^)(,;]+)DC\\s*\\d+/)[1]\n            .trim()\n            .toLowerCase();\n          auraNote.saveType = sbcUtils.translate(`preview.${auraSaveType.capitalize()}`);\n        }\n      }\n\n      // Remove anything that we've parsed out from the input string, so all that's left should be the notes.\n      const auraEffectPatternString =\n        \"(\\\\b\" +\n        [auraName, auraRange, auraSaveType, auraDC, auraDCNotes, \"DC\"].filter((x) => !!x).join(\"\\\\b|\\\\b\") +\n        \"\\\\b|ft\\\\.|[(),])\";\n\n      // Compile and run the regex to extract our effects\n      const auraEffectPattern = new RegExp(auraEffectPatternString, \"gi\");\n      const auraEffectRaw = auraInput.replace(auraEffectPattern, \"\").trim();\n      auraNote.effect = auraEffectRaw;\n\n      if (foundAura) {\n        this.app.processData.notes.aura.push(auraNote);\n      } else {\n        let searchEntity = {\n          search: new Set([auraName, `Aura of ${auraName}`]), // The search strings\n          item: auraInput,\n        };\n        let foundAura = await compendiumOps.findEntityInCompendia(searchEntity, {\n          itemType: \"feat\",\n          classes: this.app.processData.characterData.classes,\n          race: this.app.processData.characterData.race,\n        });\n\n        if (foundAura) {\n          await sbcUtils.addAssociatedClass(foundAura, sbcInstance.actor.itemTypes.class);\n\n          await createItem(foundAura);\n          this.app.processData.notes.aura.push(auraNote);\n        } else {\n          const auraEffect = sbcUtils.makeValueRollable(auraEffectRaw);\n\n          // Set up the aura action data for use in the aura item\n          const defaultActionData = new pf1.components.ItemAction().toObject(undefined, false);\n          const auraAction = {\n            ...defaultActionData,\n            actionType: actionType,\n            activation: {\n              cost: null,\n              type: \"passive\",\n              unchained: {\n                cost: null,\n                type: \"passive\",\n              },\n            },\n            duration: {\n              units: \"perm\",\n            },\n            effectNotes: auraEffect,\n            measureTemplate: {\n              type: \"circle\",\n              size: auraRange,\n            },\n            name: sbcUtils.translate(\"parser.aura.placeholderActionName\"),\n            range: {\n              value: auraRange,\n              units: \"ft\",\n            },\n            save: {\n              dc: auraDC,\n              type: auraSaveType,\n              description: auraDCNotes,\n            },\n            target: {\n              value: sbcUtils.translate(\"parser.aura.placeholderTarget\"),\n            },\n          };\n\n          // Set up the aura data to create the item on the actor\n          const aura = new Item.implementation({\n            name: sbcUtils.translate(\"parser.aura.placeholderName\", { value: auraName.capitalize() }),\n            type: \"feat\",\n            system: {\n              abilityType: \"na\",\n              actions: [auraAction],\n              subType: \"racial\",\n              tag: `aura${auraCount}`,\n            },\n            img: \"systems/pf1/icons/spells/runes-blue-3.jpg\",\n          });\n\n          await createItem(aura);\n\n          this.app.processData.notes.aura.push(auraNote);\n          auraCount++;\n        }\n      }\n    }\n\n    this.app.processData.notes.aura = this.app.processData.notes.aura.sort((a, b) => a.name.localeCompare(b.name));\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\nimport {\n  baseClassesRegex,\n  classesRegex,\n  mythicPathRegex,\n  prestigeClassesRegex,\n  wizardClassesRegex,\n} from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\nconst ClassType = Object.freeze({\n  PrestigeClass: \"PrestigeClass\",\n  WizardClass: \"WizardClass\",\n  SupportedClass: \"SupportedClass\",\n  MythicPath: \"MythicPath\",\n});\n\n// Parse Classes\nexport default class ClassParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Base\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"class\";\n  }\n\n  /**\n   * Parses a class string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   * @private\n   */\n  async _parse(value, line, _type = undefined) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n\n    // Put the raw class info into the notes, to be used in the preview\n    this.app.processData.notes.base.classes = [];\n\n    value = value.replaceAll(/\\sArchetype|\\sPrestige Class/gi, \"\");\n    // split the classes and handle each class separately\n    let classes = value.split(/\\//).map((el) => el.trim());\n\n    for (let classInput of classes) {\n      const classInfo = classesRegex().exec(classInput).groups;\n      let isExClass = !!classInfo.exClass;\n\n      let classType = null;\n      if (classInput.match(prestigeClassesRegex())) {\n        classType = ClassType.PrestigeClass;\n      } else if (classInput.match(baseClassesRegex())) {\n        classType = ClassType.SupportedClass;\n      } else if (classInput.match(wizardClassesRegex())) {\n        classType = ClassType.WizardClass;\n      } else if (classInput.match(mythicPathRegex())) {\n        classType = ClassType.MythicPath;\n      }\n\n      if (!classType) {\n        this.throwError(undefined, \"parser.class.failedToCreate\", { class: classInput });\n        continue;\n      }\n      sbcUtils.log(sbcUtils.translate(\"parser.class.parseInfo\", { classType: classType }));\n\n      // Supported Class, Prestige Class or Wizard Class found\n      const tempClassName = sbcUtils.parseSubtext(classInput.trim());\n      if (tempClassName.length > 2) tempClassName[0] += \" \" + tempClassName[2][0];\n\n      const classData = {\n        name: classType === ClassType.WizardClass ? \"wizard\" : classInfo.class,\n        deity: classInfo.deity,\n        wizardClass: classType === ClassType.WizardClass ? classInfo.class : \"\",\n        // Match archetype only if it includes no number, otherwise it's a source\n        archetype: classInfo.archetype?.match(/\\d+/) ? \"\" : classInfo.archetype || \"\",\n        level: parseInt(classInfo.level),\n        item: tempClassName[0].replaceAll(/[0-9]/g, \"\").trim(),\n      };\n      console.log(classData);\n\n      const classItem = await compendiumOps.findEntityInCompendia(classData, {\n        itemType: \"class\",\n        classes: this.app.processData.characterData.classes,\n      });\n\n      if (!classItem) {\n        sbcUtils.log(sbcUtils.translate(\"parser.class.notFound\", { className: classData.name }));\n        continue;\n      }\n      if (classItem && classItem.system.subType !== \"racial\" && classData.level === 0) continue;\n\n      let className = classData.name;\n      let updates = {};\n\n      if (classData.deity) {\n        classData.name += ` of ${classData.deity}`;\n        await window.SBC.actor.update({ \"system.details.deity\": classData.deity });\n      }\n\n      // If the suffix contains an \"of\" the probability it names a deity is high. So, set that and hope for the best\n      if (classData.archetype) {\n        const archetypes = this.splitText(classData.archetype, false)\n          .map((el) => el.trim().capitalize())\n          .filter((el) => el !== \"\");\n\n        await sbcUtils.runParallelOps(archetypes, async (archetype) => {\n          const fullArchetypeName = `${classData.name.capitalize()} (${archetype})`;\n          const archetypeItem = await compendiumOps.findEntityInCompendia(\n            { name: fullArchetypeName, item: fullArchetypeName },\n            {\n              itemType: \"feat\",\n              itemSubType: \"misc\",\n            }\n          );\n          if (archetypeItem) {\n            await createItem(archetypeItem);\n          }\n        });\n        className = classData.name.capitalize() + \" (\" + archetypes.join(\", \") + \")\";\n        sbcInstance.app.processData.characterData.archetypes.push(...archetypes);\n      } else if (classData.wizardClass) {\n        className = sbcUtils.translate(`wizardSchools.${classData.wizardClass.toLowerCase()}`);\n        Object.assign(updates, {\n          \"system.tag\": \"wizard\",\n          \"system.useCustomTag\": true,\n        });\n      } else {\n        className = classData.name.capitalize();\n      }\n\n      const classSubtype = classItem.system.subType;\n      if (classSubtype !== \"mythic\") {\n        const hdMaximized = this.app.processData.characterData.hdMaximized;\n        const hdAverage = sbcUtils.getDiceAverage(+classItem.system.hd);\n        classData.hp =\n          !hdMaximized && classSubtype === \"base\"\n            ? +classItem.system.hd + +Math.floor(hdAverage * (classData.level - 1))\n            : hdAverage * classData.level;\n\n        if (!hdMaximized && classSubtype === \"base\") {\n          this.app.processData.characterData.hdMaximized = true;\n        }\n      } else {\n        classData.hp = +classItem.system.hd * classData.level;\n      }\n\n      Object.assign(updates, {\n        name: (isExClass ? \"Ex-\" : \"\") + className,\n        \"system.level\": classData.level,\n        \"system.hp\": classData.hp,\n      });\n\n      // Save the Class Associations to restore later (this prevents supplement items being added)\n      // If supplements are important, they'll be in the statblock and added by SBC itself.\n      let classAssociations = [];\n      if (classItem.system.links?.classAssociations && !window.SBC.settings.getSetting(\"createAssociations\")) {\n        classAssociations = classItem.system.links.classAssociations;\n\n        Object.assign(updates, {\n          \"system.links.-=classAssociations\": null,\n        });\n      }\n\n      // Update the classItem with the new data\n      await classItem.updateSource(updates);\n\n      let [_type, book] = await createItem(classItem);\n      this.app.processData.notes.base.classes.push(`${isExClass ? \"Ex-\" : \"\"}${className} ${classData.level}`);\n\n      if (book.name.match(/\\bExpert\\b/i)) {\n        sbcInstance.app.processData.characterData.isExpert = true;\n\n        sbcInstance.app.processData.characterData.expertSkills = Object.keys(book.system.classSkills).filter(\n          (key) => book.system.classSkills[key]\n        );\n\n        sbcInstance.app.processData.characterData.expertId = book._id;\n      }\n\n      // Add the class identifier to the list of classes on the actor.\n      if (!this.app.processData.characterData.classes.includes(book.system.tag)) {\n        this.app.processData.characterData.classes.push(book.system.tag);\n      }\n\n      // Restore the class associations\n      if (classAssociations.length > 0) {\n        await book.update({\n          \"system.links.classAssociations\": classAssociations,\n        });\n      }\n    }\n\n    // classItems were created successfully\n    return true;\n  }\n}\n",
    "import { checkFlags, createItem, parseSubtext } from \"../../sbcParser.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\nimport { sbcUtils } from \"../../sbcUtils.js\";\n\n// Parse Creature Type and Subtype\nexport default class CreatureParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Base\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"creatureType\";\n  }\n\n  /**\n   * Parses a creature type string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, _type = undefined) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n    const tempCreatureType = parseSubtext(value);\n    const createRace = !sbcInstance.actor.race;\n\n    const creatureType = {\n      name: tempCreatureType[0],\n      type: \"racial\",\n      subTypes: \"\",\n      item: tempCreatureType[0],\n    };\n\n    if (tempCreatureType.length > 1) {\n      creatureType.subTypes = tempCreatureType[1];\n    }\n\n    // Always search the english compendia for entries, so use the english creatureType instead of the localized one\n    const creatureTypeItem = await compendiumOps.findEntityInCompendia(creatureType, {\n      itemType: \"class\",\n    });\n    if (createRace) {\n      const placeholderRaceItem = {\n        name: creatureTypeItem.name,\n        img: creatureTypeItem.img,\n        type: \"race\",\n        creatureTypes: [creatureTypeItem.system.tag],\n        creatureSubtypes: this.splitText(sbcUtils.capitalize(creatureType.subTypes)).map((subType) =>\n          pf1.utils.createTag(subType)\n        ),\n        desc: creatureTypeItem.system.description.value,\n        sources: creatureTypeItem.system.sources,\n        size: sbcInstance.actor.system.traits.size.base,\n      };\n      const raceItem = await sbcUtils.generatePlaceholderEntity(placeholderRaceItem, line);\n      await createItem(raceItem);\n    } else {\n      const raceItem = sbcInstance.actor.race;\n      const types = new Set();\n      const subTypes = new Set();\n\n      // Initialize with race's values\n      raceItem.system.creatureTypes.base.forEach((type) => {\n        types.add(type);\n      });\n      raceItem.system.creatureSubtypes.base.forEach((subType) => {\n        subTypes.add(subType);\n      });\n\n      // Add the new values\n      types.add(creatureTypeItem.system.tag);\n      this.splitText(sbcUtils.capitalize(creatureType.subTypes)).forEach((subType) =>\n        subTypes.add(pf1.utils.createTag(subType))\n      );\n\n      // Update\n      await raceItem.update({\n        \"system.creatureTypes\": Array.from(types),\n        \"system.creatureSubtypes\": Array.from(subTypes),\n      });\n    }\n    let updates = {\n      system: {\n        // tag: pf1.utils.createTag(creatureTypeItem.name),\n        // useCustomTag: true,\n        level: 0,\n      },\n    };\n\n    // Set flags for the conversion\n    switch (creatureType.name.toLowerCase()) {\n      case \"undead\":\n        this.app.processData.flags.isUndead = true;\n        await checkFlags(this.app.processData, \"isUndead\");\n        break;\n\n      case \"construct\":\n        this.app.processData.flags.isConstruct = true;\n        break;\n\n      default:\n        break;\n    }\n\n    if (creatureType.subTypes !== \"\") {\n      // Object.assign(updates, {\n      //   name: tempCreatureType[0].capitalize() + \" (\" + creatureType.subTypes.capitalize() + \")\",\n      // });\n    }\n\n    await creatureTypeItem.updateSource(updates);\n\n    this.app.processData.notes.creatureType = {\n      type: sbcUtils.translate(`types.${sbcUtils.camelize(tempCreatureType[0])}`),\n      subTypes: creatureType.subTypes.split(\",\").map((subType) => {\n        subType = subType.trim();\n\n        const existingSubType = sbcUtils.haystackSearch(window.SBC.config.creatureSubTypes, subType);\n        if (existingSubType) {\n          return sbcUtils.translate(`subTypes.${sbcUtils.camelize(existingSubType)}`);\n        }\n\n        return subType.capitalize();\n      }),\n    };\n    const [_itemType, item] = await createItem(creatureTypeItem);\n\n    if (item.name.match(/\\bOutsider\\b/i)) {\n      sbcInstance.app.processData.characterData.isOutsider = true;\n\n      sbcInstance.app.processData.characterData.outsiderSkills = Object.keys(item.system.classSkills).filter(\n        (key) => item.system.classSkills[key]\n      );\n\n      sbcInstance.app.processData.characterData.outsiderId = item._id;\n    }\n\n    if (!this.app.processData.characterData.race) {\n      this.app.processData.characterData.race = creatureTypeItem.system.tag;\n    }\n\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\n\n// Parse Race\nexport default class RaceParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Base\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"race\";\n  }\n\n  /**\n   * Parse a race string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   * @private\n   */\n  async _parse(value, line, _type = undefined) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n\n    const race = {\n      name: value.toLowerCase(),\n      item: value,\n    };\n    this.app.processData.notes.base.race = race.name.capitalize();\n\n    let raceItem = await compendiumOps.findEntityInCompendia(race, {\n      itemType: \"race\",\n    });\n\n    if (!raceItem) {\n      // Generate a placeholder for not supported race\n      const placeholderRaceItem = {\n        name: value,\n        type: \"race\",\n      };\n      raceItem = await sbcUtils.generatePlaceholderEntity(placeholderRaceItem, line);\n    }\n\n    if (!this.app.processData.characterData.race) {\n      this.app.processData.characterData.race = pf1.utils.createTag(raceItem.name);\n    }\n\n    await createItem(raceItem);\n    return true;\n  }\n}\n",
    "import { AdditionalSenses } from \"../../Content/index.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\nconst senseAttributeMap = {\n  blindsight: \"system.traits.senses.bs.value\",\n  blindsense: \"system.traits.senses.bse.value\",\n  darkvision: \"system.traits.senses.dv.value\",\n  tremorsense: \"system.traits.senses.ts.value\",\n  scent: \"system.traits.senses.sc.value\",\n  truesight: \"system.traits.senses.tr.value\",\n  \"true seeing\": \"system.traits.senses.tr.value\",\n  \"see in darkness\": \"system.traits.senses.sid\",\n  \"see invisibility\": \"system.traits.senses.si\",\n  \"low-light\": \"system.traits.senses.ll.enabled\",\n};\n\nconst sensePhraseMap = {\n  blindsight: \"PF1.Sense.blindsight\",\n  blindsense: \"PF1.Sense.blindsense\",\n  darkvision: \"PF1.Sense.darkvision\",\n  tremorsense: \"PF1.Sense.tremorsense\",\n  scent: \"PF1.Sense.scent\",\n  \"see in darkness\": \"PF1.Sense.seeInDark\",\n  truesight: \"PF1.Sense.trueseeing\",\n  \"true seeing\": \"PF1.Sense.trueseeing\",\n  \"see invisibility\": \"PF1.Sense.seeInvis\",\n  \"low-light\": \"PF1.Sense.lowlight\",\n};\n\n// Parse Senses\nexport default class SensesParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Base\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"sense\";\n  }\n\n  /**\n   * Parses a sense string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, _type = undefined) {\n    const systemSupportedSenses = Object.values(pf1.config.senses).map((x) => x.toLowerCase());\n    const availableSenses = systemSupportedSenses.concat(AdditionalSenses);\n    let customSenses = [];\n\n    // Search for matches\n    this.app.processData.notes.base.senses = [];\n    for (const searchSense of availableSenses) {\n      if (value.search(searchSense) === -1) {\n        continue;\n      }\n\n      switch (searchSense) {\n        // Range\n        case \"scent\":\n        case \"truesight\":\n        case \"true seeing\":\n        case \"blindsight\":\n        case \"blindsense\":\n        case \"darkvision\":\n        case \"tremorsense\": {\n          const rangeRegEx = new RegExp(searchSense + \"\\\\s(\\\\d+)\", \"\");\n          const range = value.match(rangeRegEx)?.[1] ?? ([\"truesight\", \"true seeing\"].includes(searchSense) ? 120 : 0);\n          await window.SBC.actor.update({ [senseAttributeMap[searchSense]]: +range });\n          const [distance, unit] = pf1.utils.convertDistance(+range);\n\n          const phraseKey = sensePhraseMap[searchSense] || null;\n\n          this.app.processData.notes.base.senses.push(\n            (phraseKey ? game.i18n.localize(phraseKey) : searchSense.capitalize()) + ` ${distance} ${unit}`\n          );\n          break;\n        }\n        // Yes/No Toggle\n        case \"see in darkness\":\n        case \"see invisibility\":\n        case \"low-light\": {\n          await window.SBC.actor.update({ [senseAttributeMap[searchSense]]: true });\n          const phraseKey = sensePhraseMap[searchSense] || null;\n          this.app.processData.notes.base.senses.push(\n            phraseKey ? game.i18n.localize(phraseKey) : searchSense.capitalize()\n          );\n          break;\n        }\n\n        // Custom Senses\n        default:\n          customSenses.push(searchSense.capitalize());\n          this.app.processData.notes.base.senses.push(searchSense.capitalize());\n          break;\n      }\n    }\n\n    if (!this.app.processData.notes.base.senses.length) {\n      delete this.app.processData.notes.base.senses;\n    }\n\n    // Set customSenses\n    if (customSenses.length) {\n      await window.SBC.actor.update({ \"system.traits.senses.custom\": customSenses.join(\";\") });\n    }\n\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem, parseValueToDocPath } from \"../../sbcParser.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// Parse Classes\nexport default class MythicRankParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Base\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"mythic\";\n  }\n\n  /**\n   * Parses a creature's mythic rank\n   *\n   * @param {number} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   * @private\n   */\n  async _parse(value, line, _type = undefined) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n\n    value = parseInt(value) || 0;\n    if (value === 0) {\n      return true;\n    }\n\n    // Put the raw value into the notes, to be used in the preview\n    this.app.processData.notes.base.mr = value;\n    sbcUtils.log(sbcUtils.translate(\"parser.mr.parseInfo\", { value }));\n\n    const rankData = {\n      name: \"Mythic Rank\",\n      item: \"Mythic Rank\",\n    };\n\n    /** @type {import(\"../../../pf1/module/documents/item/item-pf.mjs\").ItemPF} */\n    const rankItemData = await compendiumOps.findEntityInCompendia(rankData, {\n      itemType: \"class\",\n      classes: this.app.processData.characterData.classes,\n    });\n\n    const classItem = window.SBC.actor.itemTypes.class.find((el) => el.system.subType === \"racial\");\n    const tierHDSize = Math.min(10, +classItem?.system?.hd ?? 6); // Mythic HP per tier caps at 10, even on a d12.\n\n    const [_result, rankItem] = await createItem(rankItemData);\n\n    // Prepare item updates for the actor, starting with the mythic rank item\n    let itemUpdates = [\n      { _id: rankItem.id, \"system.level\": value, \"system.hp\": tierHDSize * value, \"system.hd\": tierHDSize },\n    ];\n\n    // Now that the mythic rank is added, we should now have a couple items added to the actor to manage:\n    // Mythic Power and Surge\n    /** @type {import(\"../../../pf1/module/documents/item/item-feat.mjs\").ItemFeatPF} */\n    let surgeItem = window.SBC.actor.itemTypes.feat.find(\n      (el) => el.system.subType === \"misc\" && el.system.tag === \"surgeMythic\"\n    );\n    /** @type {import(\"../../../pf1/module/documents/item/item-feat.mjs\").ItemFeatPF} */\n    let powerItem = window.SBC.actor.itemTypes.feat.find(\n      (el) => el.system.subType === \"misc\" && el.system.tag === \"mythicPowerMythic\"\n    );\n\n    // Wait for the items to be created, or time out after 10 seconds\n    let timeoutCounter = 0;\n    while ((!surgeItem || !powerItem) && timeoutCounter < 10) {\n      await new Promise((resolve) => {\n        timeoutCounter++;\n        setTimeout(resolve, 1000);\n      });\n      surgeItem = window.SBC.actor.itemTypes.feat.find(\n        (el) => el.system.subType === \"misc\" && el.system.tag === \"surgeMythic\"\n      );\n      powerItem = window.SBC.actor.itemTypes.feat.find(\n        (el) => el.system.subType === \"misc\" && el.system.tag === \"mythicPowerMythic\"\n      );\n    }\n\n    // Prepare updates for the surge item with the size of the surge die\n    if (surgeItem) {\n      const surgeValue = 6 + 2 * Math.floor((value - 1) / 3);\n      const surgeAction = surgeItem.actions.get(surgeItem.actions.contents[0].id);\n\n      await surgeAction.update({ effectNotes: [`+[[1d${surgeValue}]] Surge`] });\n    }\n\n    // Prepare updates for the power item to link the surge item's charges to the poewr item\n    if (powerItem) {\n      itemUpdates.push({ _id: powerItem.id, \"system.uses.maxFormula\": `${value}`, \"system.uses.value\": +value });\n    }\n\n    // Update the items all at once\n    await window.SBC.actor.updateEmbeddedDocuments(\"Item\", itemUpdates);\n\n    surgeItem?.prepareData();\n    await powerItem?.recharge({ value: +value, maximize: true, commit: true, period: \"any\" });\n    await powerItem?.createItemLink(\"charges\", surgeItem);\n\n    // Adjust the actor's CR base to normal (gotta offset the added CR from the mythic rank)\n    await parseValueToDocPath(\n      window.SBC.actor,\n      \"system.details.cr.base\",\n      window.SBC.actor.system.details.cr.base - Math.floor(value / 2)\n    );\n\n    // The mythic rank item was created successfully\n    return true;\n  }\n}\n",
    "import { AbstractParser } from \"../abstract-parser.js\";\nimport { sbcUtils } from \"../../sbcUtils.js\";\nimport { acTypesRegex } from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// Parse AC Types\nexport default class ACParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"armorClass\";\n  }\n\n  /**\n   * Parses an AC string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} _line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, _line, _type = undefined) {\n    // Separate Context Notes from ACTypes\n    const rawAcTypes = value.split(\";\");\n\n    // If there are context notes, set them in the actor\n    if (rawAcTypes.length > 1) {\n      this.app.processData.miscNotes.acNotes.push(rawAcTypes[1].trim());\n    }\n\n    const foundAcTypes = rawAcTypes[0].split(\",\");\n    // Get supported AC Types\n\n    this.app.processData.notes.defense.acTypes = [];\n\n    for (const foundAc of foundAcTypes) {\n      const foundAcType = foundAc.match(acTypesRegex())?.[0]?.toLowerCase();\n      let foundAcTypeValue = parseInt(foundAc.match(/[+-]\\d+/)?.[0]) ?? 0;\n      let foundAcTypeNote = foundAcTypeValue;\n\n      console.log(\n        sbcUtils.translate(\"parser.armorClass.parseInfo\", {\n          type: foundAcType,\n          value: foundAcTypeValue,\n        })\n      );\n\n      switch (foundAcType) {\n        case \"natural\":\n          foundAcTypeValue -= await sbcUtils.getTotalFromChanges(window.SBC.actor, \"nac\");\n          if (foundAcTypeValue !== 0) this.app.processData.miscNotes.naturalAC = foundAcTypeValue;\n          break;\n\n        case \"size\":\n        case \"dex\":\n          // Ignore these cases, as they are handled by foundry\n          break;\n\n        // Armor and Shield need to be validated against the ac changes in equipment\n        case \"armor\":\n        case \"shield\":\n        case \"base\":\n        case \"enhancement\":\n        case \"dodge\":\n        case \"inherent\":\n        case \"deflection\":\n        case \"morale\":\n        case \"luck\":\n        case \"sacred\":\n        case \"insight\":\n        case \"resistance\":\n        case \"profane\":\n        case \"trait\":\n        case \"racial\":\n        case \"competence\":\n        case \"circumstance\":\n        case \"alchemical\":\n        case \"penalty\":\n        case \"rage\":\n        case \"monk\":\n        case \"wis\":\n        case \"untyped\":\n        case \"untypedPerm\":\n          /* Try to put these in the front of the conversion,\n           * so that acNormal, etc. get handled after handling\n           * acTypes */\n          foundAcTypeValue -= await sbcUtils.getTotalFromChanges(window.SBC.actor, \"ac\", foundAcType);\n          if (foundAcTypeValue !== 0) {\n            this.app.processData.characterData.conversionValidation.attributes[foundAcType] = foundAcTypeValue;\n          }\n          break;\n\n        default:\n          break;\n      }\n\n      this.app.processData.notes.defense.acTypes.push({\n        type: sbcUtils.translate(`armorTypes.${foundAcType}`),\n        value: foundAcTypeNote >= 0 ? `+${foundAcTypeNote}` : foundAcTypeNote,\n      });\n    }\n\n    return true;\n  }\n}\n",
    "import { AbstractParser } from \"../abstract-parser.js\";\nimport { sbcUtils } from \"../../sbcUtils.js\";\nimport { damageTypesRegex } from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// Parse Damage Reductions\nexport default class DRParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"damageReduction\";\n  }\n\n  /**\n   * Parses a damage reduction string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} _line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, _line, _type = undefined) {\n    const rawInput = value.replace(/(^[,;\\s]*|[,;\\s]*$)/g, \"\");\n    const input = this.splitText(rawInput);\n\n    this.app.processData.notes.defense.dr = [];\n\n    // Get the current DR data\n    /** @type {Array<sbcTypes.DamageReductionEntry>} */\n    let drValues = window.SBC.actor.system.traits.dr.value;\n    /** @type {string} */\n    let drCustom = window.SBC.actor.system.traits.dr.custom;\n\n    for (let reduction of input) {\n      reduction = reduction.replace(/Effects/gi, \"\").trim();\n\n      // Execute a regex to parse the DR string into groups\n      const re = /^(?<amount>\\d+)\\s*\\/\\s*(?<type1>.+?)(?:\\s*(?<operator>or|and)\\s*(?<type2>.+?))?$/g.exec(reduction);\n      let { amount, type1, operator, type2 } = re.groups;\n      console.log(\n        sbcUtils.translate(\"parser.damageReduction.parseInfo\"),\n        amount,\n        type1,\n        operator,\n        type2,\n        type1?.search(damageTypesRegex()),\n        type2?.search(damageTypesRegex())\n      );\n\n      // If we found one or two types and at least one of them is a valid damage type,\n      // then we can add a new DR entry\n      if ((type1 && type1.match(damageTypesRegex())) || (type2 && type2.match(damageTypesRegex()))) {\n        type1 = type1?.match(damageTypesRegex())?.[0];\n        type2 = type2?.match(damageTypesRegex())?.[0];\n        const types = [type1, type2].filter((x) => !!x).map((x) => pf1.utils.createTag(x));\n\n        drValues.push({\n          amount: amount,\n          types: types,\n          operator: operator === \"or\",\n        });\n\n        this.app.processData.notes.defense.dr.push(\n          [\n            amount,\n            \"/\",\n            this.getDamageTypePhrase(types[0]),\n            ...(types[1] ? [\" \", sbcUtils.translate(operator), \" \", this.getDamageTypePhrase(types[1])] : []),\n          ].join(\"\")\n        );\n      }\n      // It's a custom reduction, as there is no place for that, just put it into custom reductions\n      else {\n        drCustom += `${reduction.capitalize()};`;\n        this.app.processData.notes.defense.dr.push(reduction.capitalize());\n      }\n    }\n\n    await window.SBC.actor.update({\n      \"system.traits.dr.value\": drValues,\n      \"system.traits.dr.custom\": drCustom.replace(/;$/, \"\"),\n    });\n    return true;\n  }\n\n  /**\n   * Get the corresponding damage type phrase for the damage type\n   *\n   * @param {string} damageType       The key of the damage type\n   * @returns {string}                The phrase for the damage type\n   */\n  getDamageTypePhrase(damageType) {\n    if (pf1.config.damageResistances[damageType]) {\n      return pf1.config.damageResistances[damageType];\n    }\n\n    const materialTypeLabels = pf1.registry.materials.getLabels();\n    if (materialTypeLabels[damageType]) {\n      return materialTypeLabels[damageType];\n    }\n\n    const damageTypeLabels = pf1.registry.damageTypes.getLabels();\n    if (damageTypeLabels[damageType]) {\n      return damageTypeLabels[damageType];\n    }\n\n    return \"\";\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { parserMapping } from \"../parser-mapping.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// const HDTypes = Object.freeze({\n//   RacialOnly: Symbol(\"RacialOnly\"),\n//   ClassOnly: Symbol(\"ClassOnly\"),\n//   ClassAndRacial: Symbol(\"ClassAndRacial\"),\n// });\n\n// Parse HP, HD and special HD/HP Abilities (like Regeneration or Fast Healing)\nexport default class HPParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"hitPoints\";\n  }\n\n  /**\n   * Parses a hit points string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, _type = undefined) {\n    // Check the current Items for classes and racialHD\n    /** @type {Array<import(\"../../../pf1/module/documents/item/item-class.mjs\").ItemClassPF>} */\n    let classItems = window.SBC.actor.itemTypes.class;\n    let maximzizeFirstHD = false;\n\n    // Calculate the HP for the statblock\n    const [_hpValue, hdInput, hdPool, hpBonus, hpAbilities] = this.processHPString(value);\n    sbcUtils.log(`HP: ${hdPool} and Bonus: ${hpBonus}`);\n    let hdTotal = 0;\n    let hdTotalRacial = 0;\n    let calculatedStatblockHP =\n      hdPool.reduce((result, hd) => {\n        const [hdCount, hdSize] = hd.split(\"d\").map((value) => parseInt(value));\n        hdTotal += hdCount;\n        return result + hdCount * sbcUtils.getDiceAverage(hdSize);\n      }, 0) + hpBonus;\n\n    // Calculate the number of racial hit dice by subtracting all class levels\n    // This will do nothing if there is no racial class item.\n    hdTotalRacial =\n      hdTotal -\n      classItems.reduce(\n        (result, classItem) => result + (classItem.system.subType === \"mythic\" ? 0 : classItem.system.level),\n        0\n      );\n    const racialHDItem = classItems.find((classItem) => classItem.system.subType === \"racial\");\n    if (racialHDItem) {\n      await racialHDItem.update({\n        \"system.level\": hdTotalRacial,\n        \"system.hp\": hdTotalRacial * sbcUtils.getDiceAverage(racialHDItem.system.hd),\n      });\n    }\n\n    // The HP as it exists on the actor, after classes, Constitution or Charisma bonus, and items\n    let calculatedActorHP = window.SBC.actor.system.attributes.hp.value;\n    let hpDifferenceStatblockActor = calculatedStatblockHP - calculatedActorHP;\n\n    // Find the first class that *could* be a favored class (it's a pretty safe bet that this is so)\n    // If it's a base class, check for maximizing to adjust the HP difference.\n    // If the HP difference is equal to the level, set the favored class HP to the level.\n    const favoredClass = classItems.find(\n      (classItem) => classItem.system.subType === \"base\" || classItem.system.subType === \"npc\"\n    );\n    if (favoredClass) {\n      if (favoredClass.system.subType === \"base\") {\n        if (!maximzizeFirstHD) {\n          maximzizeFirstHD = true;\n          sbcUtils.log(\n            `Maximizing first HD for ${favoredClass.name} - ${favoredClass.system.hd} - ${sbcUtils.getDiceAverage(favoredClass.system.hd)}`\n          );\n          const offsetHPAverage = favoredClass.system.hd - sbcUtils.getDiceAverage(favoredClass.system.hd);\n          calculatedStatblockHP += offsetHPAverage;\n          hpDifferenceStatblockActor += offsetHPAverage;\n        }\n      }\n\n      if (hpDifferenceStatblockActor === favoredClass.system.level) {\n        await favoredClass.update({ \"system.fc.hp.value\": favoredClass.system.level });\n        hpDifferenceStatblockActor -= favoredClass.system.level;\n        calculatedActorHP += favoredClass.system.level;\n      }\n    }\n\n    // Calculate the HP using the system HP settings.\n    // These can be accessed using the following command:\n    // game.settings.get(\"pf1\", \"healthConfig\")\n    const calculatedSystemHP = await calculateSystemHP(window.SBC.actor, classItems);\n    sbcUtils.log(\n      `HP Data: Statblock: ${calculatedStatblockHP}, Actor: ${calculatedActorHP}, System: ${calculatedSystemHP}`\n    );\n\n    sbcUtils.log(`HP Difference between Statblock and Actor: ${hpDifferenceStatblockActor}`);\n    const hpDifferenceSystemActor = calculatedSystemHP - calculatedActorHP;\n    sbcUtils.log(`HP Difference between System and Actor: ${hpDifferenceSystemActor}`);\n    const hpDifferenceStatblockSystem = calculatedStatblockHP - calculatedSystemHP;\n    sbcUtils.log(`HP Difference between Statblock and System: ${hpDifferenceStatblockSystem}`);\n\n    // Account for the the HP difference between the statblock and the system-calculated HP\n    const hpTotal = roundHPTotal(calculatedStatblockHP + (_hpValue - calculatedStatblockHP + hpDifferenceSystemActor));\n    this.app.processData.characterData.conversionValidation.attributes[\"hpTotal\"] = hpTotal;\n\n    // Save Total HP and HD for the preview\n    this.app.processData.notes.defense[\"hpTotal\"] = hpTotal;\n    this.app.processData.notes.defense[\"hdTotal\"] = hdTotal;\n    this.app.processData.notes.defense[\"hdPool\"] = hdInput;\n\n    await this.resetRacialClassesWithNoLevels();\n\n    // Set the current value of the actor hp\n    //window.SBC.actor.update({ \"system.attributes.hp.value\": +hpValue });\n\n    // If there is data after the hd in brackets, add it as a special hdAbility\n    if (!hpAbilities.trim().length) return true;\n\n    const hdAbilities = await checkHDAbilities(this.splitText(hpAbilities, false), line);\n\n    this.app.processData.notes.defense[\"hdAbilities\"] = hdAbilities.join(\", \");\n\n    return true;\n  }\n\n  /**\n   * Processes the HP string and returns the HP and HD\n   *\n   * @param {string} value                  The value to process\n   * @returns {[number, string, RegExpMatchArray, number, string]}  The HP value, HD, HD Pool regex result, HP bonus, and the remainder of input\n   */\n  processHPString(value) {\n    if (!value) {\n      return [0, \"\", [], 0, \"\"];\n    }\n    if (value.match(/\\);\\s*(regeneration|fast[ -]healing)/i)) {\n      value = value.replace(/\\);(\\s*regeneration|fast[ -]healing)/i, \"), $1\");\n    }\n    const input = this.splitText(value, false);\n    // SBC currently processes the following:\n    // 190 (20 HD; 8d8+12d10+88); regeneration 5 (good weapons, good spells)\n    // as [\"good spells), \"X\"] instead of the expected result.\n\n    // Get the HitDice and the bonus HP\n    const [hpValue, hdInput] = sbcUtils.parseSubtext(input[0]);\n\n    // Get the total hp (only numbers!)\n    const hdPool = hdInput.match(/(\\d+d\\d+)/g);\n\n    // HP Bonus Pool\n    const hpBonusPool = hdInput.match(/(\\b[^d+\\s]*\\d+[^\\sd+]*\\b)(?!\\s*HD)/gi);\n    // Check, if there are Bonus HP\n    const hpBonus = hpBonusPool?.reduce((result, bonus) => result + parseInt(bonus), 0) ?? 0;\n\n    return [hpValue, hdInput, hdPool, hpBonus, input[1] || \"\"];\n  }\n\n  /**\n   * Reset the saving throws for all racial classes that have no levels\n   *\n   * @returns {Promise<void>}\n   */\n  async resetRacialClassesWithNoLevels() {\n    /** @type {import(\"../../../pf1/module/documents/item/item-class.mjs\").ItemClassPF[]} */\n    let classesToDelete = [];\n\n    window.SBC.actor.itemTypes.class\n      .filter((classItem) => classItem.system.level === 0)\n      .forEach(async (classItem) => {\n        if (classItem.system.subType === \"racial\") {\n          classesToDelete.push(classItem);\n        } else {\n          await classItem.update({\n            \"system.savingThrows\": {\n              fort: {\n                value: \"\",\n                base: 0,\n                good: classItem.system.savingThrows.fort.good,\n              },\n              ref: {\n                value: \"\",\n                base: 0,\n                good: classItem.system.savingThrows.ref.good,\n              },\n              will: {\n                value: \"\",\n                base: 0,\n                good: classItem.system.savingThrows.will.good,\n              },\n            },\n          });\n        }\n      });\n\n    if (classesToDelete.length) {\n      let race = window.SBC.actor.itemTypes.race.length;\n      if (!race) {\n        let firstClass = classesToDelete[0];\n        const nameData = sbcUtils.parseSubtext(firstClass.name);\n        let raceEntityData = {\n          name: nameData[0],\n          creatureType: nameData[0].toLowerCase(),\n          desc: firstClass.system.description.value,\n          img: firstClass.img,\n          size: window.SBC.actor.system.traits.size.base,\n          subTypes: nameData.length > 1 ? nameData[1].replace(/\\s/g, \"\").split(\",\") : \"\",\n          type: \"race\",\n        };\n\n        await createItem(await sbcUtils.generatePlaceholderEntity(raceEntityData));\n      }\n\n      window.SBC.actor.deleteEmbeddedDocuments(\n        \"Item\",\n        classesToDelete.map((item) => item.id)\n      );\n    }\n  }\n}\n\n/**\n * Calculates the HP according to system settings\n *\n * @param {import(\"../../../pf1/module/documents/actor/actor-pf.mjs\").ActorPF} actor          The actor to calculate the HP for\n * @param {Array<import(\"../../../pf1/module/documents/item/item-pf.mjs\").ItemPF>} classItems The class items to calculate the HP for\n * @returns {Promise<number>} The calculated HP\n */\nasync function calculateSystemHP(actor, classItems) {\n  let calculatedSystemHP = 0;\n\n  /** @type {sbcTypes.hpSettings} */\n  const systemConfig = game.settings.get(\"pf1\", \"healthConfig\");\n\n  /** @type {sbcTypes.hpSettings} */\n  const hpSettings = {\n    continuous: systemConfig.continuous,\n    maximized: systemConfig.maximized,\n    rounding: systemConfig.rounding,\n    maximizedProgress: 0,\n  };\n\n  // Check if SBC overwrites the continuity\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n  /** @type {string} */\n  const sbcContinuity = sbcInstance.settings.getSetting(\n    `${sbcInstance.config.const.actorType[sbcInstance.actorType]}health`\n  );\n  if (sbcContinuity) {\n    hpSettings.continuous = sbcContinuity === \"continuous\";\n  }\n\n  // Loop through all classes and calculate the HP according to the system settings\n  for (const classItem of classItems) {\n    const classType = classItem.system.subType;\n    /** @type {sbcTypes.hdSettings} */\n    const hdSettings = game.settings.get(\"pf1\", \"healthConfig\").getClassHD(classItem);\n\n    switch (classType) {\n      // These are coverd by the system settings, which are generically gathered in hdSettings\n      case \"base\":\n      case \"prestige\":\n      case \"npc\":\n      case \"racial\": {\n        let hdCount = classItem.system.level;\n        let hdCountMaximized = 0;\n\n        // Check if we maximize this class type AND if we have any levels left to maximize on the actor\n        if (hdSettings.maximized && hpSettings.maximizedProgress < hdSettings.maximized) {\n          hdCountMaximized = Math.min(hpSettings.maximized - hpSettings.maximizedProgress, hdCount);\n          hdCount -= hdCountMaximized;\n          hpSettings.maximizedProgress += hdCountMaximized;\n        }\n\n        const classHP = calculateSystemHPForClass(\n          hpSettings,\n          hdSettings,\n          classItem.system.hd,\n          hdCount,\n          hdCountMaximized\n        );\n        calculatedSystemHP += classHP + classItem.system.fc.hp.value;\n\n        // Update the classItem with the new HP total\n        await classItem.update({ \"system.hp\": classHP });\n\n        break;\n      }\n      // Nothing to touch here, as Mythic HP was already calculated and isn't affected by system settings.\n      case \"mythic\":\n        calculatedSystemHP += classItem.system.hp;\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Adjust calculated system HP to include the ability modifier\n  const hdTotal = actor.system.attributes.hd.total;\n  const hpAbility = actor.system.attributes.hpAbility;\n  calculatedSystemHP += hdTotal * actor.system.abilities[hpAbility].mod;\n\n  // Adjust calculated system HP to include changes from items\n  calculatedSystemHP += await sbcUtils.getTotalFromChanges(actor, \"mhp\");\n\n  return calculatedSystemHP;\n}\n\n/**\n * Calculates the HP for a class based on the system settings\n *\n * @param {sbcTypes.hpSettings} hpSettings      The HP settings\n * @param {sbcTypes.hdSettings} hdSettings      The HD settings\n * @param {number} hdSize                       The size of the HD\n * @param {number} hdCount                      The number of HD\n * @param {number} hdCountMaximized             The number of maximized HD\n * @returns {number}                            The calculated HP\n */\nfunction calculateSystemHPForClass(hpSettings, hdSettings, hdSize, hdCount, hdCountMaximized) {\n  let hpTotal = 0;\n  const hdAverage = sbcUtils.getDiceAverage(hdSize, hdSettings.rate);\n\n  let continuity = hpSettings.continuous;\n  if (!continuity) {\n    // We're discreet, so we round per level\n    for (let i = 0; i < hdCount; i++) {\n      hpTotal += roundHPTotal(hdAverage);\n    }\n  } else {\n    // We're continuous, so we round at the end\n    hpTotal = roundHPTotal(hdAverage * hdCount);\n  }\n\n  // Add the maximized HD\n  hpTotal += hdCountMaximized * hdSize;\n\n  return hpTotal;\n}\n\n/**\n * Rounds the HP total according to the system settings\n *\n * @param {number} value  The value to round\n * @returns {number}      The rounded value\n * @private\n */\nfunction roundHPTotal(value) {\n  switch (game.settings.get(\"pf1\", \"healthConfig\").rounding) {\n    case \"up\":\n      value = Math.ceil(value);\n      break;\n    case \"down\":\n      value = Math.floor(value);\n      break;\n    case \"nearest\":\n      value = Math.round(value);\n      break;\n    default:\n      break;\n  }\n\n  return value;\n}\n\n/**\n * Checks the input for fast-healing and regeneration abilities\n *\n * @param {string[]} input              The input line with HP data\n * @param {number} line                 The line number of the input\n * @returns {Promise<Array<string>>}    The list of hdAbilities\n */\nasync function checkHDAbilities(input, line) {\n  let hdAbilities = [];\n\n  let hdAbilitiesPattern = new RegExp(\"\\\\b(regeneration|fast[ -]healing)\\\\b\", \"gi\");\n\n  for (let tempInput of input) {\n    tempInput = tempInput.trim();\n\n    if (tempInput.length === 0) {\n      continue;\n    }\n\n    // Check, if the input matches \"regeneration\" or \"fast healing\"\n    if (tempInput.search(hdAbilitiesPattern) === -1) {\n      // Generate a placeholder for every hdAbility that is not accounted for in the character sheet\n      const hdAbility = {\n        name: tempInput,\n        type: \"misc\",\n      };\n\n      hdAbilities.push(hdAbility.name);\n      const placeholder = await sbcUtils.generatePlaceholderEntity(hdAbility, line);\n\n      await createItem(placeholder);\n      continue;\n    }\n\n    // Input the hdAbility into the correct places in the sheet\n    const hpAbilityType = tempInput.match(hdAbilitiesPattern)[0].toLowerCase();\n\n    switch (hpAbilityType) {\n      case \"regeneration\": {\n        const parser = parserMapping.map.defense.regeneration;\n        await parser.parse(tempInput, line);\n        break;\n      }\n\n      case \"fast healing\":\n      case \"fast-healing\": {\n        const parser = parserMapping.map.defense.fastHealing;\n        await parser.parse(tempInput, line);\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    hdAbilities.push(tempInput);\n  }\n\n  return hdAbilities;\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport {\n  conditionRegistryTypesRegex,\n  conditionTypesRegex,\n  creatureTypeRegex,\n  damageTypesRegex,\n} from \"../../sbcRegex.js\";\n\n// Parse Immunities\nexport default class ImmunityParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"immunity\";\n  }\n\n  /**\n   * Parses an immunity string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} _line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, _line, _type = undefined) {\n    const rawInput = value.replace(/(^[,;\\s]*|[,;\\s]*$)/g, \"\");\n    const input = this.splitText(rawInput);\n\n    this.app.processData.notes.defense.immune = [];\n\n    // Get the current immunities\n    /**\n     * @type {{ci: Array<string>, di: Array<string>, ciCustom: Array<string>}}\n     */\n    const immunities = {\n      ci: window.SBC.actor.system.traits.ci.base,\n      di: window.SBC.actor.system.traits.di.base,\n    };\n\n    // Loop through all the immunities in the input\n    for (let immunity of input) {\n      immunity = this.sanitizeInput(immunity.replace(/(?<!Death )Effects/gi, \"\").trim());\n\n      // Check if it's one of the system's condition immunities, or\n      // if it's `fatigue` due to a mismatch in system terminology\n      const isFatigue = immunity.toLowerCase().includes(\"fatigue\");\n      if (isFatigue || immunity.search(conditionTypesRegex()) !== -1) {\n        if (isFatigue) immunity = \"fatigued\";\n\n        const immunityKey = sbcUtils.getKeyByValue(pf1.config.conditionTypes, immunity);\n        immunities.ci.push(sbcUtils.camelize(immunityKey));\n        this.app.processData.notes.defense.immune.push(pf1.config.conditionTypes[immunityKey]);\n      }\n      // Check if the immunity is a damage type\n      else if (immunity.replace(/(\\s*energy)/i, \"\").search(damageTypesRegex(true)) !== -1) {\n        const immunityKey = sbcUtils.getKeyByValue(\n          pf1.registry.damageTypes.getLabels(),\n          immunity.replace(/(\\s*energy)/i, \"\")\n        );\n        immunities.di.push(sbcUtils.camelize(immunityKey));\n        this.app.processData.notes.defense.immune.push(\n          pf1.registry.damageTypes.getLabels()[immunityKey] + (immunity.match(/ energy/) ? \" Energy\" : \"\")\n        );\n      }\n      // Check if the immunity is in the condition registry\n      else if (immunity.search(conditionRegistryTypesRegex()) !== -1) {\n        const immunityKey = sbcUtils.getKeyByValue(pf1.registry.conditions.getLabels(), immunity);\n        immunities.ci.push(sbcUtils.camelize(immunityKey));\n        this.app.processData.notes.defense.immune.push(pf1.registry.conditions.getLabels()[immunityKey]);\n      }\n      // Check the immunity list for this creature type\n      else if (immunity.search(creatureTypeRegex()) !== -1) {\n        const creatureType = sbcUtils.haystackSearch(window.SBC.config.creatureTypes, immunity);\n        const racialImmunities = window.SBC.config.immunities[creatureType] || {};\n        if (racialImmunities.condition) {\n          immunities.ci.push(...racialImmunities.condition);\n        }\n        if (racialImmunities.damage) {\n          immunities.di.push(...racialImmunities.damage);\n        }\n        if (racialImmunities.custom) {\n          immunities.ci.push(...racialImmunities.custom);\n        }\n\n        this.app.processData.notes.defense.immune.push(immunity.capitalize());\n      }\n      // Otherwise, assume it's a custom immunity\n      else {\n        immunities.ci.push(immunity.capitalize());\n        this.app.processData.notes.defense.immune.push(immunity.capitalize());\n      }\n    }\n\n    await window.SBC.actor.update({\n      \"system.traits.ci\": immunities.ci,\n      \"system.traits.di\": immunities.di,\n    });\n\n    return true;\n  }\n\n  /**\n   * Sanitize the immunities for cases where the statblock term\n   * doesn't match what the system has.\n   *\n   * @param {string} input  The string to sanitize\n   * @returns {string}      The sanitized string\n   *\n   * @example\n   * If the input is \"fatigue\", the sanitized string is \"fatigued\"\n   *\n   * @example\n   * If the input is \"paralysis\", the sanitized string is \"paralyzed\"\n   */\n  sanitizeInput(input) {\n    const conditions = {\n      fatigue: \"fatigued\",\n      paralysis: \"paralyzed\",\n      confusion: \"confused\",\n      petrification: \"petrified\",\n      stunning: \"stunned\",\n    };\n\n    for (const condition of Object.keys(conditions)) {\n      input = input.replace(new RegExp(condition, \"gi\"), conditions[condition]);\n    }\n    return input.trim();\n  }\n}\n",
    "import { AbstractParser } from \"../abstract-parser.js\";\nimport { sbcUtils } from \"../../sbcUtils.js\";\nimport { createItem } from \"../../sbcParser.js\";\nimport { conditionTypesRegex, damageTypesRegex } from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// Parse Resistances\nexport default class ResistanceParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"resistance\";\n  }\n\n  /**\n   * Parses a resistance string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} _line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, _line, _type = undefined) {\n    let rawInput = value\n      .replace(/(^[,;\\s]*|[,;\\s]*$)/g, \"\")\n      .replace(\"electricity\", \"electric\")\n      .replaceAll(\" energy\", \"\");\n    let input = this.splitText(rawInput);\n\n    this.app.processData.notes.defense.resist = [];\n\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n    // Get the current DR data\n    /** @type {Array<sbcTypes.DamageReductionEntry>} */\n    let eresValues = sbcInstance.actor.system.traits.eres.value;\n    /** @type {string} */\n    let eresCustom = sbcInstance.actor.system.traits.eres.custom;\n    /** @type {string} */\n    let cresConditions = sbcInstance.actor.system.traits.cres;\n\n    for (let i = 0; i < input.length; i++) {\n      let resistance = input[i].replace(/Effects/gi, \"\").trim();\n\n      // it's a condition resistance\n      if (resistance.match(conditionTypesRegex())) {\n        cresConditions += `${resistance.capitalize()};`;\n        this.app.processData.notes.defense.resist.push(cresConditions);\n      } else {\n        // It's likely an energy resistance string, but could be an ability.\n        // Execute a regex to parse the ER string into groups\n        const re = /^(?<type1>\\S+)(?:\\s*(?<operator>or|and)\\s*(?<type2>\\S+))?\\s*(?<amount>\\d+)$/g.exec(resistance);\n        if (!re) {\n          // It's not a resistance, so it's likely an ability\n\n          let searchEntity = {\n            search: new Set(), // The search strings\n            type: \"feats\",\n            item: resistance,\n          };\n          searchEntity.search = sbcUtils.createSearchSet([sbcUtils.capitalize(resistance)], true);\n\n          // If the input is found in one of the compendiums, generate an entity from that\n          /** @type {import (\"../../../pf1/module/documents/item/item-pf.mjs\").ItemPF} */\n          let entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n            itemTypes: [\"feat\"],\n            itemSubTypes: [\"classFeat\", \"misc\"],\n            classes: this.app.processData.characterData.classes,\n          });\n\n          if (!entity) {\n            searchEntity.itemTypes = \"misc\";\n            entity = await sbcUtils.generatePlaceholderEntity(searchEntity);\n          }\n\n          let foundItem = sbcUtils.checkForDuplicateItem(sbcInstance.actor, \"feat\", \"classFeat\", resistance, entity);\n\n          if (!foundItem) {\n            foundItem = sbcUtils.checkForDuplicateItem(sbcInstance.actor, \"feat\", null, resistance, entity);\n          }\n\n          if (!foundItem) {\n            await createItem(entity);\n          }\n        } else {\n          let { amount, type1, operator, type2 } = re.groups;\n          console.log(\n            sbcUtils.translate(\"parser.resistance.parseInfo\"),\n            amount,\n            type1,\n            operator,\n            type2,\n            type1?.search(damageTypesRegex()),\n            type2?.search(damageTypesRegex())\n          );\n\n          // If we found one or two types and at least one of them is a valid damage type,\n          // then we can add a new DR entry\n          if ((type1 && type1.match(damageTypesRegex())) || (type2 && type2.match(damageTypesRegex()))) {\n            type1 = type1?.match(damageTypesRegex())?.[0];\n            type2 = type2?.match(damageTypesRegex())?.[0];\n            const types = [type1, type2].filter((x) => !!x).map((x) => pf1.utils.createTag(x));\n\n            eresValues.push({\n              amount: amount,\n              types: types,\n              operator: operator === \"or\",\n            });\n            this.app.processData.notes.defense.resist.push(\n              [\n                this.getDamageTypePhrase(types[0]),\n                ...(types[1] ? [\" \", sbcUtils.translate(operator), \" \", this.getDamageTypePhrase(types[1])] : []),\n                \" \",\n                amount,\n              ].join(\"\")\n            );\n          }\n          // It's a custom reduction, as there is no place for that, just put it into custom reductions\n          else {\n            eresCustom += `${resistance.capitalize()};`;\n            this.app.processData.notes.defense.resist.push(resistance.capitalize());\n          }\n        }\n      }\n    }\n\n    await sbcInstance.actor.update({\n      \"system.traits.cres\": cresConditions.replace(/;$/, \"\"),\n      \"system.traits.eres.value\": eresValues,\n      \"system.traits.eres.custom\": eresCustom.replace(/;$/, \"\"),\n    });\n\n    return true;\n  }\n\n  /**\n   * Get the corresponding damage type phrase for the damage type\n   *\n   * @param {string} damageType       The key of the damage type\n   * @returns {string}                The phrase for the damage type\n   */\n  getDamageTypePhrase(damageType) {\n    if (pf1.config.damageResistances[damageType]) {\n      return pf1.config.damageResistances[damageType];\n    }\n\n    const materialTypeLabels = pf1.registry.materials.getLabels();\n    if (materialTypeLabels[damageType]) {\n      return materialTypeLabels[damageType];\n    }\n\n    const damageTypeLabels = pf1.registry.damageTypes.getLabels();\n    if (damageTypeLabels[damageType]) {\n      return damageTypeLabels[damageType];\n    }\n\n    return \"\";\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { savesRegex } from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nconst SaveTypes = Object.freeze({\n  Fort: Symbol(\"fort\"),\n  Ref: Symbol(\"ref\"),\n  Will: Symbol(\"will\"),\n});\n\n// Parse Saves and Save Context Notes\nexport default class SavesParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"save\";\n  }\n\n  /**\n   * Parses a save string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, _type = undefined) {\n    let input = value;\n    let saveContext = \"\";\n\n    // Unparenthesized semicolon\n    if (/;(?![^(]*\\))/.test(input)) {\n      [input, saveContext] = input.split(/;(?![^(]*\\))/);\n    }\n\n    const saves = this.splitText(input).map(sbcUtils.parseSubtext);\n\n    for (let k = 0; k < saves.length; k++) {\n      const line = saves[k][0];\n      let { type, value } = line.match(savesRegex()).groups;\n      type = type.toLowerCase();\n\n      if (!type) {\n        this.throwError(undefined, \"parser.save.error\", saves[k].join(\"\"), line);\n        continue;\n      }\n\n      this.app.processData.characterData.conversionValidation.attributes[type] = value;\n      this.app.processData.notes.defense[type + \"Save\"] = value;\n      if (saves[k][1]) {\n        saveContext += (saveContext ? \"\\n\" : \"\") + type.capitalize() + \": \" + saves[k][1];\n      }\n    }\n\n    // Check if there are context notes for the saves\n    if (saveContext) {\n      this.app.processData.miscNotes.saveNotes = saveContext.trim();\n      this.app.processData.notes.defense.saveNotes = saveContext.trim();\n      // await window.SBC.actor.update({\n      //   \"system.attributes.saveNotes\": saveContext.trim(),\n      // });\n    }\n\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\n// Parse Spell Resistance\nexport default class SRParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"spellResistance\";\n  }\n\n  /**\n   * Parses a spell resistance string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} _line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, _line, _type = undefined) {\n    const rawInput = value.replace(/(^[,;\\s]*|[,;\\s]*$)/g, \"\");\n    const input = sbcUtils.parseSubtext(rawInput);\n\n    let srTotal = input[0];\n    let srContext = \"\";\n    let srNotes = \"\";\n\n    if (input[1]) {\n      srContext = input[1];\n      srNotes = srContext;\n    } else if (/\\s*([-+]?\\d+)\\s+(.*)/.test(srTotal)) {\n      [srTotal, srContext] = srTotal.split(/\\s*([-+]?\\d+)\\s+(.*)/).slice(1);\n      srNotes = srContext;\n    }\n\n    this.app.processData.miscNotes.srNotes = srNotes;\n    this.app.processData.miscNotes.sr = srTotal.toString();\n    this.app.processData.notes.defense.srNotes = srNotes;\n    this.app.processData.notes.defense.sr = srTotal.toString();\n    // await window.SBC.actor.update({\n    //   \"system.attributes.sr.formula\": srTotal.toString(),\n    //   \"system.attributes.srNotes\": srNotes,\n    // });\n\n    return true;\n  }\n}\n",
    "import { AbstractParser } from \"../abstract-parser.js\";\nimport { damageTypesRegex } from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// Parse Weaknesses / Vulnerabilities\nexport default class WeaknessParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Defense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"weakness\";\n  }\n\n  /**\n   * Parses a weakness string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} _line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, _line, _type = undefined) {\n    const rawInput = value.replace(/(^[,;\\s]*|[,;\\s]*$)/g, \"\");\n    const input = this.splitText(rawInput);\n\n    this.app.processData.notes.defense[\"weakness\"] = rawInput;\n\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    /** @type {Array<string>} */\n    let dvValues = sbcInstance.actor.system.traits.dv.base;\n\n    console.log(input);\n    for (let i = 0; i < input.length; i++) {\n      let weakness = input[i].replace(/Effects/gi, \"\").trim();\n      const matchedWeakness = weakness.match(damageTypesRegex());\n\n      // it's a damage weakness / vulnerability\n      if (matchedWeakness) dvValues.push(matchedWeakness[0]);\n      else if (\n        !sbcInstance.actor.itemTypes.feat.find(\n          (item) => item.system.subType === \"misc\" && item.name.toLowerCase() === weakness.toLowerCase()\n        )\n      ) {\n        // It's a custom weakness / vulnerability\n        dvValues.push(weakness.capitalize());\n      }\n    }\n\n    await window.SBC.actor.update({\n      \"system.traits.dv\": dvValues,\n    });\n\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\n\n// Parse Ecology\nexport default class EcologyParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Misc\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"ecology\";\n  }\n\n  /**\n   * Parses an ecology string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, _type = undefined) {\n    sbcUtils.log(sbcUtils.translate(\"parser.ecology.status\", value));\n\n    const ecologyDesc = `<div><strong>${value.name}</strong>: ${value.entry}</div>`;\n\n    // Check, if there already is an ecology item\n    /** @type {import(\"../../../pf1/module/action-use/action-use.mjs\").ItemPF} */\n    const ecologyItem = window.SBC.actor.items.contents.find((item) => item.name === \"Ecology\");\n\n    // Update the existing item or create a new one\n    if (ecologyItem) {\n      const tempDesc = ecologyItem.system.description.value;\n      await ecologyItem.update({\n        \"system.description.value\": tempDesc + ecologyDesc,\n      });\n    } else {\n      const ecologyEntry = {\n        name: \"Ecology\",\n        type: \"misc\",\n        desc: ecologyDesc,\n        img: \"icons/environment/wilderness/tree-oak.webp\",\n      };\n\n      const placeholder = await sbcUtils.generatePlaceholderEntity(ecologyEntry, line);\n\n      await createItem(placeholder);\n    }\n\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\nimport { specialAbilityRegex, specialAbilityTypesRegex } from \"../../sbcRegex.js\";\n\n// Parse Special Abilities\nexport default class SpecialAbilityParser extends AbstractParser {\n  constructor(app) {\n    super(app);\n    this.specialAbilityCount = 0;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Misc\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"specialAbility\";\n  }\n\n  /**\n   * Parses a special ability string\n   *\n   * @param {string} value                  The value to parse\n   * @param {number} line                   The line number\n   * @param {string} _type                  The type of value\n   * @returns {Promise<boolean>}            The operation result\n   */\n  async _parse(value, line, _type = undefined) {\n    // Try to find the name of the special ability\n    let { type, name, description } = this.checkAbilityData(value, line);\n\n    // Create a placeholder for the special ability using the data found\n    const specialAbility = {\n      name: name || \"Special Ability\",\n      specialAbilityType: type.toLowerCase(),\n      type: \"misc\",\n      desc: `<p>${description.replaceAll(\"\\n\\n\", \"</p><p>\")}</p>`,\n    };\n\n    const placeholder = await sbcUtils.generatePlaceholderEntity(specialAbility, line);\n\n    // Check for an existing aura (the only time we need to worry about special abilities pre-existing AFAIK)\n    const existingAura = window.SBC.actor.itemTypes.feat.find(\n      (i) => i.name === `Aura: ${placeholder.name}` && i.system.subType === \"racial\"\n    );\n    if (existingAura) {\n      await existingAura.update({\n        \"system.description.value\": specialAbility.desc,\n      });\n    } else await createItem(placeholder);\n\n    this.app.processData.notes.specialAbilities.push({\n      name: name,\n      type: type,\n      typeName: pf1.config.abilityTypes[type].short,\n      description: sbcUtils.convertStringUnits(description),\n    });\n\n    return true;\n  }\n\n  /**\n   * Check the data for the special ability\n   *\n   * @param {string} value  The value to parse\n   * @param {number} _line   The line number\n   * @returns {{[key: string]: string}}    The name, description, and type of the special ability\n   */\n  checkAbilityData(value, _line) {\n    // (1) Hopefully, the statblock includes the abilityType, e.g. Su, Ex, or Sp\n    //     Because we can separate the name from that\n    // (2) If no abilityType is found, things start to get fuzzy,\n    //     Sometimes the name will be anything up to the first word which first letter is lowercase\n    //     Other times the name will include an \"of\" or \"the\" with a lower letter, which will break the name finding\n    //     So, try to find the first word starting with a lowercase letter, check if its one of the keywords [of, the, etc.]\n    //     And put that into the name\n\n    if (value.search(specialAbilityTypesRegex()) !== -1) {\n      // (1) Hopefully, the statblock includes the abilityType, e.g. Su, Ex, or Sp\n      //     Because we can separate the name from that\n\n      let { description, name, type } = specialAbilityRegex().exec(value).groups;\n      type = type.toLowerCase().replace(/[()]*/g, \"\");\n      if (type === \"--\") {\n        type = \"na\";\n      }\n      return { description: description.capitalize(), name: sbcUtils.capitalize(name), type };\n    }\n\n    // (2) If no abilityType is found, things aren't solvable.\n    //     Sometimes the name will be anything up to the first word which first letter is lowercase\n    //     Other times the name will include an \"of\" or \"the\" with a lower letter, which will break the name finding\n    //     Sometimes, the name isn't present because this line is actually part of the previous ability.\n    //     Removing this code until WIP: split abilities by titles instead of by line\n\n    let name = sbcUtils.translate(\"parser.specialAbility.placeholderName\", { value: ++this.specialAbilityCount });\n    let description = value.trim();\n    let type = \"na\";\n\n    this.throwError(undefined, \"parser.specialAbility.matchError\");\n    return { name, description, type };\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\n\n// Parse Tactics\nexport default class TacticsParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Misc\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"tactics\";\n  }\n\n  /**\n   * Parses a tactics\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async parse(value, line, _type = undefined) {\n    sbcUtils.log(sbcUtils.translate(\"parser.tactics.status\", value));\n\n    const tacticsDesc = `<div><strong>${value.name}</strong>: ${value.entry}</div>`;\n\n    // Check, if there already is a tactics item\n    /** @type {import(\"../../../pf1/module/action-use/action-use.mjs\").ItemPF} */\n    const tacticsItem = window.SBC.actor.items.contents.find((item) => item.name === \"Tactics\");\n\n    // Update the existing item or create a new one\n    if (tacticsItem) {\n      const tempDesc = tacticsItem.system.description.value;\n      await tacticsItem.update({\n        \"system.description.value\": tempDesc + tacticsDesc,\n      });\n    } else {\n      const tacticsEntry = {\n        name: sbcUtils.translate(\"parser.tactics.placeholderName\"),\n        type: \"misc\",\n        desc: tacticsDesc,\n        img: \"icons/skills/targeting/crosshair-pointed-orange.webp\",\n      };\n\n      const placeholder = await sbcUtils.generatePlaceholderEntity(tacticsEntry, line);\n\n      await createItem(placeholder);\n    }\n\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { sbcError } from \"../../sbcError.js\";\nimport { NaturalAttacks } from \"../../Content/index.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\nimport {\n  materialAddonsRegex,\n  materialsBasicRegex,\n  materialsNonBasicRegex,\n  naturalAttacksRegex,\n} from \"../../sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// Parse Attacks\nexport default class AttackParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Offense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"attack\";\n  }\n\n  /**\n   * Parses an attack string\n   *\n   * @param {string} value        The attack string to parse\n   * @param {number} line         The line number\n   * @param {string} type         The type of attack (mwak, rwak, etc.)\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, type) {\n    if (!value) return false;\n\n    // The next task is to re-organize the code below to accomplish the following in order:\n    // 1. Get the raw attack name without any \"nonlethal\", \"melee\", \"range\", or \"touch\"\n    // 2. Check if there exists a weapon with the given name.\n    // 3. If there is a weapon, check the attack bonus it uses to compare with statblock\n    // 4. If there is a weapon, check the enhancement bonus to compare with statblock\n    // 5. If there is a weapon, check the damage formula to compare with statblock\n    // 6. If there is a weapon, check the damage bonus to compare with statblock\n    // 7. If 3-6 are all matching, then check the system setting for whether to make the attack.\n    // 8. If any of 3-6 are not matching, then create the attack and modify it to match the statblock\n    // 9. If 2-8 don't happen, then proceed with creating the attack manually as normal.\n\n    // [1] Sanitize the input\n    let rawInput = value\n      .replace(/, or/g, \" or\")\n      .replace(/, \\band\\b /g, \" and \")\n      .replace(/\\band\\b (?![^(]*\\)|\\()/g, \",\");\n\n    // [2] Split it into attackGroups denoted by an \"or\"\n    //     All attacks in an attackGroup can be part of a full attack action\n    //     Loop over these attackGroups to handle each separately\n    const inputAttackGroups = rawInput.split(/\\bor\\b/g);\n    const attackGroupKeys = Object.keys(inputAttackGroups);\n    const hasMultiAttack = window.SBC.actor.itemTypes.feat.find(\n      (feat) => feat.name === \"Multiattack\" || feat.system.tag === \"multiAttack\"\n    );\n    const unClass = window.SBC.actor.itemTypes.class.find((classItem) => {\n      return (\n        classItem.system.tag === \"monkUnchained\" ||\n        classItem.flags.core?.sourceId === \"Compendium.pf1.classes.Item.5mQIOIw4hDhlREPo\"\n      );\n    });\n    const monkClass = window.SBC.actor.itemTypes.class.find((classItem) => {\n      return (\n        classItem.system.tag === \"monk\" ||\n        classItem.flags.core?.sourceId === \"Compendium.pf1.classes.Item.W8dxwZ1CZiwLKsqr\"\n      );\n    });\n\n    const isUnchainedMonk = unClass ? true : false;\n    const flurryClass = unClass ? unClass : monkClass;\n    console.log(\"FS| Unchained Monk\", unClass, monkClass, isUnchainedMonk, flurryClass);\n    for (let i = 0; i < attackGroupKeys.length; i++) {\n      // [3] Split the attacks found in the attackGroup\n      //     and loop over each attack separately\n      const inputAttackGroup = this.fixSplitGroup(this.splitText(inputAttackGroups[i]));\n      console.log(\"FS| Attack Group\", inputAttackGroup, this.splitText(inputAttackGroups[i]));\n\n      // Loop over all attacks in the attackGroup\n      for (let index = 0; index < inputAttackGroup.length; index++) {\n        console.log(inputAttackGroup[index], index, line, type);\n        await this._processAttack(\n          inputAttackGroup[index].trim(),\n          index,\n          line,\n          type,\n          hasMultiAttack,\n          isUnchainedMonk,\n          flurryClass\n        );\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Fix the split group, starting from the end of the array\n   * - If the previous item starts with a +, add the current item to the previous item\n   * - Otherwise, return the current item\n   * - Filter out any empty items\n   * - Reverse the array to the original order and return it\n   *\n   * @param {Array<string>} input The array of items to fix\n   * @returns {Array<string>}     The fixed array of items\n   */\n  fixSplitGroup(input) {\n    const reversedInput = input.reverse();\n    return reversedInput\n      .map((element, index) => {\n        if (index > 0 && reversedInput[index - 1].startsWith(\"+\")) return `${element} ${reversedInput[index - 1]}`;\n        if (!/^[\\d+-]+\\//.test(element)) return element;\n      })\n      .filter((element) => !!element)\n      .reverse();\n  }\n\n  /**\n   * Process the attack string\n   *\n   * @param {string} inputAttack      The attack string to parse\n   * @param {number} index            The index of the attack in the attack group\n   * @param {number} line             The line number\n   * @param {string} type             The type of attack (mwak, rwak, etc.)\n   * @param {boolean} hasMultiAttack  True/False, does the creature have the multiattack feat?\n   * @param {boolean} isUnchainedMonk True/False, is the creature an Unchained Monk?\n   * @param {import(\"../../../pf1/module/documents/item/item-class.mjs\").ItemClassPF} flurryClass The class to use for Flurry of Blows\n   * @returns {Promise<boolean>}      Always true, unless an error occurs\n   * @private\n   */\n  async _processAttack(inputAttack, index, line, type, hasMultiAttack, isUnchainedMonk, flurryClass) {\n    console.log(\"FS| Processing Attack\", inputAttack, index, line, type, hasMultiAttack, isUnchainedMonk, flurryClass);\n\n    const actor = window.SBC.actor;\n\n    // [4] Parse the attack and save the found data in two temporary constructs\n    // attackData - Saves all parsed data related to the parent attack document.\n    // actionData - Saves all parsed data related to the child action document(s).\n    // weaponAttackDetails - Saves all parsed data related to the weapon attack item.\n    // attackComparison - Saves all parsed data related to comparing the attack to the weapon attack item.\n    // foundAddonTerms - Saves all found addon terms to be used later.\n    // foundMaterialTerm - Saves the found material term to be used later.\n    /** @type {sbcTypes.AttackData} */\n    let attackData = {\n      attackName: \"\",\n      formattedAttackName: \"\",\n      actions: [],\n      img: \"\",\n      subType: \"weapon\",\n      attackNotes: \"\",\n      effectNotes: [],\n      specialEffects: \"\",\n      isMasterwork: false,\n      enhancementBonus: null,\n      isPrimaryAttack: true,\n      held: \"normal\",\n      isTouch: false,\n      isNonlethal: false,\n      isNatural: false,\n      isBroken: false,\n      baseTypes: [],\n      weaponGroups: {\n        value: [],\n        custom: \"\",\n      },\n      material: null,\n      addons: {},\n    };\n\n    /** @type {sbcTypes.ActionData} */\n    let actionData = {\n      numberOfAttacks: 1,\n      numberOfIterativeAttacks: 0,\n      iterativeFormula: \"\",\n\n      attackParts: [],\n      formulaicAttacksCountFormula: \"\",\n      formulaicAttacksBonusFormula: \"\",\n\n      inputAttackModifier: 0,\n      calculatedAttackBonus: 0,\n\n      attackAbilityType: \"\",\n      attackAbilityModifier: 0,\n      defaultAttackAbility: \"\",\n\n      damage: \"\",\n      damageAbilityType: \"\",\n      numberOfDamageDice: 0,\n      damageDie: 0,\n      damageBonus: 0,\n      damageModifier: 0,\n\n      damageParts: [],\n      nonCritParts: [],\n\n      defaultDamageType: \"\",\n      damageTypes: new Set(),\n      specialDamageType: \"\",\n      hasSpecialDamageType: false,\n      weaponSpecial: \"-\",\n      critRange: 20,\n      critMult: 2,\n      damageMult: 1,\n\n      attackRangeUnits: \"\",\n      attackRangeIncrement: \"\",\n      useOriginalDamage: false,\n      featAttackBonus: 0,\n      featDamageBonus: 0,\n      featAttackBonusString: \"\",\n      featDamageBonusString: \"\",\n\n      hasMultiattack: hasMultiAttack,\n      isUnchainedMonk: isUnchainedMonk,\n      flurryClass: flurryClass,\n      isFlurryOfBlows: false,\n      flurryOfBlowsType: null,\n    };\n\n    let foundAddonTerms;\n    let foundMaterialTerm;\n    let foundBaseMaterialTerm;\n\n    /** @type {sbcTypes.WeaponAttackDetails}*/\n    let weaponAttackDetails = {\n      attackName: \"\",\n      weaponGroups: {\n        value: [],\n        custom: \"\",\n      },\n      isMasterwork: false,\n      attackAbilityType: \"\",\n      attackAbilityModifier: 0,\n      damageAbilityType: \"\",\n      damageAbilityMax: null,\n      damageBonus: 0,\n      damageMult: 1,\n      critRange: 20,\n      critMult: 2,\n      iterativeFormula: \"\",\n      damageFormula: \"\",\n      originalDamageFormula: \"\",\n      featAttackBonus: 0,\n      featDamageBonus: 0,\n      featAttackBonusString: \"\",\n      featDamageBonusString: \"\",\n      baseMaterial: null,\n      material: null,\n      addons: [],\n    };\n\n    /** @type {sbcTypes.AttackComparison}*/\n    let attackComparison = {\n      statblockIterativeFormula: \"\",\n      statblockDamageFormula: \"\",\n      statblockDamageBonus: 0,\n      statblockFullFormula: \"\",\n      statblockEnhancementBonus: 0,\n\n      itemExists: false,\n      itemIterativeFormula: \"\",\n      itemDamageFormula: \"\",\n      itemDamageBonus: 0,\n      itemFullFormula: \"\",\n      itemEnhancementBonus: 0,\n    };\n\n    console.log(\"FS| Input Attack\", inputAttack);\n    // Preliminary check for Flurry of Blows, as this requires us to rename the attack\n    inputAttack = this._processFlurryOfBlows(inputAttack, attackData);\n\n    // [4.A] Parse attack related data, e.g. name, number, iterations and modifiers\n    //       This is mainly everything not in parentheses in any given attack\n\n    // Process attack details (touch, nonlethal, broken, etc.)\n    inputAttack = this._processAttackProperties(inputAttack, attackData, index);\n\n    // Process Enhancement Bonus and Masterwork\n    this._processEnhancementBonus(inputAttack, attackData, attackComparison);\n\n    // Process materials and addons\n    [foundAddonTerms, foundMaterialTerm, foundBaseMaterialTerm] = this._processMaterialsAndAddons(\n      inputAttack,\n      attackData\n    );\n    if (!foundBaseMaterialTerm) {\n      foundBaseMaterialTerm = \"steel\";\n      attackData.baseMaterial = \"steel\";\n    }\n\n    // Process the attack name\n    this._processAttackName(inputAttack, attackData, foundAddonTerms, foundMaterialTerm, foundBaseMaterialTerm, line);\n\n    // Try to find an existing weapon from the Inventory tab for this attack\n    let weapon = await this._acquireWeapon(attackData, foundAddonTerms);\n    console.log(\"FS| Weapon\", weapon);\n    // If we found a weapon or natural attack, get the attack data from it\n    // In the case of weapons, we have to create an attack item, even if the setting says not to\n    /** @type {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} */\n    let newAttack = null;\n    if (weapon) {\n      if (!attackData.isNatural) {\n        let newAttackData = pf1.documents.item.ItemAttackPF.fromItem(weapon);\n        newAttack = (await actor.createEmbeddedDocuments(\"Item\", [newAttackData]))[0];\n      } else {\n        newAttack = (await createItem(weapon))[1];\n      }\n\n      attackData.attackName = weapon.name;\n      let match = null;\n      if (\n        (match = weapon.name.match(\n          new RegExp(\"\\\\b\" + pf1.config.actorSizes[window.SBC.actor.system.traits.size.base] + \"\\\\b\")\n        )) !== null\n      ) {\n        attackData.attackName = weapon.name.replace(match[0], \"\").trim();\n      }\n\n      attackData.formattedAttackName = attackData.attackName;\n    }\n    console.log(\"FS| New Attack\", newAttack);\n\n    let weaponEqualsAttack = attackData.isNatural;\n    // If we have the attack data, we need to process it for later comparisons.\n    if (newAttack) {\n      type = await this._processWeaponDetails(\n        attackComparison,\n        attackData,\n        weaponAttackDetails,\n        weapon,\n        newAttack,\n        type\n      );\n    }\n    console.log(\"FS| Weapon Attack Details\", weaponAttackDetails);\n\n    // The sections below (attackModifier, numberOfIterativeAttacks, damage and effect related data)\n    // are processed from the statblocks inputAttack string. A lot of extra work, but necessary to be\n    // able to compare the statblocks attack with the weapon attack item.\n    // attackModifier\n    this._processAttackModifier(inputAttack, actionData, attackData, line);\n\n    // numberOfIterativeAttacks, when given in the statblock in the form of +X/+Y/+Z\n    this._processNumberOfIterativeAttacks(inputAttack, actionData, attackData, attackComparison);\n\n    // attackData.attackName = attackData.attackName.replace(/(^\\+[1-5])|(\\+[1-5]$)/g, \"\").trim();\n\n    // [4.B] Parse damage and effect related data, e.g. number and type of damage dice\n    //       This is mainly everything in parentheses in any given attack\n    // If the attack has damage dice\n    this._processAttackDamage(inputAttack, attackData, actionData, attackComparison);\n\n    // [4.C] Compare the item data to the statblock data if it exists,\n    //       then decide if we need to create a new attack\n    if (attackComparison.itemExists) {\n      sbcUtils.log(\n        \"FS| Comparing statblock data to attack item:\\n\" +\n          `Iterative Formula: ${attackComparison.statblockIterativeFormula} vs ${attackComparison.itemIterativeFormula}\\n` +\n          `Damage Formula: ${attackComparison.statblockDamageFormula} vs ${attackComparison.itemDamageFormula}\\n` +\n          `Damage Bonus: ${attackComparison.statblockDamageBonus} vs ${attackComparison.itemDamageBonus}\\n` +\n          `Enhancement Bonus: ${attackComparison.statblockEnhancementBonus} vs ${attackComparison.itemEnhancementBonus}\\n` +\n          `Full Formula: ${attackComparison.statblockFullFormula} vs ${attackComparison.itemFullFormula}\\n`\n      );\n\n      // If the attack is identical to the statblock, we may not need to make a new attack\n      if (\n        attackComparison.statblockIterativeFormula === attackComparison.itemIterativeFormula &&\n        attackComparison.statblockDamageFormula === attackComparison.itemDamageFormula &&\n        attackComparison.statblockDamageBonus === attackComparison.itemDamageBonus &&\n        attackComparison.statblockEnhancementBonus === attackComparison.itemEnhancementBonus &&\n        attackComparison.statblockFullFormula === attackComparison.itemFullFormula\n      ) {\n        weaponEqualsAttack = true;\n      }\n    }\n\n    // Exit this attack early if the attack already exists and is identical to the statblock\n    if (attackComparison.itemExists && weaponEqualsAttack && !attackData.isNatural) {\n      if (!window.SBC.settings.getSetting(\"createAttacks\")) {\n        console.log(\"FS| Attack already exists and is identical to the statblock. Skipping creation.\");\n        // Clean up the attack if it was created and shouldn't be.\n        await window.SBC.actor.deleteEmbeddedDocuments(\n          \"Item\",\n          [newAttack?.id].filter((x) => !!x)\n        );\n      }\n    } else {\n      // Bring in our data from earlier\n      if (attackComparison.itemExists) {\n        Object.assign(actionData, {\n          attackAbilityType: weaponAttackDetails.attackAbilityType,\n          attackAbilityModifier: weaponAttackDetails.attackAbilityModifier,\n          damageAbilityType: weaponAttackDetails.damageAbilityType,\n          featAttackBonus: weaponAttackDetails.featAttackBonus,\n          featDamageBonus: weaponAttackDetails.featDamageBonus,\n          featAttackBonusString: weaponAttackDetails.featAttackBonusString,\n          featDamageBonusString: weaponAttackDetails.featDamageBonusString,\n          useOriginalDamage: attackComparison.statblockDamageFormula === attackComparison.itemDamageFormula,\n        });\n      }\n\n      // [4.D] Continue to parse the attack and action data and calculations\n      // Handle melee attacks\n      switch (type) {\n        case \"mwak\":\n          this._processMeleeAttackData(newAttack, actionData, attackData);\n          break;\n\n        case \"rwak\":\n          this._processRangedAttackData(newAttack, actionData, attackData, inputAttack);\n          break;\n\n        case \"twak\":\n          this._processThrownAttackData(newAttack, actionData, attackData, inputAttack);\n          break;\n\n        default:\n          if (attackData.isNatural) {\n            this._processNaturalAttackData(newAttack, actionData, attackData);\n          }\n          break;\n      }\n\n      // Handle swarm attacks, as these are neither melee nor ranged\n      if (attackData.attackName.search(/\\bSwarm\\b/i) !== -1) {\n        type = \"other\";\n      }\n\n      // Handle multiple attacks of the same type\n      // Note: These are not iterative attacks!\n      if (inputAttack.match(/^\\d+/) !== null) {\n        actionData.numberOfAttacks = parseInt(inputAttack.match(/(^\\d+)/)[1]);\n        attackData.attackNotes = actionData.numberOfAttacks + \" \" + attackData.attackNotes;\n      }\n\n      // Handle baseTypes\n      this._processBaseTypes(newAttack, attackData, actionData);\n\n      // Handle feat/feature bonuses\n      if (!attackComparison.itemExists) {\n        await this._processFeatBonuses(attackData, actionData);\n      }\n\n      // Calculate Attack and, if needed, compensate for differences between input attackModifier and system-derived attackModifier\n      this._calculateAttackBonus(actionData, attackData);\n\n      // Calculate Damage and, if needed, compensate for differences between\n      // input damageModifier and system-derived damageModifier\n      const damageDiceString = this._calculateDamageBonus(actionData, attackData, weaponAttackDetails);\n\n      // If we have attack data from before, we can get damage types from it.\n      // Otherwise, it's an unknown, so we default to untyped.\n      this._processDamageTypes(newAttack, weapon, attackData, actionData);\n\n      // ... then push the damagePart\n      actionData.damageParts.push({\n        formula: damageDiceString,\n        types: actionData.damageTypes,\n        // type: {\n        //   values: actionData.damageTypes,\n        //   custom: actionData.customDamageTypes,\n        // },\n      });\n\n      // Push extra attacks from numberOfAttacks\n      for (let i = 1; i < actionData.numberOfAttacks; i++) {\n        let prefixAttackName = i + 1 + window.SBC.config.const.suffixMultiples[Math.min(3, i)];\n        actionData.attackParts.push({\n          formula: \"\",\n          name: prefixAttackName + \" \" + attackData.attackName.replace(/e?s$/, \"\").capitalize(),\n        });\n      }\n\n      // Push extra attacks from numberOfIterativeAttacks\n      // WIP: This does not register or handle statblocks with errors in the iterations\n      // if (actionData.numberOfIterativeAttacks > 0 || actionData.numberOfAttacks === 0) {\n      //     actionData.formulaicAttacksCountFormula = \"ceil(@attributes.bab.total/5)-1\"\n      // }\n\n      // [5] Create an attack from attackData\n      // If the attack already exists, update it instead\n      let newAttackData = null;\n      let attackUpdates = null;\n\n      [newAttackData, attackUpdates] = this._prepareNewAttackData(\n        newAttack,\n        newAttackData,\n        attackData,\n        actionData,\n        type,\n        attackUpdates\n      );\n      console.log(\"FS| New Attack Data\", newAttackData);\n      console.log(\"FS| Attack Updates\", attackUpdates);\n\n      // [6] Create an action from actionData\n      //     which in turn needs to be pushed to the in [5] created attack\n      /** @type {import(\"../../../pf1/module/components/action.mjs\").ItemAction} */\n      let newActionData = null;\n      newActionData = await this._prepareNewAction(newAttack, newActionData, actionData, attackData, type);\n      console.log(\"FS| New Action Data\", newActionData);\n\n      // [7] Create the final document\n      const attack = await this._createFinalAttack(\n        newAttack,\n        newAttackData,\n        newActionData,\n        attackData,\n        attackUpdates,\n        type\n      );\n      if (weapon && weapon.isOwned) {\n        console.log(attack);\n        weapon.createItemLink(\"children\", attack);\n      }\n    }\n  }\n\n  /**\n   * Process the Flurry of Blows attack properties\n   *\n   * @param {string} inputAttack              The attack string to parse\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @returns {string}                        The modified inputAttack\n   * @private\n   */\n  _processFlurryOfBlows(inputAttack, attackData) {\n    const flurryMatch = inputAttack.match(/flurry of blows\\s*\\((.*?)\\)/i);\n    if (flurryMatch) {\n      console.log(\"FS| Flurry of Blows 0\", inputAttack);\n      inputAttack = inputAttack.replace(/flurry of blows\\s*\\((.*?)\\)/i, flurryMatch[1]).trim();\n      attackData.isFlurryOfBlows = true;\n      //attackData.attackName = attackData.attackName.replace(flurryMatch[0], flurryMatch[1]).trim();\n\n      console.log(\"FS| Flurry of Blows 1\", flurryMatch, inputAttack);\n    } else if (inputAttack.search(/flurry of blows/i) !== -1) {\n      inputAttack = inputAttack.replace(/flurry of blows/i, \"unarmed strike\");\n      attackData.isFlurryOfBlows = true;\n    }\n\n    return inputAttack;\n  }\n\n  /**\n   * Process the attack properties\n   * - Touch\n   * - Nonlethal\n   * - Broken\n   *\n   * @param {string} inputAttack              The attack string to parse\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {number} index                    The index of the attack in the attack group\n   * @returns {void}\n   * @private\n   */\n  _processAttackProperties(inputAttack, attackData, index) {\n    // Search for Touch or Ranged Touch\n    if (inputAttack.search(/\\d+\\s*.*((?:ranged|melee|\\+\\d+)?\\s+touch)\\b\\s+\\(/i) !== -1) {\n      attackData.isTouch = true;\n\n      // Remove the found data from the current input\n      inputAttack = inputAttack.replace(/((?:ranged|melee|(\\+\\d+))?\\s+touch)\\b/i, \"$2\");\n\n      //No valid name remaining\n      if (!/[a-z](?![^(]*\\))/i.test(inputAttack)) {\n        attackData.attackName = \"Attack \" + (index + 1);\n      }\n    }\n\n    // Search for Nonlethal flag\n    if (inputAttack.search(/\\d+\\s*((?:(?:ranged|melee)\\s*)?nonlethal)/i) !== -1) {\n      attackData.isNonlethal = true;\n\n      // Remove the found data from the current input\n      inputAttack = inputAttack.replace(/((?:(?:ranged|melee)\\s*)?nonlethal)/i, \"\");\n\n      //No valid name remaining\n      if (!/[a-z](?![^(]*\\))/i.test(inputAttack)) {\n        attackData.attackName = \"Attack \" + (index + 1);\n      }\n    }\n\n    // Search for Broken flag\n    if (inputAttack.search(/\\bbroken\\b/i) !== -1) {\n      attackData.isBroken = true;\n\n      // Remove the found data from the current input\n      //inputAttack = inputAttack.replace(/(\\bbroken\\b)/i, \"\");\n\n      //No valid name remaining\n      if (!/[a-z](?![^(]*\\))/i.test(inputAttack)) attackData.attackName = \"Attack \" + (index + 1);\n    }\n\n    return inputAttack;\n  }\n\n  /**\n   * Process the enhancement bonus and masterwork properties\n   *\n   * @param {string} inputAttack                          The attack string to parse\n   * @param {sbcTypes.AttackData} attackData              The attack data to modify\n   * @param {sbcTypes.AttackComparison} attackComparison  The attack comparison data to modify\n   * @returns {void}\n   * @private\n   */\n  _processEnhancementBonus(inputAttack, attackData, attackComparison) {\n    // enhancementBonus\n    const enhBonusMatch = inputAttack.match(/(?:\\W\\+|^\\+)(\\d+)\\s+(?!\\(|(?:ranged |melee )?touch)/);\n    if (enhBonusMatch) {\n      attackData.enhancementBonus = parseInt(enhBonusMatch[1]);\n      attackData.attackNotes = \"+\" + attackData.enhancementBonus + \" \" + attackData.attackNotes;\n\n      attackComparison.statblockEnhancementBonus = +attackData.enhancementBonus;\n    }\n\n    // Masterwork\n    if (inputAttack.match(/\\bmwk\\b/i) !== null) {\n      attackData.isMasterwork = true;\n      attackData.attackNotes = \"mwk \" + attackData.attackNotes;\n    }\n  }\n\n  /**\n   * Process the materials and addons\n   *\n   * @param {string} inputAttack              The attack string to parse\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @returns {[Array<string>, string, string]}       The modified foundAddonTerms, foundMaterialTerm, and foundBaseMaterialTerm\n   */\n  _processMaterialsAndAddons(inputAttack, attackData) {\n    let foundAddonTerms = [];\n    let foundMaterialTerm = \"\";\n    let foundBaseMaterialTerm = \"\";\n\n    // Handle base materials\n    const baseMaterialMatch = inputAttack.match(materialsBasicRegex());\n    if (baseMaterialMatch) {\n      attackData.baseMaterial = baseMaterialMatch[0];\n      foundBaseMaterialTerm = attackData.baseMaterial;\n    }\n\n    // Handle materials\n    const materialMatch = inputAttack.match(materialsNonBasicRegex());\n    if (materialMatch) {\n      attackData.material = materialMatch[0];\n      foundMaterialTerm = attackData.material;\n      attackData.material =\n        pf1.registry.materials.contents.find(\n          (mt) => mt.name === attackData.material.capitalize() || mt.id === attackData.material\n        )?.id ?? null;\n      //altName = altName.replace(patternMaterialsNonBasics, \"\").trim();\n    }\n\n    // Handle addons\n    const materialAddonMatch = inputAttack.match(materialAddonsRegex());\n    if (materialAddonMatch) {\n      foundAddonTerms = materialAddonMatch;\n      foundAddonTerms.forEach((element, index) => {\n        foundAddonTerms[index] =\n          pf1.registry.materials.contents.find(\n            (mt) => mt.name === element.capitalize() || mt.id === element.toLowerCase().replace(/\\s/, \"\")\n          )?.id ?? null;\n      });\n      foundAddonTerms = foundAddonTerms.filter((x) => !!x);\n      attackData.addons = {};\n      foundAddonTerms.forEach((element) => {\n        element = element.toLowerCase().replace(/\\s/, \"\");\n        attackData.addons[element] = element;\n      });\n      //altName = altName.replace(patternAddons, \"\");\n    }\n\n    return [foundAddonTerms, foundMaterialTerm, foundBaseMaterialTerm];\n  }\n\n  /**\n   * Process the attack name\n   *\n   * @param {string} inputAttack              The attack string to parse\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {Array<string>} foundAddonTerms   The found addon terms to modify\n   * @param {string} foundMaterialTerm        The found material term to modify\n   * @param {string} foundBaseMaterialTerm    The found base material term to modify\n   * @param {number} _line                     The line number\n   * @returns {void}\n   * @private\n   */\n  _processAttackName(inputAttack, attackData, foundAddonTerms, foundMaterialTerm, foundBaseMaterialTerm, _line) {\n    // attackName\n    if (/((?:[+1-5a-zA-Z’']| (?=[+1-5a-zA-Z’'])|\\*)+)[ +0-9(/]+\\(*/.test(inputAttack) && !attackData.attackName) {\n      console.log(\"FS| Attack Name 1\", inputAttack);\n      attackData.attackName = inputAttack\n        .match(/((?:[+1-5a-zA-Z’'-]| (?=[+1-5a-zA-Z’'-])|\\*)+)[ +0-9(/]+\\(*/)[1]\n        .replace(/^ | $|\\bmwk\\b |\\*|\\+$/gi, \"\")\n        .replace(/\\+[1-5]$/, \"\")\n        .replace(/^\\d+/, \"\")\n        .trim()\n        .replace(/(^\\+[1-5])|(\\+[1-5]+$)/g, \"\")\n        .trim()\n        .replace(new RegExp(`(?<!Magic\\\\s)${foundMaterialTerm}`, \"i\"), \"\")\n        .replace(new RegExp(`(?<!Magic\\\\s)${foundBaseMaterialTerm}`, \"i\"), \"\")\n        .replace(new RegExp(`\\\\b(${foundAddonTerms.join(\"|\")})\\\\b`), \"\");\n\n      if (\n        (foundMaterialTerm.toLowerCase() === \"stone\" || foundBaseMaterialTerm.toLowerCase() === \"stone\") &&\n        foundAddonTerms.includes(\"magic\")\n      ) {\n        attackData.attackName = attackData.attackName.replace(/stone/i, \"Magic Stone\").trim();\n      }\n\n      attackData.attackNotes += attackData.attackName + \" \";\n    }\n\n    attackData.attackName = attackData.attackName.trim();\n    // Set the formattedAttackName to use later\n    attackData.formattedAttackName = attackData.attackNotes.trim();\n  }\n\n  /**\n   * Acquire the weapon from the inventory or compendium\n   *\n   * @param {sbcTypes.AttackData} attackData  The attack data to use\n   * @param {Array<string>} foundAddonTerms   The found addon terms to use\n   * @returns {Promise<import(\"../../../pf1/module/documents/item/item-weapon.mjs\").ItemWeaponPF>} The weapon to use\n   * @private\n   * @async\n   */\n  async _acquireWeapon(attackData, foundAddonTerms) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n\n    let weapon = window.SBC.actor.itemTypes.weapon.find((weapon) => {\n      const weaponName = weapon.name\n        .replace(`+${weapon.system.enh}`, \"\")\n        .replace(pf1.registry.materials.get(weapon.system.material.normal.value)?.name ?? \"\", \"\")\n        .replace(/\\s{2,}/g, \" \")\n        .replace(\"Masterwork \", \"\")\n        .trim()\n        .toLowerCase();\n\n      const attackName = attackData.attackName.toLowerCase();\n\n      // Check similarity between attack and weapon name. A similarity score of >=65% is probably good enough. Tweak as necessary\n      let similarity = sbcUtils.stringSimilarity(attackName, weaponName);\n      console.log(\"Comparing weapon:\", weaponName, \"item:\", attackName, \"similarity:\", similarity);\n      if (similarity < 0.65) {\n        const shortWeaponName = weaponName.replace(\n          `${pf1.config.actorSizes[window.SBC.actor.system.traits.size.base].toLowerCase()} `,\n          \"\"\n        );\n        let similarity = sbcUtils.stringSimilarity(\n          attackName,\n          //          `${pf1.config.actorSizes[window.SBC.actor.system.traits.size.base]} ${attackName}`,\n          shortWeaponName\n        );\n        if (similarity < 0.65) {\n          return false;\n        }\n      }\n\n      console.log(\"Comparing weapon properties...\");\n      if (attackData.isMasterwork && !weapon.system.masterwork) {\n        console.log(\"Masterwork status did not match.\");\n        return false;\n      }\n\n      if (attackData.isBroken && !weapon.system.broken) {\n        console.log(\"Broken status did not match.\");\n        return false;\n      }\n\n      if (attackData.enhancementBonus && +attackData.enhancementBonus !== weapon.system.enh) {\n        console.log(\"Enhancement bonus did not match.\");\n        return false;\n      }\n\n      // Addon check\n      if (foundAddonTerms.length > 0) {\n        let weaponAddons = weapon.system.material.addon;\n        for (let addon of foundAddonTerms) {\n          if (!weaponAddons.includes(addon)) {\n            console.log(\"Addon did not match.\");\n            return false;\n          }\n        }\n      }\n\n      // Composite *bow check\n      // if(!result && /Composite/i.test(attackData.attackName))\n      //     result = new RegExp(attackData.attackName, 'i').test(weaponLowerCase)\n\n      return true;\n    });\n\n    if (!weapon) {\n      // Weapon wasn't found in the inventory, so let's see if the attack is a natural attack\n      // Handle natural attacks\n      if (naturalAttacksRegex().test(attackData.attackName)) {\n        attackData.isNatural = true;\n        attackData.subType = \"natural\";\n\n        // Clean up the plural name\n        let tempNaturalAttackName = \"\";\n        tempNaturalAttackName = attackData.attackName\n          .match(naturalAttacksRegex())[0]\n          .split(\" \")\n          .map((w) => w.capitalize())\n          .join(\" \");\n        let tempNaturalAttackNameSingular = tempNaturalAttackName.replace(/s$/, \"\");\n\n        // If the natural attack is from the system compendium, use that\n        if (\n          Object.values(window.SBC.config.naturalAttacks).find(\n            (na) => na === tempNaturalAttackName || na === tempNaturalAttackNameSingular\n          )\n        ) {\n          weapon = await compendiumOps.findEntityInCompendia(\n            {\n              name: tempNaturalAttackName,\n              altName: tempNaturalAttackName.replace(/s$/, \"\"),\n              item: tempNaturalAttackName,\n            },\n            {\n              itemType: \"attack\",\n            }\n          );\n        }\n      }\n    }\n\n    return weapon;\n  }\n\n  /**\n   * Process the weapon details\n   *\n   * @param {sbcTypes.AttackComparison} attackComparison          The attack comparison data to modify\n   * @param {sbcTypes.AttackData} attackData                      The attack data to use\n   * @param {sbcTypes.WeaponAttackDetails} weaponAttackDetails    The weapon attack details to modify\n   * @param {import(\"../../../pf1/module/documents/item/item-weapon.mjs\").ItemWeaponPF} weapon    The weapon to use\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack The new attack to use\n   * @param {string} type                                         The type of attack (mwak, rwak, etc.)\n   * @returns {Promise<string>}                                   The modified type\n   * @private\n   * @async\n   */\n  async _processWeaponDetails(attackComparison, attackData, weaponAttackDetails, weapon, newAttack, type) {\n    attackComparison.itemExists = true;\n    weaponAttackDetails.attackName = newAttack.name;\n    weaponAttackDetails.weaponGroups = weapon.system.weaponGroups;\n\n    if (!attackData.isBroken && weapon.system.broken) {\n      weaponAttackDetails.isBroken = true;\n    }\n\n    if (weapon.system.material) {\n      weaponAttackDetails.material = weapon.system.material.normal.value;\n      weaponAttackDetails.addons = weapon.system.material.addon;\n    }\n\n    // Process weapon groups vs feature bonuses\n    for (let group of weaponAttackDetails.weaponGroups.value) {\n      if (this.app.processData.characterData.weaponGroups[group]) {\n        weaponAttackDetails.featAttackBonus = this.app.processData.characterData.weaponGroups[group];\n        weaponAttackDetails.featDamageBonus = this.app.processData.characterData.weaponGroups[group];\n\n        weaponAttackDetails.featAttackBonusString = `${weaponAttackDetails.featAttackBonus}[${sbcUtils.translate(\"feat.weaponTrainingBonus\", { bonus: group })}]`;\n        weaponAttackDetails.featDamageBonusString = `${weaponAttackDetails.featDamageBonus}[${sbcUtils.translate(\"feat.weaponTrainingBonus\", { bonus: group })}]`;\n      }\n    }\n\n    // Process weapon base type vs feat bonuses\n    for (let baseType of weapon.system.baseTypes ?? []) {\n      baseType = baseType.toLowerCase();\n      const result1 = this._parseWeaponBonuses(\"attack\", baseType);\n      const result2 = this._parseWeaponBonuses(\"damage\", baseType);\n\n      if (result1[0]) {\n        weaponAttackDetails.featAttackBonus += +result1[0];\n        weaponAttackDetails.featAttackBonusString +=\n          weaponAttackDetails.featAttackBonusString.length === 0 ? result1[1] : ` + ${result1[1]}`;\n      }\n      if (result2[0]) {\n        weaponAttackDetails.featDamageBonus += +result2[0];\n        weaponAttackDetails.featDamageBonusString +=\n          weaponAttackDetails.featDamageBonusString.length === 0 ? result2[1] : ` + ${result2[1]}`;\n      }\n    }\n\n    let newAttackIndex = newAttack.actionTypes.indexOf(type);\n    if (newAttackIndex === -1 && type === \"rwak\") {\n      newAttackIndex = newAttack.actionTypes.indexOf(\"twak\");\n      if (newAttackIndex !== -1) type = \"twak\";\n      else newAttackIndex = 0;\n    } else newAttackIndex = 0;\n\n    /** @type {import(\"../../../pf1/module/components/action.mjs\").ItemAction} */\n    let newAttackAction = newAttack.actions.contents[newAttackIndex];\n\n    // Default data\n    weaponAttackDetails.attackAbilityType = newAttackAction.ability.attack;\n    weaponAttackDetails.attackAbilityModifier = +sbcUtils.getModifier(\n      this.app.processData.notes.statistics[weaponAttackDetails.attackAbilityType]\n    );\n    weaponAttackDetails.damageAbilityType = newAttackAction.ability.damage;\n    weaponAttackDetails.damageAbilityMax = newAttackAction.ability.max ?? -100;\n    weaponAttackDetails.damageBonus =\n      weaponAttackDetails.damageAbilityMax >= 0\n        ? Math.min(\n            weaponAttackDetails.damageAbilityMax,\n            +sbcUtils.getModifier(this.app.processData.notes.statistics[weaponAttackDetails.damageAbilityType])\n          )\n        : +sbcUtils.getModifier(this.app.processData.notes.statistics[weaponAttackDetails.damageAbilityType]);\n    weaponAttackDetails.damageMult = newAttackAction.ability.damageMult;\n    weaponAttackDetails.critMult = newAttackAction.ability?.critMult;\n    weaponAttackDetails.critRange = newAttackAction.ability?.critRange;\n\n    // Build an iterative formula in the format of +X/+Y/+Z\n    // let iterativeFormulaArray = newAttack.getAttackArray(newAttackAction.id);\n    let iterativeFormulaArray = newAttackAction.getAttacks().map((a) => a.bonus);\n    let iterativeFormula = \"\";\n    iterativeFormulaArray.forEach((formula, index) => {\n      // formula += +weaponAttackDetails.featAttackBonus;\n      if (isNaN(formula)) formula = 0;\n\n      if (weapon.system.masterwork) {\n        formula++;\n      }\n      if (weapon.system.masterwork && weapon.system.enh) {\n        formula--;\n      }\n      if (formula > -1) {\n        iterativeFormula += \"+\";\n      }\n      iterativeFormula += formula;\n      if (index !== iterativeFormulaArray.length - 1) {\n        iterativeFormula += \"/\";\n      }\n    });\n    weaponAttackDetails.iterativeFormula = iterativeFormula;\n    attackComparison.itemIterativeFormula = iterativeFormula;\n\n    // Build a damage formula (like 1d8 + 4/19-20/x4 plus 1d6 fire)\n    let damageFormulaArray = newAttack.getAllDamageSources(newAttackAction.id);\n    let damageBonus = Math.floor(weaponAttackDetails.damageBonus * weaponAttackDetails.damageMult); // + weaponAttackDetails.featDamageBonus;\n    let damageFormula = \"\";\n    if (weaponAttackDetails.critRange !== 20) {\n      damageFormula += `/${weaponAttackDetails.critRange}-20`;\n    }\n    if (weaponAttackDetails.critMult !== 2) {\n      damageFormula += `/x${weaponAttackDetails.critMult}`;\n    }\n\n    damageFormulaArray.forEach((source) => {\n      if (source.modifier === \"enh\") {\n        damageBonus += source.value;\n        attackComparison.itemEnhancementBonus = source.value;\n      } else if (source.flavor === \"Broken\") {\n        damageBonus += source.value;\n      } else {\n        damageFormula += ` plus ${source.formula}`;\n      }\n    });\n    attackComparison.itemDamageBonus = +damageBonus;\n\n    // Process the damage formula for a simpler die formula\n    // Rather than \"sizeRoll(1, 6, @size)\", process it for 1d8 as a Large for example\n    let realFormula = newAttackAction.damage.parts[0]?.formula;\n    let realDiceNum = null;\n    let realDiceSize = null;\n    let size = window.SBC.actor.system.traits.size.base;\n\n    if (realFormula) {\n      let results = realFormula.match(/sizeRoll\\((?<num>\\d+),\\s?(?<size>\\d+),?.*\\)/);\n      if (results) {\n        realDiceNum = results.groups.num;\n        realDiceSize = results.groups.size;\n        size = Object.keys(pf1.config.sizeChart).indexOf(size);\n\n        let processedRoll = pf1.utils.roll.sizeRoll(+realDiceNum, +realDiceSize, +size);\n        let formula = Roll.fromTerms(processedRoll).formula;\n        console.log(\n          `Results for ${newAttack.name}: `,\n          \"Real Formula: \",\n          realFormula,\n          \"Results: \",\n          results,\n          \"Processed Roll: \",\n          processedRoll,\n          \"Formula: \",\n          formula\n        );\n\n        attackComparison.itemDamageFormula = formula;\n        const sign = damageBonus > -1 ? \"+\" : \"\";\n        damageFormula = `${formula} ${sign}${damageBonus}${damageFormula}`;\n\n        attackComparison.itemFullFormula = damageFormula;\n        weaponAttackDetails.originalDamageFormula = realFormula;\n      }\n    }\n\n    delete newAttack.img;\n    delete newAttack.subType;\n    delete newAttack.held;\n\n    return type;\n  }\n\n  /**\n   * Process the attack damage dice and effects\n   *\n   * @param {string} inputAttack                          The attack string to parse\n   * @param {sbcTypes.AttackData} attackData              The attack data to modify\n   * @param {sbcTypes.ActionData} actionData              The action data to modify\n   * @param {sbcTypes.AttackComparison} attackComparison  The attack comparison data to modify\n   * @returns {void}\n   * @private\n   */\n  _processAttackDamage(inputAttack, attackData, actionData, attackComparison) {\n    const inputAttackMatch = inputAttack.match(/\\(([^)]*)\\)(?=[^(]*$)/);\n    if (inputAttackMatch !== null) {\n      let damageFormulaMatch = inputAttackMatch[1].match(/(\\d+)d(\\d+)/);\n      if (damageFormulaMatch !== null) {\n        // NumberOfDamageDice and DamageDie\n        actionData.numberOfDamageDice = parseInt(damageFormulaMatch[1]);\n        actionData.damageDie = parseInt(damageFormulaMatch[2]);\n        attackData.attackNotes += \" (\" + actionData.numberOfDamageDice + \"d\" + actionData.damageDie;\n        attackComparison.statblockDamageFormula = `${actionData.numberOfDamageDice}d${actionData.damageDie}`;\n      } else if ((damageFormulaMatch = inputAttackMatch[1].match(/^(\\d+)/)) !== null) {\n        actionData.numberOfDamageDice = 1;\n        actionData.damageDie = parseInt(damageFormulaMatch[1]);\n        attackData.attackNotes += \" (\" + actionData.damageDie;\n        attackComparison.statblockDamageFormula = `${actionData.damageDie}`;\n      } else {\n        actionData.numberOfDamageDice = 0;\n        actionData.damageDie = 0;\n      }\n      // damageBonus\n      const damageMatch = inputAttack.match(/d\\d+(\\+\\d+|-\\d+)/);\n      if (damageMatch !== null) {\n        actionData.damageBonus = parseInt(damageMatch[1]);\n        attackData.attackNotes += `${actionData.damageBonus >= 0 ? \"+\" : \"-\"}${actionData.damageBonus}`;\n        attackComparison.statblockDamageBonus = +actionData.damageBonus;\n      } else actionData.damageAbilityType = \"\";\n\n      // critRange\n      const critRangeMatch = inputAttack.match(/\\/(\\d+)-\\d+/);\n      if (critRangeMatch !== null) {\n        actionData.critRange = parseInt(critRangeMatch[1]);\n        attackData.attackNotes += \"/\" + actionData.critRange + \"-20\";\n      }\n      // critMult\n      const critMultMatch = inputAttack.match(/\\/x(\\d+)/);\n      if (critMultMatch !== null) {\n        actionData.critMult = parseInt(critMultMatch[1]);\n        attackData.attackNotes += \"/x\" + actionData.critMult;\n      }\n\n      // effectNotes\n      const effectNotesMatch = damageFormulaMatch\n        ? inputAttackMatch[0].match(/\\(\\d+d\\d+[+\\d/\\-x\\s]*([^)\\n]*)(?:$|\\))/)\n        : [null, inputAttackMatch[1]];\n      if (effectNotesMatch !== null) {\n        let specialEffects = effectNotesMatch[1];\n        attackData.specialEffects = specialEffects;\n        specialEffects = specialEffects\n          .replace(/(\\s+\\b(?:and|plus)\\b\\s+)/gi, \",\")\n          .replace(/(^,|,$)/g, \"\")\n          .split(\",\");\n\n        if (specialEffects.length > 0) {\n          for (let e = 0; e < specialEffects.length; e++) {\n            let specialEffect = specialEffects[e];\n            if (specialEffect !== \"\") {\n              attackData.effectNotes.push(specialEffect);\n            }\n          }\n\n          if (attackData.effectNotes.length > 0 && actionData.damageDie > 0) {\n            attackData.attackNotes += (actionData.damageDie > 0 ? \" plus \" : \"\") + attackData.effectNotes.join(\", \");\n          }\n        }\n      }\n\n      // add the closing parenthesis to the attack notes\n      if (actionData.damageDie > 0) attackData.attackNotes += \")\";\n\n      let damageFormula = \"\";\n      if (actionData.critRange !== 20) {\n        damageFormula += `/${actionData.critRange}-20`;\n      }\n      if (actionData.critMult !== 2) {\n        damageFormula += `/x${actionData.critMult}`;\n      }\n      if (attackData.specialEffects) {\n        damageFormula += ` ${attackData.specialEffects}`;\n      }\n\n      const sign = attackComparison.statblockDamageBonus > -1 ? \"+\" : \"\";\n      attackComparison.statblockFullFormula = `${attackComparison.statblockDamageFormula} ${sign}${attackComparison.statblockDamageBonus}${damageFormula}`;\n    } else if (inputAttack.match(/\\(([^)]*)\\)/) !== null) {\n      // If there is just a specialEffect in parentheses\n      let specialEffect = inputAttack.replace(/\\s+/g, \" \").match(/\\(([^)]*)\\)/)[1];\n      attackData.attackNotes += \" (\" + specialEffect + \")\";\n      attackData.effectNotes.push(specialEffect);\n    } else {\n      // If there are neither damage dice nor special effects in parentheses\n      sbcUtils.log(\"Kind of embarrassing, but this should never happen.\");\n    }\n  }\n\n  /**\n   * Process the number of iterative attacks\n   *\n   * @param {string} inputAttack                          The attack string to parse\n   * @param {sbcTypes.ActionData} actionData              The action data to modify\n   * @param {sbcTypes.AttackData} attackData              The attack data to modify\n   * @param {sbcTypes.AttackComparison} attackComparison  The attack comparison data to modify\n   * @returns {void}\n   * @private\n   */\n  _processNumberOfIterativeAttacks(inputAttack, actionData, attackData, attackComparison) {\n    const iterativeNumberMatch = inputAttack.match(/(\\/\\+\\d+)/);\n    if (iterativeNumberMatch !== null) {\n      actionData.numberOfIterativeAttacks = iterativeNumberMatch.length;\n\n      for (let i = actionData.numberOfIterativeAttacks; i > 1; i--) {\n        let counter = +actionData.numberOfIterativeAttacks + 1 - i;\n        let iterativeModifier =\n          +actionData.inputAttackModifier - 5 * counter > -1\n            ? `/+${+actionData.inputAttackModifier - 5 * counter}`\n            : `/${+actionData.inputAttackModifier - 5 * counter}`;\n        actionData.iterativeFormula += iterativeModifier;\n        attackData.attackNotes += iterativeModifier;\n      }\n    }\n    attackComparison.statblockIterativeFormula = actionData.iterativeFormula;\n  }\n\n  /**\n   * Process the attack modifier\n   *\n   * @param {string} inputAttack              The attack string to parse\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {number} line                     The line number of the attack\n   * @returns {void}\n   * @private\n   */\n  _processAttackModifier(inputAttack, actionData, attackData, line) {\n    if (inputAttack.match(/(\\+\\d+|-\\d+)[+0-9/ ]*\\(*/) !== null) {\n      // Prefer matches that are not at the start and are followed by a parenthesis\n      if (inputAttack.match(/(?!^)(\\+\\d+|-\\d+)[+0-9/ ]*\\(+/) !== null) {\n        actionData.inputAttackModifier = parseInt(inputAttack.match(/(?!^)(\\+\\d+|-\\d+)[+0-9/ ]*\\(+/)[1]);\n      } else if (inputAttack.match(/(?!^)(\\+\\d+|-\\d+)[+0-9/ ]*/) !== null) {\n        // Otherwise try to get just an attackModifier, e.g. for attacks without damage\n        actionData.inputAttackModifier = parseInt(inputAttack.match(/(?!^)(\\+\\d+|-\\d+)[+0-9/ ]*/)[1]);\n      } else {\n        // If nothing is found, fail gracefully\n        let errorMessage = \"Failed to find a usable attack modifier\";\n        let error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse/Offense\", errorMessage, line);\n        this.app.processData.errors.push(error);\n      }\n\n      actionData.iterativeFormula = `${actionData.inputAttackModifier > 0 ? \"+\" : \"\"}` + actionData.inputAttackModifier;\n      attackData.attackNotes += actionData.inputAttackModifier;\n    }\n  }\n\n  /**\n   * Process melee attack data\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack The new attack to use\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @returns {void}\n   * @private\n   */\n  _processMeleeAttackData(newAttack, actionData, attackData) {\n    if (!newAttack) {\n      attackData.img = \"systems/pf1/icons/items/weapons/elven-curve-blade.PNG\";\n\n      // set abilityTypes\n      actionData.damageAbilityType = \"str\";\n      actionData.attackRangeUnits = \"melee\";\n    }\n\n    // check for noStr-Flag\n    if (!this.app.processData.flags.noStr) {\n      actionData.attackAbilityModifier = +sbcUtils.getModifier(this.app.processData.notes.statistics.str);\n\n      // set Str to hit\n      if (!newAttack) {\n        actionData.attackAbilityType = window.SBC.actor.system.attributes?.attack?.meleeAbility || \"str\";\n      }\n    } else if (!newAttack) {\n      actionData.attackAbilityType = \"dex\";\n      actionData.attackAbilityModifier = +sbcUtils.getModifier(this.app.processData.notes.statistics.dex);\n    }\n\n    // Check for WeaponFinesse-Flag\n    if (this.app.processData.flags.hasWeaponFinesse) {\n      actionData.attackAbilityModifier = +sbcUtils.getModifier(this.app.processData.notes.statistics.dex);\n\n      // set Dex to hit\n      actionData.attackAbilityType = \"dex\";\n    }\n  }\n\n  /**\n   * Process ranged attack data\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack The new attack to use\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {string} inputAttack              The attack string to parse\n   * @returns {void}\n   * @private\n   */\n  _processRangedAttackData(newAttack, actionData, attackData, inputAttack) {\n    if (!newAttack) attackData.img = \"systems/pf1/icons/items/weapons/thorn-bow.PNG\";\n\n    // check for noDex-Flag\n    if (!this.app.processData.flags.noDex) {\n      actionData.attackAbilityModifier = +sbcUtils.getModifier(this.app.processData.notes.statistics.dex);\n      // set abilityTypes\n      actionData.attackAbilityType = window.SBC.actor.system.attributes?.attack?.rangedAbility || \"dex\";\n\n      if (!newAttack) {\n        // Check if it's a normal bow or a crossbow, because these don't use \"str\" as the damage ability type\n        if (inputAttack.search(/(bow\\b)/i) !== -1 && inputAttack.search(/\\bcomposite\\b/i) === -1) {\n          actionData.damageAbilityType = \"\";\n        } else {\n          // This seems wrong, as a bow would have a cap\n          actionData.damageAbilityType = \"str\";\n        }\n\n        actionData.attackRangeUnits = \"ft\";\n        actionData.attackRangeIncrement = \"5\"; // WIP: Should this really be 5?\\\n      }\n    }\n  }\n\n  /**\n   * Process thrown attack data\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack The new attack to use\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {string} inputAttack              The attack string to parse\n   * @returns {void}\n   * @private\n   */\n  _processThrownAttackData(newAttack, actionData, attackData, inputAttack) {\n    if (!newAttack) attackData.img = \"systems/pf1/icons/items/weapons/thorn-bow.PNG\";\n\n    // check for noDex-Flag\n    if (!this.app.processData.flags.noDex) {\n      actionData.attackAbilityModifier = +sbcUtils.getModifier(this.app.processData.notes.statistics.dex);\n      // set abilityTypes\n      actionData.attackAbilityType = window.SBC.actor.system.attributes?.attack?.rangedAbility || \"dex\";\n      actionData.damageAbilityType = \"str\";\n      actionData.damageMult = 1;\n\n      if (!newAttack) {\n        // Check if it's a normal bow or a crossbow, because these don't use \"str\" as the damage ability type\n        if (inputAttack.search(/(bow\\b)/i) !== -1 && inputAttack.search(/\\bcomposite\\b/i) === -1) {\n          actionData.damageAbilityType = \"\";\n        } else {\n          // This seems wrong, as a bow would have a cap\n          actionData.damageAbilityType = \"str\";\n        }\n\n        actionData.attackRangeUnits = \"ft\";\n        actionData.attackRangeIncrement = \"5\"; // WIP: Should this really be 5?\\\n      }\n    }\n  }\n\n  /**\n   * Process natural attack data\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack The new attack to use\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @returns {void}\n   * @private\n   */\n  _processNaturalAttackData(newAttack, actionData, attackData) {\n    let tempNaturalAttackName = attackData.attackName.match(naturalAttacksRegex())[0];\n\n    if (Object.keys(NaturalAttacks).find((na) => na === tempNaturalAttackName)) {\n      const tempNaturalAttack = NaturalAttacks[tempNaturalAttackName.replace(/s$/, \"\").toLowerCase()];\n\n      attackData.subType = \"natural\";\n      attackData.isPrimaryAttack = tempNaturalAttack.isPrimaryAttack;\n      attackData.img = tempNaturalAttack.img;\n    }\n  }\n\n  /**\n   * Process base types\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack The new attack to use\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {sbcTypes.ActionData} _actionData  The action data to modify\n   * @returns {void}\n   * @private\n   */\n  _processBaseTypes(newAttack, attackData, _actionData) {\n    if (newAttack && newAttack.type !== \"attack\") {\n      attackData.baseTypes = newAttack.system.baseTypes;\n    } else {\n      attackData.baseTypes = [attackData.formattedAttackName.replace(/(^\\+[1-5])|(\\+[1-5]$)/g, \"\").trim()];\n    }\n    if (attackData.isNatural) {\n      attackData.baseTypes.push(\"natural\");\n    }\n  }\n\n  /**\n   * Process the feat bonuses for a weapon\n   *\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @returns {Promise<void>}\n   * @private\n   * @async\n   */\n  async _processFeatBonuses(attackData, actionData) {\n    for (let group of attackData.weaponGroups.value) {\n      if (this.app.processData.characterData.weaponGroups[group]) {\n        actionData.featAttackBonus = this.app.processData.characterData.weaponGroups[group];\n        actionData.featDamageBonus = this.app.processData.characterData.weaponGroups[group];\n\n        actionData.featAttackBonusString = `${actionData.featAttackBonus}[${sbcUtils.translate(\"feat.weaponTrainingBonus\", { bonus: group })}]`;\n        actionData.featDamageBonusString = `${actionData.featDamageBonus}[${sbcUtils.translate(\"feat.weaponTrainingBonus\", { bonus: group })}]`;\n      }\n    }\n\n    for (let baseType of attackData.baseTypes ?? []) {\n      const result1 = this._parseWeaponBonuses(\"attack\", baseType.toLowerCase());\n      const result2 = this._parseWeaponBonuses(\"damage\", baseType.toLowerCase());\n\n      if (result1[0]) {\n        actionData.featAttackBonus += result1[0];\n        actionData.featAttackBonusString += result1[1];\n      }\n      if (result2[0]) {\n        actionData.featDamageBonus += result2[0];\n        actionData.featDamageBonusString += result2[1];\n      }\n    }\n  }\n\n  /**\n   * Calculate the attack bonus\n   *\n   * @param {sbcTypes.ActionData} actionData  The action data to use\n   * @param {sbcTypes.AttackData} attackData  The attack data to use\n   * @returns {void}\n   */\n  _calculateAttackBonus(actionData, attackData) {\n    let babModifier = +this.app.processData.characterData.conversionValidation.attributes.bab;\n\n    // account for flurry of blows.\n    if (attackData.isFlurryOfBlows) {\n      babModifier += +actionData.flurryClass.system.level - +actionData.flurryClass.system.babBase;\n\n      if (actionData.isUnchainedMonk) {\n        actionData.flurryOfBlowsType = \"unflurry\";\n      } else {\n        actionData.flurryOfBlowsType = \"flurry\";\n        babModifier -= 2;\n      }\n    }\n\n    let calculatedAttackModifier =\n      babModifier +\n      +pf1.config.sizeMods[window.SBC.actor.system.traits.size.base] +\n      +actionData.attackAbilityModifier +\n      +actionData.featAttackBonus +\n      (attackData.isBroken ? -2 : 0);\n\n    // sbcUtils.log(`Calculated Attack Modifier: ${calculatedAttackModifier} =\\n` +\n    //     `Bab: ${this.app.processData.characterData.conversionValidation.attributes.bab}\\n` +\n    //     `Size Mod: ${pf1.config.sizeMods[window.SBC.actor.system.traits.size.base]}\\n` +\n    //     `Attack Ability Modifier: ${actionData.attackAbilityModifier}\\n` +\n    //     `Feat Attack Bonus: ${actionData.featAttackBonus}\\n` +\n    //     `Broken: ${attackData.isBroken ? -2 : 0}\\n`);\n\n    // account for Masterwork status\n    if (attackData.isMasterwork) {\n      calculatedAttackModifier++;\n    }\n    // account for enhancement bonus otherwise\n    else if (attackData.enhancementBonus > 0) {\n      calculatedAttackModifier += +attackData.enhancementBonus;\n    }\n\n    // verify attack's \"primary attack\" status\n    const secondaryAttackPenalty = actionData.hasMultiattack ? 2 : 5;\n    if (attackData.isNatural && calculatedAttackModifier - actionData.inputAttackModifier === secondaryAttackPenalty) {\n      attackData.isPrimaryAttack = false;\n    }\n\n    // account for secondary attack penalty\n    if (!attackData.isPrimaryAttack) {\n      calculatedAttackModifier -= 5;\n    }\n\n    // Now compare our value with the statblocks\n    // sbcUtils.log(`Calculated Attack Modifier: ${calculatedAttackModifier}\\n` +\n    //     `Input Attack Modifier: ${actionData.inputAttackModifier}\\n` +\n    //     `Calculated Attack Bonus: ${+actionData.inputAttackModifier - +calculatedAttackModifier}\\n`);\n    if (+calculatedAttackModifier !== +actionData.inputAttackModifier) {\n      actionData.calculatedAttackBonus = +actionData.inputAttackModifier - +calculatedAttackModifier;\n    }\n  }\n\n  /**\n   * Calculate the damage bonus\n   *\n   * @param {sbcTypes.ActionData} actionData                      The action data to use\n   * @param {sbcTypes.AttackData} attackData                      The attack data to use\n   * @param {sbcTypes.WeaponAttackDetails} weaponAttackDetails    The weapon attack details to use\n   * @returns {string}                                            The damage dice string\n   * @private\n   */\n  _calculateDamageBonus(actionData, attackData, weaponAttackDetails) {\n    let strDamageBonus = 0;\n    if (actionData.damageAbilityType === \"str\") {\n      // Use the value given in the statblock instead of the one currently in the actor\n      strDamageBonus =\n        weaponAttackDetails.damageAbilityMax >= 0\n          ? Math.min(\n              weaponAttackDetails.damageAbilityMax,\n              +sbcUtils.getModifier(this.app.processData.notes.statistics.str)\n            )\n          : +sbcUtils.getModifier(this.app.processData.notes.statistics.str);\n    }\n\n    // let calculatedDamageBonus = (attackData.isPrimaryAttack) ? +strDamageBonus + +attackData.enhancementBonus : strDamageBonus + +attackData.enhancementBonus - 5\n    let calculatedDamageBonus =\n      +strDamageBonus + +attackData.enhancementBonus + +actionData.featDamageBonus + (attackData.isBroken ? -2 : 0);\n    let damageOffset = +actionData.damageBonus - +calculatedDamageBonus;\n    // sbcUtils.log(`Damage Offset: ${damageOffset}\\n` +\n    //     `Damage Bonus: ${actionData.damageBonus}\\n` +\n    //     `Calculated Damage Bonus: ${calculatedDamageBonus}\\n` +\n    //     `Str Damage Bonus: ${strDamageBonus}\\n` +\n    //     `Enhancement Bonus: ${attackData.enhancementBonus}\\n` +\n    //     `Broken: ${attackData.isBroken ? -2 : 0}\\n`);\n    if (damageOffset === Math.floor(strDamageBonus / 2) && strDamageBonus > 0) {\n      calculatedDamageBonus += Math.floor(strDamageBonus / 2);\n      actionData.damageMult = 1.5;\n      attackData.held = \"2h\";\n    } else if (\n      +actionData.damageBonus - +calculatedDamageBonus === -Math.ceil(strDamageBonus / 2) &&\n      strDamageBonus > 0\n    ) {\n      calculatedDamageBonus -= Math.ceil(strDamageBonus / 2);\n      actionData.damageMult = 0.5;\n      attackData.held = \"oh\";\n    }\n    actionData.damageModifier = +actionData.damageBonus - +calculatedDamageBonus;\n\n    // Create the string needed for the damagePart\n    let damageDiceString;\n    if (!actionData.useOriginalDamage) {\n      damageDiceString = `sizeRoll(${actionData.numberOfDamageDice}, ${actionData.damageDie}, @size, ${window.SBC.actor.system.traits.size.value})`;\n      if (actionData.featDamageBonusString && !window.SBC.settings.getSetting(\"rollBonusesIntegration\")) {\n        damageDiceString += \" + \" + actionData.featDamageBonusString;\n      }\n    } else {\n      // damageDiceString = newAttack.actions.contents[0]?.damage.parts[0]?.formula + \" + \" + weaponAttackDetails.featDamageBonusString;\n      damageDiceString = weaponAttackDetails.originalDamageFormula;\n      if (weaponAttackDetails.featDamageBonus && !window.SBC.settings.getSetting(\"rollBonusesIntegration\")) {\n        damageDiceString += \" + \" + weaponAttackDetails.featDamageBonusString;\n      }\n    }\n\n    // ... and if there is a difference between the statblock and the calculation, add an adjustment modifier\n    if (actionData.damageModifier !== 0) {\n      if (actionData.damageModifier > 0) {\n        damageDiceString += \" + \" + actionData.damageModifier + \"[adjusted by sbc]\";\n      } else {\n        damageDiceString += +actionData.damageModifier + \"[adjusted by sbc]\";\n      }\n    }\n    damageDiceString = damageDiceString.replace(/\\+ \\+/g, \"+ \").replace(/\\s\\s/, \" \");\n\n    return damageDiceString;\n  }\n\n  /**\n   * Process damage types in the attack\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack The new attack\n   * @param {import(\"../../../pf1/module/documents/item/item-weapon.mjs\").ItemWeaponPF} weapon    The weapon\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @returns {void}\n   * @private\n   */\n  _processDamageTypes(newAttack, weapon, attackData, actionData) {\n    if (newAttack) {\n      let damageType = newAttack.actions.contents[0]?.damage?.parts[0]?.types;\n      if (damageType?.first()) {\n        damageType.forEach((type) => {\n          actionData.damageTypes.add(type);\n        });\n      }\n      let properties = Object.keys(weapon?.system.properties ?? {});\n      properties.forEach((property) => {\n        if (weapon?.system?.properties?.[property])\n          attackData.attackNotes += `, ${pf1.config.weaponProperties[property]}`;\n      });\n    } else {\n      if (attackData.isNonlethal) {\n        actionData.damageTypes.add(\"nonlethal\");\n      }\n      actionData.damageTypes.add(\"untyped\");\n    }\n\n    // Check for specialDamageTypes\n    // Check if the attackEffect denotes a valid damageType for the base damage,\n    // and use this to override the default damage type\n    for (let k = 0; k < attackData.effectNotes.length; k++) {\n      let attackEffect = attackData.effectNotes[k].replaceAll(\" energy\", \"\").trim();\n\n      let systemSupportedDamageTypes = Object.values(pf1.registry.damageTypes.getLabels()).map((x) => x.toLowerCase());\n      let patternDamageTypes = new RegExp(\"\\\\b(\" + systemSupportedDamageTypes.join(\"|\") + \")\\\\b\", \"gi\");\n\n      // If the attackEffect has no additional damagePools XdY ...\n      if (attackEffect.match(/\\d+d\\d+/) === null) {\n        // ... and it matches any of the supported damageTypes ...\n        const damageTypeMatch = attackEffect.match(patternDamageTypes);\n        // if (attackEffect.search(patternDamageTypes) !== -1) {\n        if (damageTypeMatch) {\n          let specialDamageType = damageTypeMatch[0].replace(\"electricity\", \"electric\").trim();\n\n          // Remove the found attackEffect from the effectNotes array\n          attackData.effectNotes.splice(k, 1);\n\n          actionData.damageTypes = new Set(specialDamageType);\n        }\n      } else {\n        // ... if the attackEffect has damagePools, create a new damageEntry for the attack\n        let attackEffectDamage = attackEffect.match(/(\\d+d\\d+\\s*\\+*\\s*\\d*)/)[0];\n\n        // Check if there is something left after removing the damage\n        let attackEffectDamageType = attackEffect.replace(attackEffectDamage, \"\").replace(\"plus\", \"\").trim();\n\n        if (attackEffectDamageType !== \"\") {\n          const attackDamageTypeMatch = attackEffect.match(patternDamageTypes);\n          if (attackDamageTypeMatch) {\n            attackEffectDamageType = attackDamageTypeMatch[0].replace(\"electricity\", \"electric\").trim();\n          }\n        } else {\n          attackEffectDamageType = \"untyped\";\n        }\n\n        // Push the damage values to the action\n        actionData.nonCritParts.push({\n          formula: attackEffectDamage,\n          types: new Set([attackEffectDamageType]),\n          // type: {\n          //   values: [attackEffectDamageType],\n          //   custom: attackEffectCustomDamageType,\n          // },\n        });\n\n        // Remove the found attackEffect from the effectNotes array\n        attackData.effectNotes.splice(k, 1);\n      }\n    }\n  }\n\n  /**\n   * Prepare the data for a new attack\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack     The new attack\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttackData The new attack data\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @param {string} type                     The type of the attack\n   * @param {object} attackUpdates            The attack updates\n   * @returns {Array} The new attack data and the attack updates\n   * @private\n   */\n  _prepareNewAttackData(newAttack, newAttackData, attackData, actionData, type, attackUpdates) {\n    // Handle the flurry class association, if necessary\n    /** @type {string} */\n    const flurryClass = attackData.isFlurryOfBlows ? actionData.flurryClass.system.tag : null;\n\n    if (!newAttack) {\n      newAttackData = new Item.implementation({\n        name: sbcUtils.capitalize(attackData.formattedAttackName) || \"Undefined\",\n        type: \"attack\",\n        img: attackData.img,\n        system: {\n          attackNotes: this.splitText(attackData.attackNotes).slice(1),\n          effectNotes: attackData.effectNotes,\n          masterwork: attackData.isMasterwork || (attackData.enhancementBonus ?? 0) > 0,\n          broken: attackData.isBroken,\n          enh: +attackData.enhancementBonus,\n          proficient: true,\n          held: attackData.held,\n          showInQuickbar: true,\n          subType: attackData.subType,\n          identifiedName: sbcUtils.capitalize(attackData.formattedAttackName) || \"Undefined\",\n          baseTypes: attackData.baseTypes,\n          material: {\n            base: {\n              value: attackData.baseMaterial,\n            },\n            normal: {\n              value: attackData.material,\n            },\n            addon: Object.keys(attackData.addons),\n          },\n          class: flurryClass,\n        },\n      });\n\n      newAttackData.prepareData();\n    } else {\n      attackUpdates = {\n        _id: newAttack.id,\n        \"system.enh\": +attackData.enhancementBonus,\n        \"system.masterwork\": attackData.isMasterwork || (attackData.enhancementBonus ?? 0) > 0,\n        \"system.held\": attackData.held,\n        \"system.attackNotes\": this.splitText(attackData.attackNotes).slice(1),\n        \"system.effectNotes\": attackData.effectNotes,\n        \"system.broken\": attackData.isBroken,\n        name: sbcUtils.capitalize(attackData.formattedAttackName) || \"Undefined\",\n        \"system.material.base.value\": attackData.baseMaterial,\n        \"system.material.normal.value\": attackData.material,\n        \"system.material.addon\": Object.keys(attackData.addons),\n        \"system.class\": flurryClass,\n      };\n      newAttackData = newAttack;\n    }\n\n    return [newAttackData, attackUpdates];\n  }\n\n  /**\n   * Prepare the data for a new action\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack     The new attack\n   * @param {import(\"../../../pf1/module/components/action.mjs\").ItemAction} newActionData The new action data\n   * @param {sbcTypes.ActionData} actionData  The action data to modify\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {string} type                     The type of the attack\n   * @returns {import(\"../../../pf1/module/components/action.mjs\").ItemAction} The new action data\n   * @private\n   * @async\n   */\n  async _prepareNewAction(newAttack, newActionData, actionData, attackData, type) {\n    // Process attack and damage numbers for additions to the Attack Bonus and Damage Formula fields\n    let attackBonusString =\n      actionData.calculatedAttackBonus !== 0\n        ? attackData.isNatural && actionData.hasMultiattack && actionData.calculatedAttackBonus === 3\n          ? null\n          : actionData.calculatedAttackBonus.toString() + \"[adjusted by sbc]\"\n        : null;\n\n    if (actionData.featAttackBonusString && !window.SBC.settings.getSetting(\"rollBonusesIntegration\")) {\n      attackBonusString = attackBonusString\n        ? `${attackBonusString} + ${actionData.featAttackBonusString}`\n        : actionData.featAttackBonusString;\n    }\n\n    if (attackBonusString) {\n      attackBonusString = attackBonusString\n        .replace(/\\+(\\s+\\+)+/g, \"+ \")\n        .replace(/\\s+/g, \" \")\n        .replace(/^\\+\\s+/, \"\")\n        .replace(/\\s+\\+$/, \"\");\n    }\n\n    // Update the extra attack types setting from PF1E v10.0\n    let extraAttacksType = attackData.isFlurryOfBlows\n      ? actionData.flurryOfBlowsType\n      : actionData.attackParts.length > 0 && actionData.numberOfIterativeAttacks > 0\n        ? \"advanced\"\n        : actionData.numberOfIterativeAttacks > 0 && actionData.attackParts.length === 0\n          ? \"standard\"\n          : \"custom\";\n\n    const babOverride = attackData.isFlurryOfBlows\n      ? actionData.flurryOfBlowsType === \"flurry\"\n        ? (\n            +this.app.processData.characterData.conversionValidation.attributes.bab +\n            (actionData.flurryClass.system.level - actionData.flurryClass.system.babBase)\n          ).toString()\n        : null\n      : null;\n\n    if (!newAttack) {\n      const defaultActionData = new pf1.components.ItemAction().toObject(undefined, false);\n      newActionData = {\n        ...defaultActionData,\n        name: attackData.attackName.capitalize(),\n        img: attackData.img,\n        activation: {\n          cost: 1,\n          type: \"attack\",\n        },\n        bab: babOverride,\n        unchainedAction: {\n          activation: {\n            cost: 1,\n            type: \"attack\",\n          },\n        },\n        range: {\n          value: actionData.attackRangeIncrement,\n          units: actionData.attackRangeUnits,\n          maxIncrements: 1,\n        },\n        attackName: attackData.attackName.replace(/((?!Blows|blows)e?s)$/, \"\").capitalize(),\n        actionType: type,\n        attackBonus: attackBonusString,\n        critConfirmBonus: \"\",\n        damage: {\n          critParts: [],\n          nonCritParts: actionData.nonCritParts,\n          parts: actionData.damageParts,\n        },\n        extraAttacks: {\n          type: extraAttacksType,\n          manual: actionData.attackParts,\n        },\n        formulaicAttacks: {\n          count: {\n            formula: actionData.formulaicAttacksCountFormula,\n          },\n          bonus: {\n            formula: \"@formulaicAttack * -5\",\n          },\n        },\n        ability: {\n          attack: actionData.attackAbilityType,\n          damage: actionData.damageAbilityType,\n          damageMult: actionData.damageMult,\n          critRange: actionData.critRange,\n          critMult: actionData.critMult,\n        },\n        naturalAttack: {\n          primaryAttack: attackData.isPrimaryAttack,\n          [\"secondary.attackBonus\"]: actionData.hasMultiattack ? \"-2\" : \"-5\",\n          [\"secondary.damageMult\"]: actionData.damageMult && attackData.isNatural ? actionData.damageMult : 0.5,\n        },\n        nonlethal: attackData.isNonlethal,\n        touch: attackData.isTouch,\n      };\n    } else {\n      let newActionIndex = newAttack.actionTypes.indexOf(type);\n      if (newActionIndex === -1 && type === \"rwak\") {\n        newActionIndex = newAttack.actionTypes.indexOf(\"twak\");\n        if (newActionIndex !== -1) type = \"twak\";\n        else newActionIndex = 0;\n      } else newActionIndex = 0;\n\n      let action = newAttack.actions.get(newAttack.actions.contents[newActionIndex].id);\n      let updates = {\n        attackBonus: attackBonusString,\n        damage: {\n          critParts: [],\n          nonCritParts: actionData.nonCritParts,\n          parts: actionData.damageParts,\n        },\n        [\"extraAttacks.type\"]: extraAttacksType,\n        [\"extraAttacks.manual\"]: actionData.attackParts,\n        [\"ability.attack\"]: actionData.attackAbilityType,\n        [\"ability.critRange\"]: actionData.critRange,\n        [\"ability.critMult\"]: actionData.critMult,\n        [\"ability.damageMult\"]: actionData.damageMult,\n        nonlethal: attackData.isNonlethal,\n        touch: attackData.isTouch,\n        bab: babOverride,\n        actionType: type,\n      };\n\n      if (newAttack.system.subType === \"natural\") {\n        updates[\"naturalAttack.primaryAttack\"] = attackData.isPrimaryAttack;\n        updates[\"naturalAttack.secondary.attackBonus\"] = actionData.hasMultiattack ? \"-2\" : \"-5\";\n        updates[\"naturalAttack.secondary.damageMult\"] =\n          actionData.damageMult && attackData.isNatural ? actionData.damageMult : 0.5;\n      }\n\n      await action.update(updates);\n    }\n\n    return newActionData;\n  }\n\n  /**\n   * Create the final attack\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttack     The new attack\n   * @param {import(\"../../../pf1/module/documents/item/item-attack.mjs\").ItemAttackPF} newAttackData The new attack data\n   * @param {import(\"../../../pf1/module/components/action.mjs\").ItemAction} newActionData The new action data\n   * @param {sbcTypes.AttackData} attackData  The attack data to modify\n   * @param {object} attackUpdates            The attack updates\n   * @param {string} type                     The type of the attack\n   * @private\n   * @async\n   * @returns {Promise<ItemPF>} The new attack item\n   */\n  async _createFinalAttack(newAttack, newAttackData, newActionData, attackData, attackUpdates, type) {\n    let existingName = (newAttack ? newAttack.name : newAttackData.name).toLowerCase();\n    let existingId = newAttack ? newAttack.id : newAttackData.id;\n\n    // Check if an attack with the same name already exists\n    console.log(`Looking for existing attack with name ${existingName} and id ${existingId}`);\n    let existingAttack = window.SBC.actor.itemTypes.attack.find(\n      (ita) => ita.name.toLowerCase() === existingName && ita.id !== existingId\n    );\n\n    let attack = existingAttack;\n\n    if (existingAttack) {\n      let comparisonData = {\n        enh: newAttack ? (attackUpdates[\"system.enh\"] ?? newAttack.system.enh) : attackData.enhancementBonus,\n        masterwork: newAttack\n          ? (attackUpdates[\"system.masterwork\"] ?? newAttack.system.masterwork)\n          : attackData.isMasterwork,\n        broken: newAttack ? (attackUpdates[\"system.broken\"] ?? newAttack.system.broken) : attackData.isBroken,\n      };\n      if (!comparisonData.enh) comparisonData.enh = 0;\n\n      if (\n        existingAttack.system.enh === comparisonData.enh &&\n        existingAttack.system.masterwork === comparisonData.masterwork &&\n        existingAttack.system.broken === comparisonData.broken\n      ) {\n        // Import the current attack item's attack and effect notes over to the existing attack\n        let newAttackNotes = new Set(\n          existingAttack.system.attackNotes.concat(this.splitText(attackData.attackNotes).slice(1))\n        );\n        let newEffectNotes = new Set(existingAttack.system.effectNotes.concat(attackData.effectNotes));\n        await window.SBC.actor.updateEmbeddedDocuments(\"Item\", [\n          {\n            _id: existingAttack.id,\n            \"system.attackNotes\": Array.from(newAttackNotes),\n            \"system.effectNotes\": Array.from(newEffectNotes),\n          },\n        ]);\n\n        let existingAttackIndex = existingAttack.actionTypes.indexOf(type);\n        if (existingAttackIndex === -1 && type === \"rwak\") {\n          existingAttackIndex = existingAttack.actionTypes.indexOf(\"twak\");\n          if (existingAttackIndex !== -1) type = \"twak\";\n        }\n\n        let actionData = newAttack ? newAttack.actions.contents[0] : newActionData;\n        // Clone the action to make it unique, remove the id, and if necessary update the name\n        let newAction = pf1.utils.deepClone(actionData);\n        if (newAction) {\n          if (attackData.isFlurryOfBlows) {\n            newAction.name = \"Flurry of Blows\";\n          }\n\n          if (!attackData.isPrimaryAttack && attackData.isNatural) {\n            newAction.name += \" (Secondary)\";\n          } else if (newAction.name !== \"Attack\") {\n            if (type === \"mwak\") newAction.name = \"Melee\";\n            else if (type === \"rwak\") newAction.name = \"Ranged\";\n            else if (type === \"twak\") newAction.name = \"Thrown\";\n          } else {\n            if (type === \"mwak\") newAction.name += \" (Melee)\";\n            else if (type === \"rwak\") newAction.name += \" (Ranged)\";\n            else if (type === \"twak\") newAction.name += \" (Thrown)\";\n          }\n\n          delete newAction._id;\n        } else {\n          if (attackData.isFlurryOfBlows) {\n            newAction.name = \"Flurry of Blows\";\n          }\n\n          if (!attackData.isPrimaryAttack && attackData.isNatural) {\n            newAction.name += \" (Secondary)\";\n          } else if (newAction.name !== \"Attack\") {\n            if (type === \"mwak\") newAction.name = \"Melee\";\n            else if (type === \"rwak\") newAction.name = \"Ranged\";\n            else if (type === \"twak\") newAction.name = \"Thrown\";\n          } else {\n            if (type === \"mwak\") newAction.name += \" (Melee)\";\n            else if (type === \"rwak\") newAction.name += \" (Ranged)\";\n            else if (type === \"twak\") newAction.name += \" (Thrown)\";\n          }\n\n          delete newAction._id;\n        }\n\n        // Add it to the existing attack, and erase the current attack\n        await pf1.components.ItemAction.create([newAction], {\n          parent: existingAttack,\n        });\n\n        /** @type {import(\"../../../pf1/module/components/action.mjs\").ItemAction[] }*/\n        const existingNewActions = [];\n        let existingActions = existingAttack.toObject().system.actions;\n        for (let i = 0; i < existingActions.length; i++) {\n          if (i !== existingAttackIndex) existingNewActions.push(existingActions[i]);\n        }\n        await existingAttack.update({ \"system.actions\": existingNewActions });\n\n        if (attackUpdates?.[\"system.class\"]) {\n          await existingAttack.update({ \"system.class\": attackUpdates[\"system.class\"] });\n        }\n        if (newAttack) await window.SBC.actor.deleteEmbeddedDocuments(\"Item\", [newAttack.id]);\n      }\n    } else {\n      // Push it into this attack as well\n      if (!newAttack) {\n        await newAttackData.updateSource({\n          \"system.actions\": [newActionData],\n        });\n        newAttackData.prepareData();\n\n        // And lastly add the attack to the item stack\n        attack = (await createItem(newAttackData))[1];\n      } else {\n        // Update the current attack\n        await window.SBC.actor.updateEmbeddedDocuments(\"Item\", [attackUpdates]);\n        newAttackData.prepareData();\n        attack = newAttackData;\n      }\n    }\n\n    return attack;\n  }\n\n  /**\n   * Parse the weapon bonuses for the attack and damage bonuses\n   *\n   * @param {string} type     The type of bonus to parse (attack or damage)\n   * @param {string} value    The weapon type to check for bonuses\n   * @returns {Array}         The bonus value and the bonus string for labelling\n   */\n  _parseWeaponBonuses(type, value) {\n    let result = 0;\n    let resultString = \"\";\n\n    const characterData = this.app.processData.characterData;\n\n    switch (type) {\n      case \"attack\":\n        if (characterData.weaponFocus.includes(value)) {\n          result++;\n          resultString += `+ 1[${sbcUtils.translate(\"feat.weaponFocus\")}]`;\n        }\n        if (characterData.weaponFocusGreater.includes(value)) {\n          result++;\n          resultString += `+ 1[${sbcUtils.translate(\"feat.greaterWeaponFocus\")}]`;\n        }\n        if (Object.values(characterData.weaponGroups).includes(value)) {\n          result += characterData.weaponGroups[value];\n          resultString += `+ 1[${sbcUtils.translate(\"feat.weaponTrainingBonus\", { bonus: value })}]`;\n        }\n        break;\n\n      case \"damage\":\n        if (characterData.weaponSpecialization.includes(value)) {\n          result += 2;\n          resultString += `+ 2[${sbcUtils.translate(\"feat.weaponSpecialization\")}]`;\n        }\n        if (characterData.weaponSpecializationGreater.includes(value)) {\n          result += 2;\n          resultString += `+ 2[${sbcUtils.translate(\"feat.greaterWeaponSpecialization\")}]`;\n        }\n        if (Object.values(characterData.weaponGroups).includes(value)) {\n          result += characterData.weaponGroups[value];\n          resultString += `+ 1[${sbcUtils.translate(\"feat.weaponTrainingBonus\", { bonus: value })}]`;\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    // sbcUtils.log(`Weapon ${type} bonus for ${value}: ${result}, ${resultString}`);\n    return [result, resultString];\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\n// Parse Speed\nexport default class SpeedParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Offense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"speed\";\n  }\n\n  /**\n   * Parses a speed string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, type) {\n    if (value.length <= 0) return true;\n\n    const rawInput = value.replace(/(^[,;\\s]*|[,;\\s]*$)/g, \"\");\n    const input = sbcUtils.parseSubtext(rawInput);\n\n    let speed = input[0].match(/(\\d+)\\s(ft\\.|feet)/)?.[1];\n    let speedContext = \"\";\n\n    if (speed == null) {\n      this.throwParseError(undefined, value, line, type);\n      return false;\n    }\n\n    const speedDistance = pf1.utils.convertDistance(+speed);\n    let speedNote =\n      game.i18n.localize(`PF1.Movement.Mode.${type.toLowerCase()}`) + ` ${speedDistance[0]} ${speedDistance[1]}`;\n\n    // Factor in speed changes from items/features/races. This needs to account for both\n    // the specific type of movement, and any \"all speed\" changes.\n    speed -= await sbcUtils.getTotalFromChanges(window.SBC.actor, `${type}Speed`);\n    speed -= await sbcUtils.getTotalFromChanges(window.SBC.actor, \"allSpeeds\");\n    this.app.processData.characterData.conversionValidation.attributes[type] = +speed;\n    await window.SBC.actor.update({\n      [`system.attributes.speed.${type}.base`]: +speed,\n    });\n\n    switch (type) {\n      case \"fly\": {\n        // TODO: Allow abbreviations\n        if (input.length > 1) {\n          const flyManeuverability = sbcUtils.haystackSearch(Object.keys(pf1.config.flyManeuverabilities), input[1]);\n\n          if (flyManeuverability) {\n            await window.SBC.actor.update({\n              [\"system.attributes.speed.fly.maneuverability\"]: flyManeuverability,\n            });\n            speedNote += ` (${game.i18n.localize(`PF1.Movement.FlyManeuverability.Quality.${flyManeuverability.toLowerCase()}`)})`;\n          }\n          if (input[2]) {\n            speedContext = input[2];\n          }\n        }\n        break;\n      }\n\n      default:\n        if (input.length > 1) {\n          speedContext = input[1];\n        }\n        break;\n    }\n\n    if (speedContext !== \"\") {\n      /*\n       * TODO: DO STUFF WITH SPEED CONTEXT NOTES\n       * CURRENTLY THE SHEET DOES NOT SUPPORT THEM\n       */\n    }\n\n    this.app.processData.notes.offense.speed.push(speedNote);\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { createItem } from \"../../sbcParser.js\";\nimport { escapeForRegex, wizardClassesRegex } from \"../../sbcRegex.js\";\nimport { Metamagic, PrestigeClasses } from \"../../Content/index.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\nconst SpellFrequencyTypes = Object.freeze({\n  Constant: \"constant\",\n  Weekly: \"weekly\",\n  Monthly: \"monthly\",\n  Yearly: \"yearly\",\n  AtWill: \"atWill\",\n  Daily: \"daily\",\n});\n\nconst spellRowCounts = {};\n\n// Parse Spell Books and Spell-Like Abilities\nexport default class SpellBooksParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Offense\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"spellBook\";\n  }\n\n  /**\n   * Parses a spell book\n   *\n   * @param {sbcTypes.RawSpellBookData} value                    The value to parse\n   * @param {number} line                     The line number\n   * @param {string} _type                    The type of value\n   * @returns {Promise<(boolean|string)[]>}   A boolean indicating success, and the spellbook type\n   */\n  async _parse(value, line, _type = undefined) {\n    sbcUtils.log(\"Trying to parse the following Spell Book.\", value);\n\n    let spellCastingType = value.spellCastingType;\n    let spellRows = value.spells;\n    let spellBookType = value.spellBookType;\n    let altNameSuffix =\n      spellCastingType === \"prepared\" ? \"Prepared\" : spellCastingType === \"points\" ? \"Psychic\" : \"Known\";\n\n    // Set up the spellbook\n    spellBookType = await this.setupSpellbook(\n      spellCastingType,\n      spellBookType,\n      value.spellCastingClass,\n      value.isAlchemist ? \"extracts\" : \"spells\",\n      altNameSuffix,\n      +value.casterLevel,\n      +value.concentrationBonus,\n      value.isSpellLike,\n      value.firstLine,\n      value.spellBookName\n    );\n\n    // Initialize the spell row counts\n    spellRowCounts[spellBookType] = {};\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach((key) => {\n      spellRowCounts[spellBookType][key] = {};\n      spellRowCounts[spellBookType][key].base = 0;\n      spellRowCounts[spellBookType][key].max = 0;\n    });\n\n    const spellbook = window.SBC.actor.system.attributes.spells.spellbooks[spellBookType];\n    let spellRowsNotes = [];\n    let wizardSchool = null;\n    let wizardSchoolShort = null;\n    let spellBookName = spellbook.name;\n    let nameOptions = SpellBooksParser.getClassPostfixFromSpellbookName(spellBookName);\n    let castingClasses = window.SBC.actor.itemTypes.class.filter((i) => i.system.casting);\n    castingClasses = castingClasses\n      .map((i) => i.system.tag.substring(0, 3).toUpperCase())\n      .concat(castingClasses.map((i) => `${i.system.tag[0]}${i.system.tag[2]}${i.system.tag[3]}`.toUpperCase()));\n\n    // If we're a wizard class, we want to know which school of spells is our focus\n    const wizardClass = value.spellCastingClass.match(wizardClassesRegex());\n    if (wizardClass) {\n      switch (wizardClass[0]) {\n        case \"Abjurer\":\n          wizardSchoolShort = \"abj\";\n          wizardSchool = \"Abjuration\";\n          break;\n        case \"Conjurer\":\n          wizardSchoolShort = \"con\";\n          wizardSchool = \"Conjuration\";\n          break;\n        case \"Diviner\":\n          wizardSchoolShort = \"div\";\n          wizardSchool = \"Divination\";\n          break;\n        case \"Enchanter\":\n          wizardSchoolShort = \"enc\";\n          wizardSchool = \"Enchantment\";\n          break;\n        case \"Evoker\":\n          wizardSchoolShort = \"evo\";\n          wizardSchool = \"Evocation\";\n          break;\n        case \"Illusionist\":\n          wizardSchoolShort = \"ill\";\n          wizardSchool = \"Illusion\";\n          break;\n        case \"Necromancer\":\n          wizardSchoolShort = \"nec\";\n          wizardSchool = \"Necromancy\";\n          break;\n        case \"Transmuter\":\n          wizardSchoolShort = \"trs\";\n          wizardSchool = \"Transmuation\";\n          break;\n        case \"Universalist\":\n        default:\n          wizardSchoolShort = \"\";\n          wizardSchool = \"Universalist\";\n          break;\n      }\n    } else if (spellbook.class === \"wizard\" || (spellBookName && spellBookName.toLowerCase().includes(\"wizard\"))) {\n      wizardSchoolShort = \"\";\n      wizardSchool = \"Universalist\";\n    }\n\n    if (wizardSchool === \"Universalist\") {\n      await window.SBC.actor.update({\n        [`system.attributes.spells.spellbooks.${spellBookType}.domainSlotValue`]: 0,\n      });\n    }\n\n    /* Parse the spell rows\n     * line by line\n     */\n    let spellTotal = 0;\n    for (let i = 0; i < spellRows.length; i++) {\n      spellTotal += this.splitText(spellRows[i].replace(/(^[^-]*-)/, \"\"), false).length;\n    }\n\n    let specialRow = \"\";\n    for (let i = 0; i < spellRows.length; i++) {\n      if (spellRows[i] === \"\") continue;\n      let spellRow = spellRows[i];\n\n      /** @type {sbcTypes.SpellRowData} */\n      const spellRowData = {\n        spellLevel: -1,\n        spellsPerX: \"\",\n        spellsPerXTotal: -1,\n        isAtWill: false,\n        frequency: null,\n        isSpellRow: false,\n        spellRowIsInitialized: false,\n        wizardSchool: wizardSchoolShort,\n        isSpellLike: value.isSpellLike,\n      };\n\n      // Get spellLevel, spellsPerX and spellsPerXTotal\n      this.processSpellRow(spellRow, spellBookType, spellRowData);\n\n      // Check for use frequencies\n      this.processFrequencies(spellRow, spellRowData);\n\n      if (spellRowData.isSpellRow) {\n        let spellRowNotes = {\n          frequency:\n            spellRowData.spellLevel === -1\n              ? {\n                  type: sbcUtils.translate(`spellFrequencyNoun.${spellRowData.frequency}`),\n                  amount: spellRowData.spellsPerXTotal !== -1 ? +spellRowData.spellsPerXTotal : 0,\n                }\n              : null,\n          level: +spellRowData.spellLevel,\n          levelEnum: sbcUtils.translate(`spellLevelEnum.${spellRowData.spellLevel}`),\n          spells: [],\n        };\n\n        let spells = this.splitText(spellRow.replace(/(^[^-]*-)/, \"\"), false);\n\n        // Check if the spellbook has just class features, and prioritize.\n        let featuresOnly = false;\n        let spellsCount = 0;\n        if (value.isSpellLike) {\n          for (let spell of spells) {\n            spell = spell.replaceAll(/\\*/g, \"\").trim();\n            let [spellName, altName] = SpellBooksParser.processSpellName(spell);\n            if (spellName === \"\") continue;\n\n            let searchEntity = {\n              search: new Set([spellName, altName]),\n              type: \"spell\",\n              item: spellName,\n            };\n\n            searchEntity.search = sbcUtils.createSearchSet(\n              [spellName, altName],\n              true,\n              nameOptions.concat(castingClasses)\n            );\n\n            // nameOptions.forEach((nameOption) => {\n            //   searchEntity.search.add(`${spellName} (${nameOption})`);\n            //   searchEntity.search.add(`${altName} (${nameOption})`);\n            // });\n\n            // castingClasses.forEach((castingClass) => {\n            //   searchEntity.search.add(`${spellName} (${castingClass})`);\n            //   searchEntity.search.add(`${altName} (${castingClass})`);\n            // });\n\n            let [spellEntity, featureEntity] = await this.findSpellEntities(searchEntity);\n\n            let entity = await sbcUtils.generatePlaceholderEntity(searchEntity, line);\n            let foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, \"feat\", \"misc\", spellName, entity);\n\n            if (\n              !(!spellEntity && featureEntity) &&\n              !(featureEntity && spellTotal === 1) &&\n              !(!featureEntity && foundItem)\n            )\n              spellsCount++;\n          }\n        }\n\n        featuresOnly = value.isSpellLike ? spellsCount === 0 : false;\n\n        // Loop through the spells\n        await sbcUtils.runParallelOps(spells, async (spell) => {\n          if (featuresOnly) spellTotal--;\n\n          await this.processSpell(\n            spell.replaceAll(/\\*/g, \"\").trim(),\n            spellRowData,\n            spellBookType,\n            spellCastingType,\n            nameOptions,\n            castingClasses,\n            line,\n            spellRowNotes,\n            featuresOnly\n          );\n        });\n\n        spellRowsNotes.push(spellRowNotes);\n      }\n      // Search for Domains, Mysteries, etc\n      else {\n        specialRow = await this.parseSpellbookSpecials(spellRow, line, spellBookType);\n      }\n\n      let countUpdates = {};\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach((key) => {\n        countUpdates[`system.attributes.spells.spellbooks.${spellBookType}.spells.spell${key}.base`] =\n          spellRowCounts[spellBookType][key].base;\n        countUpdates[`system.attributes.spells.spellbooks.${spellBookType}.spells.spell${key}.max`] =\n          spellRowCounts[spellBookType][key].max;\n      });\n\n      await window.SBC.actor.update(countUpdates);\n    }\n\n    // Handle the Wizard School, if applicable\n    if (wizardSchool) {\n      /** @type {sbcTypes.SBC} */\n      const sbcInstance = window.SBC;\n      const compendiumOps = sbcInstance.compendiumSearch;\n      const searchEntity = {\n        search: new Set([`${wizardSchool} School`, wizardSchool]),\n        type: \"feat\",\n        item: wizardSchool,\n      };\n      const searchEntityOptions = {\n        itemType: \"feat\",\n        itemSubType: \"classFeat\",\n        classes: this.app.processData.characterData.classes,\n        race: this.app.processData.characterData.race,\n      };\n\n      const actor = window.SBC.actor;\n      const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n      const existingEntity = actor.itemTypes.feat\n        .filter((feat) => feat.system.subType === \"classFeat\")\n        .find((feat) => (feat.name === feat.name) === entity?.name);\n      searchEntity.search.clear();\n\n      if (entity) {\n        if (\n          !existingEntity ||\n          (existingEntity && entity.flags.core?.sourceId !== existingEntity.flags.core?.sourceId)\n        ) {\n          await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n          await createItem(entity);\n        }\n      }\n    }\n\n    const spellBook = window.SBC.actor.system.attributes.spells.spellbooks[spellBookType];\n    sbcUtils.log(spellBook);\n    if (!spellTotal) {\n      // Reset the spellbook to factory defaults.\n      await window.SBC.actor.update({\n        [`system.attributes.spells.spellbooks.${spellBookType}`]: SpellBooksParser.getDefaultSpellbookData(),\n      });\n    }\n\n    this.app.processData.notes.offense.spellBooks.push({\n      name: value.firstLine.split(\"(\")[0].trim(),\n      cl: +value.casterLevel,\n      asf: spellBook.arcaneSpellFailure ? window.SBC.actor.spellFailure : 0,\n      concentration: (+value.concentrationBonus >= 0 ? \"+\" : \"\") + +value.concentrationBonus,\n      spellRows: spellRowsNotes,\n      specialRow: specialRow,\n    });\n    sbcUtils.log(spellRowsNotes);\n\n    // Return true for the try, and the spellBookType for further processing.\n    return [true, spellBookType, spellTotal !== 0];\n  }\n\n  /**\n   * Set up the spellbook\n   *\n   * @param {string} spellCastingType     The spellcasting type\n   * @param {string} spellBookType        The spellbook type\n   * @param {string} spellCastingClass    The spellcasting class\n   * @param {string} spellsOrExtracts     Whether the spellbook contains spells or extracts\n   * @param {string} altNameSuffix        The suffix for the spellbook name\n   * @param {number} casterLevel          The caster level\n   * @param {number} concentrationBonus   The concentration bonus\n   * @param {boolean} isSpellLike         Whether the spellbook is spell-like\n   * @param {string} firstLine            The first line of the spellbook\n   * @param {string} spellBookName        The spellbook name\n   * @returns {Promise<string>}           The spellbook type\n   */\n  async setupSpellbook(\n    spellCastingType,\n    spellBookType,\n    spellCastingClass,\n    spellsOrExtracts,\n    altNameSuffix,\n    casterLevel,\n    concentrationBonus,\n    isSpellLike,\n    firstLine,\n    spellBookName\n  ) {\n    let domainSlots = 0;\n    let isPsychic = false;\n    let hasCantrips = true;\n    // General spellbook update defaults\n    let spellBookUpdates = {\n      domainSlotValue: domainSlots,\n      psychic: isPsychic,\n      spellPreparationMode: spellCastingType,\n      inUse: true,\n    };\n    const actor = window.SBC.actor;\n\n    // If the actor doesn't have this spellbook, set up default data for it\n    if (!actor.system.attributes.spells.spellbooks[spellBookType]) {\n      spellBookUpdates = foundry.utils.mergeObject(SpellBooksParser.getDefaultSpellbookData(), spellBookUpdates);\n    }\n\n    const finalSpellCastingClass = spellCastingClass.match(wizardClassesRegex()) ? \"wizard\" : spellCastingClass;\n\n    // Now customize the spellbook updates based on type of casting\n    if (isSpellLike) {\n      // Spell-Like Abilities\n      const hdCasterLevelEquality = +casterLevel === actor.system.attributes.hd.total;\n      spellBookUpdates = foundry.utils.mergeObject(spellBookUpdates, {\n        ability: \"cha\",\n        autoSpellLevelCalculation: false,\n        class: hdCasterLevelEquality ? \"_hd\" : \"\",\n        \"cl.formula\": hdCasterLevelEquality ? \"\" : `${casterLevel}`,\n        arcaneSpellFailure: false,\n        name: sbcUtils.capitalize(firstLine.match(/^(.*?)\\(/)[1].trim()),\n        kind: \"arcane\",\n        hasCantrips: hasCantrips,\n      });\n    } else if (spellCastingType === \"points\") {\n      const actorAbilities = actor.system.abilities;\n      // Psychic Magic\n      spellBookUpdates = foundry.utils.mergeObject(spellBookUpdates, {\n        arcaneSpellFailure: false,\n        autoSpellLevelCalculation: false,\n        class: \"_hd\",\n        name: sbcUtils.translate(\"spellbookName.psychicMagic\"),\n        kind: \"psychic\",\n        hasCantrips: true,\n        isPsychic: true,\n        spellPreparationMode: \"spontaneous\",\n        spellPoints: {\n          useSystem: true,\n          maxFormula: \"0\",\n          max: 0,\n        },\n        ability: actorAbilities.int.total >= actorAbilities.cha.total ? \"int\" : \"cha\",\n      });\n    } else {\n      // Spell Books\n      spellBookUpdates = foundry.utils.mergeObject(spellBookUpdates, {\n        class: finalSpellCastingClass.toLowerCase(),\n        name:\n          spellCastingClass.capitalize() +\n          \" \" +\n          sbcUtils.translate(`spellbookName.${spellsOrExtracts}`) +\n          \" \" +\n          altNameSuffix,\n      });\n    }\n\n    // If the class isn't based on hit dice, try to use the class\n    if ([\"hd\", \"_hd\"].includes(spellCastingClass) === false) {\n      // Try to find the spell-casting class\n      const classItem =\n        actor.itemTypes.class.filter(\n          (i) =>\n            i.name.toLowerCase() === spellCastingClass.toLowerCase() || i.system.tag === spellCastingClass.toLowerCase()\n        )[0] ?? null;\n\n      // If the class is found, update the spellbook updates\n      if (classItem) {\n        casterLevel =\n          classItem.system.level + (isNaN(classItem.system.casting.offset) ? 0 : classItem.system.casting.offset);\n        spellCastingClass = classItem.system.tag;\n        const spellsKnownOffsets = SpellBooksParser.getHighestSpellLevelFreeSlots(\n          spellCastingClass,\n          classItem.system.level\n        );\n\n        delete spellBookUpdates[\"name\"];\n        spellBookUpdates = foundry.utils.mergeObject(spellBookUpdates, {\n          class: spellCastingClass,\n          kind: classItem.system.casting.spells,\n          ability: classItem.system.casting.ability,\n          arcaneSpellFailure: classItem.system.casting.spells === \"arcane\",\n          domainSlotValue: classItem.system.casting.domain,\n          casterType: classItem.system.casting.progression,\n          hasCantrips: classItem.system.casting.cantrips,\n          autoSpellLevelCalculation: true,\n          \"cl.-=autoSpellLevelCalculationFormula\": \"\",\n          psychic: classItem.system.casting.spells === \"psychic\",\n          spellPreparationMode: classItem.system.casting.type,\n          spells: spellsKnownOffsets,\n          inUse: true,\n        });\n\n        // Check for prestige classes\n        if (!isSpellLike) {\n          let prestigeClasses = actor.itemTypes.class.filter(\n            (c) =>\n              c.system.subType === \"prestige\" &&\n              c.system.tag !== classItem.system.tag &&\n              !this.app.processData.characterData.prestigeClassCasting.has(c.system.tag)\n          );\n\n          if (prestigeClasses.length > 0) {\n            for (const prestigeClass of prestigeClasses) {\n              const prestigeKey = Object.keys(PrestigeClasses).find(\n                (k) => k.toLowerCase() === prestigeClass.name.toLowerCase()\n              );\n\n              const prestigeData = PrestigeClasses[`${prestigeKey}`];\n              if (prestigeData?.offset) {\n                if (prestigeData.castingType) {\n                  if (prestigeData.castingType.includes(spellBookUpdates[\"kind\"]) === false) {\n                    continue;\n                  }\n                }\n\n                if (prestigeData.castingClass) {\n                  if (prestigeData.castingClass.includes(spellBookUpdates[\"class\"]) === false) {\n                    continue;\n                  }\n                }\n\n                // Update the spellbook with the prestige class offset\n                delete spellBookUpdates[\"cl.-=autoSpellLevelCalculationFormula\"];\n                spellBookUpdates = foundry.utils.mergeObject(spellBookUpdates, {\n                  \"cl.autoSpellLevelCalculationFormula\": prestigeData.offset,\n                });\n\n                // Update the caster level with the prestige class offset\n                const offsetValue = await sbcUtils.processFormula(prestigeData.offset, actor);\n                casterLevel += offsetValue.total;\n\n                this.app.processData.characterData.prestigeClassCasting.set(prestigeClass.system.tag, spellBookType);\n              }\n            }\n          }\n        }\n      }\n    } else if (spellCastingClass === \"hd\") {\n      spellBookUpdates = foundry.utils.mergeObject(spellBookUpdates, {\n        class: \"_hd\",\n        ability: \"cha\",\n      });\n    }\n\n    // Check for and add the spellbook name if necessary\n    if (spellBookName) {\n      spellBookUpdates[\"name\"] = spellBookName;\n    }\n\n    // Save Data needed for validation\n    // and put it into the notes sections as well\n    this.app.processData.characterData.conversionValidation.spellBooks[spellBookType] = {\n      casterLevel: +casterLevel,\n      concentrationBonus: +concentrationBonus,\n    };\n\n    // Run all the updates at once\n    await actor.update({\n      [`system.attributes.spells.spellbooks.${spellBookType}`]: spellBookUpdates,\n    });\n\n    return spellBookType;\n  }\n\n  /**\n   * Process the spell row for spell level, spells per X and spells per X total\n   *\n   * @param {string} spellRow                     The spell row to process\n   * @param {string} spellBookType                The spellbook type\n   * @param {sbcTypes.SpellRowData} spellRowData  The spell row data object\n   * @returns {Array}                             An array with the spell level, spells per X and spells per X total\n   */\n  async processSpellRow(spellRow, spellBookType, spellRowData) {\n    // Check for Psychic Energy points\n    let match;\n\n    if ((match = spellRow.match(/^(\\d+)\\s*\\bPE\\b/)) !== null) {\n      let PE = match[1];\n\n      // Update psychic spell points\n      await window.SBC.actor.update({\n        [`system.attributes.spells.spellbooks.${spellBookType}.spellPoints`]: {\n          maxFormula: PE,\n          value: +PE,\n        },\n      });\n      spellRowData.isSpellRow = true;\n    }\n    // Check for spell frequency. If one is given, this is the amount per interval\n    else if ((match = spellRow.match(/(\\d+)\\s*(?!rounds)?\\/(?:day|week|month|year)/i)) !== null) {\n      spellRowData.spellsPerXTotal = match[1];\n      spellRowData.isSpellRow = true;\n    }\n    // General spell level section\n    else if ((match = spellRow.match(/(^\\d)/)) !== null) {\n      spellRowData.spellLevel = match[1];\n      spellRowData.isSpellRow = true;\n    }\n    // Is this even needed?\n    else if ((match = spellRow.match(/\\d+\\/([a-zA-Z]*)\\)*-/)) !== null) {\n      spellRowData.spellsPerX = match[1];\n    }\n  }\n\n  /**\n   * Process the frequencies of spell usage.\n   *\n   * Mainly, checking for whether a spell section is\n   * At Will, Constant, Weekly, Monthly or Yearly\n   *\n   * @param {string} spellRow                     The spell row to process\n   * @param {sbcTypes.SpellRowData} spellRowData  The spell row data object\n   */\n  processFrequencies(spellRow, spellRowData) {\n    switch (true) {\n      case /Constant/i.test(spellRow):\n        spellRowData.isSpellRow = true;\n        spellRowData.frequency = SpellFrequencyTypes.Constant;\n        spellRowData.isAtWill = true;\n        break;\n\n      case /At[- ]will/i.test(spellRow):\n        spellRowData.isSpellRow = true;\n        spellRowData.frequency = SpellFrequencyTypes.AtWill;\n        spellRowData.isAtWill = true;\n        break;\n\n      case /\\d+\\s*(?:rounds)?\\/day/i.test(spellRow):\n        spellRowData.frequency = SpellFrequencyTypes.Daily;\n        break;\n\n      case /\\d+\\s*(?:rounds)?\\/week/i.test(spellRow):\n        spellRowData.frequency = SpellFrequencyTypes.Weekly;\n        break;\n\n      case /\\d+\\s*(?:rounds)?\\/month/i.test(spellRow):\n        spellRowData.frequency = SpellFrequencyTypes.Monthly;\n        break;\n\n      case /\\d+\\s*(?:rounds)?\\/year/i.test(spellRow):\n        spellRowData.frequency = SpellFrequencyTypes.Yearly;\n        break;\n\n      default:\n      // Does this need any handling?\n    }\n  }\n\n  /**\n   * Process the spell array element\n   *\n   * @param {string} spell                        The spell to process\n   * @param {sbcTypes.SpellRowData} spellRowData  The spell row data object\n   * @param {string} spellBookType                The spellbook type\n   * @param {string} spellCastingType             The spell-casting type\n   * @param {Array<string>} nameOptions           The name options\n   * @param {Array<string>} castingClasses        The spell-casting class\n   * @param {number} line                         The line number\n   * @param {object} spellRowNotes                The spell row notes object\n   * @param {boolean} featuresOnly                Whether to only process features\n   */\n  async processSpell(\n    spell,\n    spellRowData,\n    spellBookType,\n    spellCastingType,\n    nameOptions,\n    castingClasses,\n    line,\n    spellRowNotes,\n    featuresOnly\n  ) {\n    // Process the spell name and get the related spell data and search terms\n    let [spellName, altName, spellContext, isDomainSpell, isMythicSpell] = SpellBooksParser.processSpellName(spell);\n    if (spellName === \"\") return;\n    let [_result, entityItem] = [null, null];\n\n    let searchEntity = {\n      search: new Set([spellName, altName]),\n      type: \"spell\",\n      item: spellName,\n    };\n\n    searchEntity.search = sbcUtils.createSearchSet([spellName, altName], true, nameOptions.concat(castingClasses));\n\n    // Find the spell entity, if it exists. Could be Spell or Feature.\n    let [spellEntity, featureEntity] = await this.findSpellEntities(searchEntity); //, featuresOnly ? \"classFeat\" : \"spell\");\n    let entity = featuresOnly || !spellEntity ? featureEntity : spellEntity;\n\n    // otherwise overwrite \"entity\" with a placeholder\n    if (entity === null) {\n      if (!featuresOnly) {\n        entity = await sbcUtils.generatePlaceholderEntity(searchEntity, line);\n      } else {\n        searchEntity.type = \"classFeat\";\n        entity = await sbcUtils.generatePlaceholderEntity(searchEntity, line);\n      }\n    }\n\n    let foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, \"feat\", \"classFeat\", spellName, entity);\n\n    if (!foundItem) {\n      foundItem = sbcUtils.checkForDuplicateItem(window.SBC.actor, \"feat\", \"misc\", spellName, entity);\n    }\n\n    // Check for spell DC\n    let spellDC = -1;\n    const spellDCMatch = spellContext.match(/\\bDC\\b\\s*(\\d+)(?:,\\s)?/);\n    if (spellDCMatch) {\n      spellDC = spellDCMatch[1];\n      spellContext = spellContext.replace(spellDCMatch[0], \"\").trim();\n    }\n\n    // Check for multiple uses of a spell\n    const multipleMatch = spellContext.match(\n      /(?<![+-]\\s*\\d*\\s*|level\\s*)\\b(\\d+)\\b(?!\\s*d\\s*\\d*\\s*[+-]|\\s*lbs|\\s*kg|\\s*%|\\s*rounds)[,)]?/i\n    );\n    let spellMultiple = 1;\n    if (multipleMatch) {\n      spellMultiple = parseInt(multipleMatch[1]);\n      spellContext = spellContext\n        .replace(multipleMatch[1], \"\")\n        .replace(/[,;]\\s*$/, \"\")\n        .trim();\n    }\n\n    if (spellContext !== \"\") spell = sbcUtils.capitalize(spellName) + \" (\" + spellContext + \")\";\n    else spell = sbcUtils.capitalize(spellName);\n\n    if (entity.type === \"feat\" || foundItem) {\n      if (!foundItem) {\n        await sbcUtils.addAssociatedClass(entity, window.SBC.actor.itemTypes.class);\n        entity.name = spell;\n        [_result, entityItem] = await createItem(entity);\n      } else entityItem = foundItem;\n\n      await SpellBooksParser.setFeatureUses(entityItem, spellMultiple, spellRowData.frequency);\n      await entityItem.update({ name: spell });\n\n      spellRowNotes.spells.push({\n        name: entityItem.name,\n        prepCount: 1,\n        dc: -1,\n        domain: false,\n      });\n\n      return;\n    }\n\n    // Now check the school to match with the wizard school, if it exists\n    if (spellRowData.wizardSchool && spellRowData.wizardSchool === entity.system.school) {\n      isDomainSpell = true;\n    }\n\n    // Setup spell update data, starting with assigning it to the right spellbook\n    let spellUpdates = {\n      name: spell,\n      \"system.spellbook\": spellBookType,\n    };\n\n    // Adjust the name with Mythic\n    if (isMythicSpell) {\n      spellUpdates[\"name\"] += \" (Mythic)\";\n    }\n\n    // Set the spellLevel\n    if (spellRowData.spellLevel !== -1) {\n      spellUpdates[\"system.level\"] = +spellRowData.spellLevel;\n    }\n\n    // Set the spell's PE cost, if any\n    const peCostMatch = spell.match(/(\\d+)\\s*PE/);\n    if (peCostMatch !== null) {\n      spellUpdates[\"spellPoints.cost\"] = `${peCostMatch[1]}`;\n    }\n\n    // Adjust the spell slots for the spellbook's given spell level\n    await this.processSpellSlots(\n      spellRowData,\n      entity,\n      spellUpdates,\n      spellBookType,\n      spellCastingType,\n      spellMultiple,\n      isDomainSpell\n    );\n\n    // Set At Will for spells marked as \"at will\"\n    spellUpdates[\"system.atWill\"] = spellRowData.isAtWill && (entity.system.level > 0 || spellRowData.isSpellLike);\n\n    // Change SpellName to reflect frequency\n    switch (spellRowData.frequency) {\n      case SpellFrequencyTypes.Constant:\n      case SpellFrequencyTypes.Weekly:\n      case SpellFrequencyTypes.Monthly:\n      case SpellFrequencyTypes.Yearly:\n        spellUpdates[\"name\"] = sbcUtils.translate(`spellFrequency.${spellRowData.frequency}`) + \": \" + entity.name;\n        break;\n\n      default:\n        // Nothing to do here.\n        break;\n    }\n\n    // Set data for domain spells\n    if (isDomainSpell) {\n      Object.assign(spellUpdates, {\n        \"system.domain\": true,\n        \"system.slotCost\": 1,\n      });\n    }\n\n    // Update the spell entity\n    await entity.updateSource(spellUpdates);\n\n    sbcUtils.log(\"Spell Updates\", spellUpdates);\n    // Create the spell entity\n    try {\n      [_result, entityItem] = await createItem(entity);\n    } catch (err) {\n      console.error(err);\n    }\n\n    await entityItem.update(spellUpdates);\n\n    // Set the spellDC\n    // This is the offset for the dc, not the total!\n    await this.processSpellDC(entityItem, spellDC, spellBookType);\n\n    spellRowNotes.spells.push({\n      name: entityItem.name,\n      prepCount: spellMultiple,\n      dc: spellDC,\n      domain: !entity.system?.school ? isDomainSpell : false,\n    });\n  }\n\n  /**\n   * Process the spell slots for the spellbook's given spell level\n   *\n   * @param {sbcTypes.SpellRowData} spellRowData  The spell row data object\n   * @param {ItemSpellPF} entity                  The entity item\n   * @param {object} spellUpdates                 The spell update object\n   * @param {string} spellBookType                The spellbook type\n   * @param {string} spellCastingType             The spell-casting type\n   * @param {number} spellMultiple                The number of times a spell can be cast\n   * @param {boolean} isDomainSpell               Whether the spell is a domain spell\n   * @returns {Promise<void>}\n   */\n  async processSpellSlots(\n    spellRowData,\n    entity,\n    spellUpdates,\n    spellBookType,\n    spellCastingType,\n    spellMultiple,\n    isDomainSpell\n  ) {\n    // Set the spells uses / preparation\n    // where SLAs can be cast a number of times per X per sla\n    // and spontaneous spells of a given spellLevel can be cast a total of X times per day\n    //\n    const actor = window.SBC.actor;\n    // Initialize some values for the row\n    if (!spellRowData.spellRowIsInitialized) {\n      await actor.update({\n        [`system.attributes.spells.spellbooks.${spellBookType}.spells.spell${entity.system.level}.base`]: 0,\n      });\n      spellRowData.spellRowIsInitialized = true;\n    }\n\n    // Do not count Constant and At Will spells towards spell slot totals\n    if (!spellRowData.isAtWill && !spellRowData.isConstant) {\n      // Spell-Like Abilities can be cast a number of times per day each\n      if (spellRowData.spellsPerXTotal !== -1 && spellRowData.isSpellLike) {\n        Object.assign(spellUpdates, {\n          \"system.uses.max\": +spellRowData.spellsPerXTotal,\n          \"system.uses.value\": +spellRowData.spellsPerXTotal,\n          \"system.uses.per\": spellRowData.spellsPerX,\n          \"system.preparation.max\": +spellRowData.spellsPerXTotal,\n          \"system.preparation.value\": +spellRowData.spellsPerXTotal,\n        });\n\n        if (entity.system.level === 0) {\n          Object.assign(spellUpdates, {\n            \"system.uses.autoDeductChargesCost\": \"1\",\n          });\n        }\n\n        spellRowCounts[spellBookType][`${entity.system.level}`].base += +spellRowData.spellsPerXTotal;\n        spellRowCounts[spellBookType][`${entity.system.level}`].max += +spellRowData.spellsPerXTotal;\n      }\n\n      // Spells Known can be cast a number of times per day in total for the given spellRow\n      else if (spellRowData.spellsPerXTotal !== -1 && spellCastingType === \"spontaneous\" && !spellRowData.isSpellLike) {\n        spellRowCounts[spellBookType][`${entity.system.level}`].base = +spellRowData.spellsPerXTotal;\n        spellRowCounts[spellBookType][`${entity.system.level}`].max = +spellRowData.spellsPerXTotal;\n      }\n\n      // Spells Prepared can be cast according to how often they are prepared\n      else if (spellCastingType === \"prepared\" && spellRowData.spellsPerXTotal === -1) {\n        Object.assign(spellUpdates, {\n          \"system.preparation.max\": spellMultiple,\n          \"system.preparation.value\": spellMultiple,\n        });\n\n        spellRowCounts[spellBookType][`${entity.system.level}`].base += spellMultiple;\n        spellRowCounts[spellBookType][`${entity.system.level}`].max += spellMultiple;\n      }\n\n      // Subtract Domain Spells from the count\n      if (isDomainSpell) {\n        spellRowCounts[spellBookType][`${entity.system.level}`].base -= 1;\n        spellRowCounts[spellBookType][`${entity.system.level}`].max -= 1;\n      }\n    } else if (entity.system.level === 0 && spellCastingType === \"prepared\") {\n      Object.assign(spellUpdates, {\n        \"system.preparation.max\": spellMultiple,\n        \"system.preparation.value\": spellMultiple,\n      });\n    }\n  }\n\n  /**\n   * Process the spell DC\n   *\n   * @param {ItemSpellPF} entity          The entity item\n   * @param {number} spellDC              The spell DC\n   * @param {string} spellBookType        The spellbook type\n   */\n  async processSpellDC(entity, spellDC, spellBookType) {\n    let spellDCOffset;\n\n    // Calculate the DC in the Actor\n    const spellCastingAbility = window.SBC.actor.system.attributes.spells.spellbooks[spellBookType].ability;\n    const spellCastingAbilityModifier = window.SBC.actor.system.abilities[spellCastingAbility].mod;\n    const spellDCInActor = 10 + +entity.system.level + +spellCastingAbilityModifier;\n\n    spellDCOffset = +spellDC - +spellDCInActor;\n\n    // Try to get the action to adjust the DC\n    if (spellDC !== -1 && entity.system.actions.length > 0) {\n      let actions = entity.system.actions;\n      const spellAction = entity.actions.get(entity.actions.contents[0].id);\n\n      if (spellAction) {\n        await spellAction.update({\n          \"save.dc\": spellDCOffset,\n        });\n        actions[0] = spellAction;\n        await entity.update({\n          \"system.actions\": actions,\n        });\n      }\n    }\n  }\n\n  /**\n   * Parse special abilities of spellbooks\n   *\n   * @param {string} value          The value to parse\n   * @param {number} line           The line number\n   * @param {string} spellBookType  The spellbook type\n   * @returns {Promise<string>}     The special row\n   */\n  async parseSpellbookSpecials(value, line, spellBookType) {\n    let specialRow = null;\n    let name = \"\";\n    let type = \"\";\n    let match;\n    let nameCount = 0;\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n    const searchEntity = {\n      search: new Set(),\n      type: \"feat\",\n    };\n    const searchEntityOptions = {\n      itemType: \"feat\",\n      itemSubType: \"classFeat\",\n      classes: this.app.processData.characterData.classes,\n      race: this.app.processData.characterData.race,\n    };\n\n    const actor = window.SBC.actor;\n    do {\n      // Check for Domains\n      if (\n        (match = value.match(/(?!Domain spell)Domains?\\s*(.*?)(?:;|$)/i)) !== null ||\n        (match = value.match(/Domain\\s*spells*\\s*\\((.*?)\\)\\s*(?:;|$)/i)) !== null\n      ) {\n        name = sbcUtils.translate(\"spellFeature.domain\") + \": \";\n        specialRow = {\n          label: name.replace(\":\", \"\"),\n          value: match[1],\n        };\n        for (let term of match[1].split(\",\")) {\n          term = sbcUtils.parseSubtext(term)[0];\n\n          let subTerm = term.match(/\\((.*) subdomain\\)/i);\n          if (subTerm) {\n            searchEntity.search.add(`${subTerm[1].capitalize()} Subdomain`);\n            searchEntity.search.add(subTerm[1].capitalize());\n          } else {\n            searchEntity.search.add(`${term.capitalize()} Domain`);\n            searchEntity.search.add(`${term.capitalize()} Subdomain`);\n            searchEntity.search.add(term.capitalize());\n          }\n\n          searchEntity.item = term;\n          const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n          searchEntity.search.clear();\n\n          if (entity) {\n            await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n            await createItem(entity);\n          } else {\n            name += `${term}, `;\n            nameCount++;\n          }\n        }\n\n        // Create Class Feature for the Domain\n        name = nameCount > 0 ? name.slice(0, -2) : \"\";\n        type = \"domains\";\n        break;\n      }\n\n      // Check for Mysteries\n      if ((match = value.match(/Myster[y|ies]\\s*(.*?)(?:;|$)/i)) !== null) {\n        name = sbcUtils.translate(\"spellFeature.mystery\") + \": \";\n        specialRow = {\n          label: name.replace(\":\", \"\"),\n          value: match[1],\n        };\n        for (let term of match[1].split(\",\")) {\n          term = sbcUtils.parseSubtext(term)[0];\n\n          searchEntity.search.add(`${term.capitalize()} Mystery`);\n          searchEntity.search.add(term.capitalize());\n          searchEntity.item = term;\n\n          const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n          searchEntity.search.clear();\n\n          if (entity) {\n            await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n            await createItem(entity);\n          } else {\n            name += `${term}, `;\n            nameCount++;\n          }\n        }\n        // Create Class Feature for the Mystery\n        name = nameCount > 0 ? name.slice(0, -2) : \"\";\n        type = \"mysteries\";\n        break;\n      }\n\n      // Check for Spirits\n      if ((match = value.match(/(?!Spirit magic spell)Spirits?\\s*(.*?)(?:;|$)/i)) !== null) {\n        name = sbcUtils.translate(\"spellFeature.spirit\") + \": \";\n        specialRow = {\n          label: name.replace(\":\", \"\"),\n          value: match[1],\n        };\n        for (let term of match[1].split(\",\")) {\n          term = sbcUtils.parseSubtext(term)[0];\n\n          searchEntity.search.add(`${term.capitalize()} Spirit`);\n          searchEntity.search.add(term.capitalize());\n          searchEntity.item = term;\n\n          const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n          searchEntity.search.clear();\n\n          if (entity) {\n            await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n            await createItem(entity);\n          } else {\n            name += `${term}, `;\n            nameCount++;\n          }\n        }\n        // Create Class Feature for the Spirit\n        name = nameCount > 0 ? name.slice(0, -2) : \"\";\n        type = \"spirits\";\n        break;\n      }\n\n      // Check for Bloodline\n      if ((match = value.match(/Bloodlines?\\s*(.*?)(?:;|$)/i)) !== null) {\n        name = sbcUtils.translate(\"spellFeature.bloodline\") + \": \";\n        specialRow = {\n          label: name.replace(\":\", \"\"),\n          value: match[1],\n        };\n        for (let term of match[1].split(\",\")) {\n          term = sbcUtils.parseSubtext(term)[0];\n\n          searchEntity.search.add(`${term.capitalize()} Bloodline`);\n          searchEntity.search.add(term.capitalize());\n          searchEntity.item = term;\n\n          const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n          searchEntity.search.clear();\n\n          if (entity) {\n            await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n            await createItem(entity);\n          } else {\n            name += `${term}, `;\n            nameCount++;\n          }\n        }\n        // Create Class Feature for the Bloodline\n        name = nameCount > 0 ? name.slice(0, -2) : \"\";\n        type = \"bloodlines\";\n        break;\n      }\n\n      // Check for Patron\n      if ((match = value.match(/Patrons?\\s*(.*?)(?:;|$)/i)) !== null) {\n        name = sbcUtils.translate(\"spellFeature.patron\") + \": \";\n        specialRow = {\n          label: name.replace(\":\", \"\"),\n          value: match[1],\n        };\n        for (let term of match[1].split(\",\")) {\n          term = sbcUtils.parseSubtext(term)[0];\n\n          searchEntity.search.add(`${term.capitalize()} Patron`);\n          searchEntity.search.add(term.capitalize());\n          searchEntity.item = term;\n\n          const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n          searchEntity.search.clear();\n\n          if (entity) {\n            await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n            await createItem(entity);\n          } else {\n            name += `${term}, `;\n            nameCount++;\n          }\n        }\n        // Create Class Feature for the Bloodline\n        name = nameCount > 0 ? name.slice(0, -2) : \"\";\n        type = \"patrons\";\n        break;\n      }\n\n      // Check for Opposition Schools\n      if ((match = value.match(/(Opposition|Prohibited) Schools\\s(.*?)(?:;|$)/i)) !== null) {\n        let [_a, oppositionTag, oppositionSchools] = match;\n        // Create Class Feature for the Opposition school\n        name = sbcUtils.translate(`spellFeature.${oppositionTag.toLowerCase()}`) + \": \" + oppositionSchools;\n        type = \"oppositions\";\n      }\n\n      // Check for Thassilonian Specialist\n      if ((match = value.match(/Thassilonian Specialization\\s*(.*?)(?:;|$)/i)) !== null) {\n        name = sbcUtils.translate(\"spellFeature.thassilonianSpecialist\") + \": \";\n        if (match[1]) {\n          await actor.update({\n            [`system.attributes.spells.spellbooks.${spellBookType}.domainSlotValue`]: 2,\n          });\n        }\n        specialRow = {\n          label: name.replace(\":\", \"\"),\n          value: match[1],\n        };\n        for (let term of match[1].split(\",\")) {\n          term = sbcUtils.parseSubtext(term)[0];\n\n          searchEntity.search.add(`${term.capitalize()} School`);\n          searchEntity.search.add(term.capitalize());\n          searchEntity.item = term;\n\n          const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n          searchEntity.search.clear();\n\n          if (entity) {\n            await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n            await createItem(entity);\n          } else {\n            name += `${term}, `;\n            nameCount++;\n          }\n        }\n        // Create Class Feature for the Thassilonian Specialization\n        name = nameCount > 0 ? name.slice(0, -2) : \"\";\n        type = \"thassilonianSpecialist\";\n        break;\n      }\n\n      // Check for Inquisition\n      if ((match = value.match(/Inquisitions?\\s*(.*?)(?:;|$)/i)) !== null) {\n        name = sbcUtils.translate(\"spellFeature.inquisition\") + \": \";\n        specialRow = {\n          label: name.replace(\":\", \"\"),\n          value: match[1],\n        };\n        for (let term of match[1].split(\",\")) {\n          term = sbcUtils.parseSubtext(term)[0];\n\n          searchEntity.search.add(`${term.capitalize()} Inquisition`);\n          searchEntity.search.add(term.capitalize());\n          searchEntity.item = term;\n\n          const entity = await compendiumOps.findEntityInCompendia(searchEntity, searchEntityOptions);\n          searchEntity.search.clear();\n\n          if (entity) {\n            await sbcUtils.addAssociatedClass(entity, actor.itemTypes.class);\n            await createItem(entity);\n          } else {\n            name += `${term}, `;\n            nameCount++;\n          }\n        }\n        // Create Class Feature for the Bloodline\n        name = nameCount > 0 ? name.slice(0, -2) : \"\";\n        type = \"inquisition\";\n        break;\n      }\n      // eslint-disable-next-line no-constant-condition\n    } while (false);\n\n    // If we found something, create a placeholder entity\n    if (name !== \"\") {\n      let placeholder = await sbcUtils.generatePlaceholderEntity({ name, type }, line);\n      await createItem(placeholder);\n    }\n\n    // Add the special row to the notes\n    return specialRow;\n  }\n\n  /**\n   *\n   * @param {string} spell  The spell text to process\n   * @returns {Array<string|boolean>}       An array with the spell name, alt name, domain spell and mythic spell\n   * @static\n   */\n  static processSpellName(spell) {\n    let isDomainSpell = false;\n    let isMythicSpell = false;\n    let spellText = sbcUtils.parseSubtext(spell);\n    let spellName = spellText[0].trim();\n    let spellContext = spellText[1]?.trim() ?? \"\";\n    let spellLeftover = spell\n      .replace(new RegExp(`(${escapeForRegex(spellName)}\\\\s|\\\\(${escapeForRegex(spellContext)}\\\\))`, \"g\"), \"\")\n      .trim();\n    let altName = spellName;\n\n    if (spellName === \"\") return [spellName, altName, spellContext, isDomainSpell, isMythicSpell]; // Skip empty spell names\n\n    // Check if the spell is a domain spell\n    if (spellName.endsWith(\"D\")) {\n      isDomainSpell = true;\n      spellName = spellName.substring(0, spellName.length - 1);\n    } else if (spellContext.endsWith(\"D\")) {\n      isDomainSpell = true;\n      spellContext = spellContext.substring(0, spellContext.length - 1);\n    } else if (spellLeftover.endsWith(\"D\")) {\n      isDomainSpell = true;\n    }\n\n    if (spellName.endsWith(\"M\")) {\n      isMythicSpell = true;\n      spellName = spellName.substring(0, spellName.length - 1);\n    } else if (spellContext.endsWith(\"M\")) {\n      isMythicSpell = true;\n      spellContext = spellContext.substring(0, spellContext.length - 1);\n    } else if (spellLeftover.endsWith(\"M\")) {\n      isMythicSpell = true;\n    }\n\n    // Filter metamagics out of the spell name\n    const metamagicFeats = spellName.match(new RegExp(`(${Metamagic.join(\"\\\\b|\\\\b\")})`, \"gi\"));\n\n    if (metamagicFeats) {\n      altName = spellName.replace(new RegExp(`(${metamagicFeats.join(\"\\\\b|\\\\b\")})`, \"gi\"), \"\").trim();\n    }\n\n    return [spellName, altName, spellContext, isDomainSpell, isMythicSpell];\n  }\n\n  /**\n   * Find the spell entities in the compendiums, looking for a spell and a feature version\n   *\n   * @param {sbcTypes.SearchEntityData} searchEntity  The search entity object\n   * @param {string} type       The type of entity to search for (spell, classFeat, both)\n   * @returns {Promise<Array>}  An array with the spell entity and the feature entity\n   */\n  async findSpellEntities(searchEntity, type = \"both\") {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n\n    // Search for the spell in the compendium\n    let [spellEntity, featureEntity] = [null, null];\n\n    if (type === \"both\" || type === \"spell\") {\n      // Search for the spell\n      spellEntity = await compendiumOps.findEntityInCompendia(searchEntity, {\n        itemTypes: [\"spell\"],\n      });\n    }\n\n    if (type === \"both\" || type === \"classFeat\") {\n      // Search for the feature\n      featureEntity = await compendiumOps.findEntityInCompendia(searchEntity, {\n        itemTypes: [\"feat\"],\n        itemSubTypes: [\"classFeat\", \"misc\"],\n        //        classes: this.app.processData.characterData.classes,\n        race: this.app.processData.characterData.race,\n      });\n    }\n\n    return [spellEntity, featureEntity];\n  }\n\n  /**\n   * Get the default spellbook data for when we need to define a new book or reset an existing one\n   *\n   * @returns {object}  The default spellbook data\n   * @static\n   */\n  static getDefaultSpellbookData() {\n    return {\n      name: \"\",\n      inUse: false,\n      castPerDayAllOffsetFormula: \"\",\n      preparedAllOffsetFormula: \"\",\n      casterType: \"high\",\n      class: \"\",\n      cl: {\n        formula: \"\",\n        total: 0,\n      },\n      concentrationFormula: \"\",\n      concentrationNotes: \"\",\n      clNotes: \"\",\n      ability: \"int\",\n      autoSpellLevelCalculation: true,\n      autoSpellLevels: true,\n      psychic: false,\n      arcaneSpellFailure: true,\n      hasCantrips: true,\n      spellPreparationMode: \"spontaneous\",\n      baseDCFormula: \"10 + @sl + @ablMod\",\n      spellPoints: {\n        useSystem: false,\n        value: 0,\n        maxFormula: \"\",\n        restoreFormula: \"\",\n      },\n      spells: {\n        spell0: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell1: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell2: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell3: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell4: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell5: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell6: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell7: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell8: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n        spell9: {\n          castPerDayOffsetFormula: \"\",\n          preparedOffsetFormula: \"\",\n        },\n      },\n      spellSlotAbilityBonusFormula: \"\",\n      domainSlotValue: 1,\n      concentration: {\n        total: 0,\n      },\n      isSchool: true,\n    };\n  }\n\n  /**\n   * Get the class postfix labels from the spellbook name\n   * For example, the spellbook name \"Domain\" will return [\"CLE\", \"DRU\", \"INQ\"] because it is used for Clerics, Druids and Inquisitors\n   *\n   * @param {string} spellBookName  The spellbook name\n   * @returns {Array<string>}       An array with the class postfix labels\n   * @static\n   */\n  static getClassPostfixFromSpellbookName(spellBookName) {\n    if (!spellBookName) return [];\n    spellBookName = spellBookName.toLowerCase();\n    if (spellBookName.includes(\"domain\")) return [\"CLE\", \"DRU\", \"INQ\"];\n    else if (spellBookName.includes(\"bloodline\")) return [\"SOR\", \"BLO\"];\n    else if (spellBookName.includes(\"school\")) return [\"WIZ\"];\n    else if (spellBookName.includes(\"mystery\")) return [\"ORA\"];\n    else if (spellBookName.includes(\"patron\")) return [\"WIT\"];\n    else if (spellBookName.includes(\"spirit\")) return [\"SHA\"];\n    else return [];\n  }\n\n  /**\n   * Processes the spontaneous class to adjust the spells known\n   *\n   * @param {string} tag    The tag of the class\n   * @param {number} level  The level of the class\n   * @returns {object}      The updates object to be merged in.\n   */\n  static getHighestSpellLevelFreeSlots(tag, level) {\n    let spellLevel = 0;\n\n    switch (tag) {\n      case \"bloodrager\":\n        spellLevel = Math.max(0, Math.ceil((level - 6) / 3));\n        break;\n      case \"sorcerer\":\n        spellLevel = Math.max(0, Math.ceil(level - 2) / 2);\n        break;\n      case \"oracle\":\n        spellLevel = Math.max(0, Math.floor(level / 2));\n        break;\n      case \"psychic\":\n        spellLevel = Math.max(1, Math.floor(level / 2));\n        break;\n      default:\n        break;\n    }\n\n    let updates = {};\n    if (spellLevel > 0) {\n      for (let i = 1; i <= spellLevel; i++) {\n        updates[`spell${i}.preparedOffsetFormula`] = \"1\";\n      }\n    }\n\n    return updates;\n  }\n\n  /**\n   * Set the uses of a feature in place of the spell's uses in a given period\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-pf.mjs\").ItemPF} item  The item to update\n   * @param {number} quantity   The quantity to set\n   * @param {string} period     The period to set\n   */\n  static async setFeatureUses(item, quantity, period) {\n    let updates = {\n      \"system.uses.value\": quantity,\n      \"system.uses.max\": quantity,\n    };\n\n    if (!item.system.uses.maxFormula) {\n      updates[\"system.uses.maxFormula\"] = `${quantity}`;\n    }\n\n    switch (period) {\n      case SpellFrequencyTypes.Weekly:\n        updates[\"system.uses.per\"] = \"week\";\n        break;\n      default:\n        updates[\"system.uses.per\"] = \"day\";\n        break;\n    }\n\n    await item.update(updates);\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { parseValueToDocPath } from \"../../sbcParser.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\n\n// Parse Ability Values and Mods\nexport default class AbilityParser extends AbstractParser {\n  /**\n   *\n   * @param {sbcTypes.InputDialog} app          The SBC Parser application\n   * @param {Array<string>} targetValueFields   The fields to update with the parsed value\n   * @param {Array<string>} targetModFields     The fields to update with the parsed modifier\n   * @param {string} supportedType              The supported type of the value\n   */\n  constructor(app, targetValueFields, targetModFields, supportedType) {\n    super(app);\n    this.targetValueFields = targetValueFields;\n    this.targetModFields = targetModFields;\n    this.supportedType = supportedType;\n  }\n\n  async parse(value, line) {\n    sbcUtils.log(sbcUtils.translate(\"parser.ability.status\", { value, fields: this.targetValueFields.join(\", \") }));\n\n    // Check if the given value is one of the supported ones\n    if (typeof value === this.supportedType) {\n      try {\n        for (const valueField of this.targetValueFields) {\n          await parseValueToDocPath(window.SBC.actor, valueField, value);\n        }\n        return true;\n      } catch (err) {\n        this.throwError(err, \"parser.ability.error\", value, line, {\n          fields: this.targetValueFields.join(\", \"),\n          modValue: sbcUtils.getModifier(value),\n          modFields: this.targetModFields.join(\", \"),\n        });\n        return false;\n      }\n    } else {\n      this.throwError(undefined, \"parser.ability.typeError\", value, line, { type: this.supportedType });\n      return false;\n    }\n  }\n}\n",
    "import { createItem } from \"../../sbcParser.js\";\nimport { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport {\n  fluffGearTermRegex,\n  itemModificationsRegex,\n  magicalAbilitiesRegex,\n  materialAddonsRegex,\n  materialsNonBasicRegex,\n  materialsRegex,\n  quantityOfRegex,\n  sizeRegex,\n  supportedSpellsRegex,\n  techColorRegex,\n  techTierRegex,\n} from \"../../sbcRegex.js\";\n\n// Parse Gear\nexport default class GearParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Statistics\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"gear\";\n  }\n\n  /**\n   * Parse a string as gear\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, _type = undefined) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    const compendiumOps = sbcInstance.compendiumSearch;\n\n    // Skip if the value is \"none\"\n    if (value === \"none\") return true;\n\n    // Split ranged weapons and ammunition\n    value = value\n      .replace(/\\b(?:and|with)\\s*(\\d+)/gi, \", $1\")\n      .replace(/ioun stones \\([^)]+\\)/i, (match) =>\n        match\n          .substring(match.indexOf(\"(\") + 1, match.length - 1)\n          .split(\",\")\n          .map((i) => {\n            const parts = i.split(\"[\");\n            return parts[0].trim() + \" Ioun Stone\";\n          })\n          .join(\", \")\n      )\n\n      // Handle scrolls\n      .replace(/(scrolls \\([^)]+\\))/gi, (match) => {\n        return match\n          .substring(9, match.length - 1)\n          .split(/,? and |, /g)\n          .map((i) => \"scroll of \" + i)\n          .join(\", \");\n      })\n\n      // Handle implanted ioun stones\n      .replace(/implanted ioun stones? \\(((?:[^,)]+,?)+)\\)/gi, (match) =>\n        match\n          .substring(0, match.length - 1)\n          .split(\"(\")[1]\n          .split(\",\")\n          .map((i) => {\n            const amount = i.match(/(\\d+)/)?.[1] || 1;\n            const effectiveName = i.replace(/\\d+/, \"\").trim().replace(/s$/, \"\");\n            return `Ioun Stone ${effectiveName} (${amount}, Implanted)`;\n          })\n          .join(\", \")\n      );\n\n    const money = { pp: 0, gp: 0, sp: 0, cp: 0 };\n    let gears = this.splitText(value, false);\n    let placeholdersGenerated = [];\n\n    let gearItemTypes = [\"consumable\", \"equipment\", \"loot\", \"weapon\", \"container\", \"implant\"];\n\n    await sbcUtils.runParallelOps(gears, async (input) => {\n      let requiresNameChange = false;\n      let regexMatch = null;\n\n      input = input\n        .trim()\n        .replaceAll(\"*\", \"\")\n        .replaceAll(\"[\", \"(\")\n        .replaceAll(\"]\", \")\")\n        .replace(/(\\d+)\\s*doses(?! of)/i, \"$1\")\n        .replace(/^pair of /i, \"2 \")\n        .replace(/\\(as\\s+(?:an?\\s+)?/i, \"(\")\n        .replace(/^And\\s/i, \"\");\n\n      // If we're left with a number at the start, and it's *not* a currency string,\n      // assume it's a quantity and move it to the end of the string\n      if (/^\\d+\\s/.test(input) && !sbcUtils.getMoneyFromString(input)) {\n        input = input.replace(/^(\\d+)(.*)/, \"$2 ($1)\").trim();\n      }\n\n      // Extract item worth\n      let goldValue = 0;\n      let goldIsTotal = false;\n      if (input.match(/\\d+\\s+[pscg]p\\s+in\\b/i)) {\n        let worth;\n        [worth, input] = input.split(/\\bin\\b/i);\n        input = `${input} worth ${worth}`;\n      }\n\n      if (input.match(/\\bworth\\b/i)) {\n        let worthText;\n        [input, worthText] = input.split(/\\bworth\\b/i);\n\n        const { worth, rest } =\n          /(?<worth>(?:\\s*\\d+\\s*[pgsc]p\\s*){1,4})(?:each|for the pair|total|in all)?(?<rest>.*)/g.exec(\n            worthText\n          ).groups;\n\n        goldIsTotal = worth.match(/for the pair|total|in all/i) !== null;\n\n        input = (input + rest)\n          .replace(/,\\s*,\\s*/g, \", \")\n          .replace(/\\(\\s*,\\s*/g, \"(\")\n          .replace(/\\s*,\\s*\\)/g, \")\")\n          .replace(/\\s{2,}/, \" \")\n          .replace(/\\(\\s*\\)/g, \"\")\n          .trim()\n          .trim();\n        goldValue = sbcUtils.convertMoneyToGold(sbcUtils.getMoneyFromString(worth));\n      }\n\n      // Handle composite longbow max. strength\n      let maxStrength = 0;\n      if (/\\+?\\d+ Str\\b/i.test(input)) {\n        maxStrength = +input.match(/(\\d+) Str\\b/i)[1].trim();\n        input = input.replace(/\\s*\\(\\+?\\d+ Str\\)/i, \"\").trim();\n      }\n\n      // Begin the process of parsing the gear\n      let splitInput = sbcUtils.parseSubtext(input);\n      let gearText = splitInput[0];\n      let gearSubtext = splitInput[1];\n\n      const searchTerms = new Set([input, gearText, gearSubtext].filter((i) => i));\n\n      searchTerms.add(gearText.replace(/(^\\d+|masterwork|mwk)/g, \"\").trim());\n\n      if ((regexMatch = input?.match(/(?:\\b|\\()(?:focus\\s+)?for\\b/))) {\n        // Probably a spell component, but indicates a use for something, so that use case should be preserved\n        requiresNameChange = true;\n        const withoutPurposeName = input.split(regexMatch[0])[0].trim();\n        searchTerms.add(withoutPurposeName);\n      }\n\n      let quantity = 1;\n      let material = \"\";\n      let baseMaterial = \"\";\n      let addons = [];\n      let enhancementValue = 0;\n      let magicAbilities = {};\n      let size = window.SBC.actor.system.traits.size.base || \"med\";\n      let fluffTerm = \"\";\n      let charges = null;\n\n      // Handle plurals of a thing\n      [...searchTerms].forEach((searchTerm) => {\n        // Singularize terms like \"Elixirs of XYZ\"\n        searchTerms.add(searchTerm.replace(/s of\\b/i, \" of\"));\n      });\n\n      // Handle the \"silly gear\" map\n      const sillyGearMap = window.SBC.config.sillyGear;\n      const sillyGearKeys = Object.keys(sillyGearMap);\n      [...searchTerms].forEach((searchTerm) => {\n        const sillyGearMatch = sbcUtils.haystackRegexSearch(sillyGearKeys, searchTerm);\n        if (sillyGearMatch) {\n          const sillyGearRegex = new RegExp(sillyGearMatch, \"i\");\n          searchTerms.add(searchTerm.replace(sillyGearRegex, sillyGearMap[sillyGearMatch]));\n          requiresNameChange = true;\n        }\n      });\n\n      // Handle charges\n      [...searchTerms].forEach((searchTerm) => {\n        if ((regexMatch = searchTerm.match(/(\\d+) charges?/i))) {\n          charges = +regexMatch[1];\n          searchTerms.add(\n            searchTerm\n              .replace(regexMatch[0], \"\")\n              .replace(/\\(\\s*,\\s*/, \"(\")\n              .replace(/\\(\\s*\\)/, \"\")\n              .trim()\n          );\n        }\n      });\n\n      // Handle the size of the item\n      [...searchTerms].forEach((searchTerm) => {\n        if ((regexMatch = searchTerm.match(sizeRegex())) !== null) {\n          size = sbcUtils.getKeyByValue(pf1.config.actorSizes, regexMatch[0]) || \"med\";\n          searchTerms.add(searchTerm.replace(regexMatch[0], \"\").trim());\n        }\n      });\n\n      // Handle the fluff terms (\"battered\", \"tattered\", \"torn\", etc.)\n      [...searchTerms].forEach((searchTerm) => {\n        if ((regexMatch = searchTerm.match(fluffGearTermRegex())) !== null) {\n          searchTerms.add(searchTerm.replace(regexMatch[0], \"\").trim());\n          fluffTerm = regexMatch[0];\n        }\n      });\n\n      // Preserve text inside ( ) for a backup search\n      if (gearSubtext?.length) {\n        const quantityMatch = input.match(/\\((\\d+)\\s*(?:\\)\\s*$|,\\s*)/);\n        if (quantityMatch) {\n          // && !supportedSpellsRegex().test(gearText)) {\n          quantity = +quantityMatch[1];\n\n          searchTerms.add(\n            gearSubtext\n              .replace(new RegExp(`^${quantityMatch[1]}`), \"\")\n              .replace(/^\\s*,\\s*/, \"\")\n              .trim()\n          );\n\n          searchTerms.add(\n            input\n              .replace(new RegExp(`\\\\(\\\\s*${quantityMatch[1]}`), \"(\")\n              .replace(/\\(\\s*,\\s*/, \"(\")\n              .replace(\"()\", \"\")\n              .trim()\n          );\n        }\n      }\n\n      // Handle metamagic rods\n      [...searchTerms].forEach((searchTerm) => {\n        if (searchTerm.toLowerCase().includes(\"rod\") && searchTerm.toLowerCase().includes(\"metamagic\")) {\n          const kind = searchTerm.match(/(lesser|normal|greater)/i)?.[0] || \"\";\n          searchTerm = searchTerm\n            .replace(/rod(?: of)?/i, \"\")\n            .replace(/metamagic/i, \"\")\n            .replace(kind, \"\")\n            .trim();\n\n          if (searchTerm.toLowerCase().includes(\"elemental\")) {\n            searchTerm = \"Elemental\";\n            requiresNameChange = true;\n          }\n\n          searchTerm = `${searchTerm} Metamagic Rod, ${sbcUtils.capitalize(kind)}`;\n          searchTerms.add(searchTerm);\n        }\n      });\n\n      // Handle holy symbols\n      [...searchTerms].forEach((searchTerm) => {\n        let holySymbolName;\n        holySymbolName = searchTerm.toLowerCase();\n\n        if (holySymbolName.includes(\"holy symbol\")) {\n          let material = holySymbolName.match(/\\b(?:wood|silver|gold|iron|platinum|flask|tattoo)/gi)?.[0] || \"wood\";\n          if (holySymbolName.startsWith(material.toLowerCase())) {\n            holySymbolName = holySymbolName.split(\" \").slice(1).join(\" \");\n          }\n\n          if (holySymbolName.includes(\"unholy\")) {\n            requiresNameChange = true;\n          }\n\n          // Unholy symbols and symbols of a random material require a name change\n          // Also switch to iron, because it has a nicer image and is probably closer\n          // to the target material than wood\n          if (!holySymbolName.split(\" \")[0].includes(\"holy\")) {\n            requiresNameChange = true;\n            material = \"iron\";\n          }\n\n          // Holy symbol is of a specific listed god, so preserve that name on the final item\n          if (holySymbolName.includes(\" of \")) {\n            requiresNameChange = true;\n          }\n\n          // Grab a matching holy symbol from the compendium, or wood as fallback\n          // If no material is specified, we're assuming it is wooden. If it is\n          // of a specific random material, value has already been parsed elsewhere\n          searchTerms.add(`Holy Symbol (${material.capitalize()})`);\n        }\n      });\n\n      // Handle tech items being color-coded\n      [...searchTerms].forEach((searchTerm) => {\n        if ((regexMatch = searchTerm.match(techColorRegex())) !== null) {\n          searchTerms.add(searchTerm.replace(techColorRegex(), \"\").trim());\n          searchTerms.add(searchTerm.replace(techColorRegex(), \"\").trim() + ` (${regexMatch[0]})`);\n        }\n      });\n\n      // Handle the different tiers of tech items\n      [...searchTerms].forEach((searchTerm) => {\n        if ((regexMatch = searchTerm.match(techTierRegex())) !== null) {\n          searchTerms.add(searchTerm.replace(regexMatch[0], \"\").trim() + ` (${regexMatch[0]})`);\n          searchTerms.add(searchTerm.replace(regexMatch[0], \"\").trim() + ` ${regexMatch[0]}`);\n        }\n      });\n\n      // Handle the quantity of items\n      [...searchTerms].forEach((searchTerm) => {\n        if ((regexMatch = quantityOfRegex().exec(searchTerm)) !== null) {\n          searchTerms.add(`${regexMatch[2]} (${regexMatch[1]})`);\n          searchTerms.add(regexMatch[2]);\n        }\n      });\n\n      // Handle materials\n      [...searchTerms].forEach((searchTerm) => {\n        if (searchTerm.search(materialsRegex()) !== -1) {\n          let nonBasicMaterials = searchTerm.match(materialsNonBasicRegex());\n          material = nonBasicMaterials ? nonBasicMaterials[0] : material;\n          material =\n            pf1.registry.materials.contents.find(\n              (mt) => mt.name === sbcUtils.capitalize(material ?? \"\") || mt.id === material\n            )?.id ?? null;\n          searchTerms.add(\n            searchTerm\n              .replace(materialsNonBasicRegex(), \"\")\n              .replace(/\\s{2,}/, \" \")\n              .trim()\n          );\n        }\n      });\n\n      // Amulet of might fists edge case\n      if (input.match(/amulet of mighty fist/i)) {\n        enhancementValue = +input.match(/\\+[12345]/)?.[1] || 0;\n        const regex = magicalAbilitiesRegex();\n        while ((regexMatch = regex.exec(input)) !== null) {\n          const match = regexMatch.groups;\n          const magicAbility = sbcUtils.getMagicAbility(match.ability, match.prefix || match.postfix || undefined);\n          magicAbilities[magicAbility.name] = magicAbility;\n        }\n\n        requiresNameChange = true;\n        searchTerms.add(\"Amulet of Mighty Fists\" + (enhancementValue ? ` +${enhancementValue}` : \"+1\"));\n\n        goldValue =\n          this.calculateItemPrice(\n            { name: \"\", type: \"weapon\", system: { price: 0 } },\n            {\n              material: null,\n              addons: [],\n              enhancementValue: enhancementValue,\n              enhancementTypes: Object.values(magicAbilities),\n            }\n          ) * 2;\n      } else {\n        // Handle enhancement bonuses\n        [...searchTerms].forEach((searchTerm) => {\n          if (searchTerm.match(/\\+[12345]/) && !searchTerm.match(/\\d$/)) {\n            enhancementValue = +searchTerm.match(/[12345]/)[0].trim();\n            searchTerm = searchTerm.replace(/\\+[12345]/, \"\").trim();\n            searchTerms.add(searchTerm);\n          }\n\n          // Handle the magical abilities. Only items with an enhancement bonus of at least +1 can have abilities\n          if (enhancementValue) {\n            const regex = magicalAbilitiesRegex();\n            const regexSearchTerm = searchTerm;\n            while ((regexMatch = regex.exec(regexSearchTerm)) !== null) {\n              const match = regexMatch.groups;\n              const magicAbility = sbcUtils.getMagicAbility(match.ability, match.prefix || match.postfix || undefined);\n\n              if (magicAbility.hasSpecialTerm) {\n                if (match.ability.toLowerCase() === \"bane\") {\n                  const [enemyType, enemySubtype] = sbcUtils.extractCreatureTypeInfo(searchTerm);\n                  searchTerm = searchTerm\n                    .replace(enemyType, \"\")\n                    .replace(enemySubtype, \"\")\n                    .replace(`-${match.ability}`, \"\")\n                    .trim();\n\n                  magicAbility.specialTerm = `${enemyType} ${enemySubtype}`;\n                } else {\n                  const specialTermMatch = searchTerm.match(\n                    new RegExp(\"\\\\b(?:([a-z-]+)[- ])?\" + magicAbility.name + \"(?: \\\\(([^)]+)\\\\))?\", \"i\")\n                  );\n                  const specialTerm = specialTermMatch[1] || specialTermMatch[2];\n                  if (specialTerm) {\n                    magicAbility.specialTerm = specialTerm;\n                  }\n                  searchTerm = searchTerm.replace(specialTermMatch[0], \"\");\n                }\n              } else {\n                searchTerm = searchTerm.replace(regexMatch[0], \"\");\n              }\n\n              searchTerms.add(searchTerm.replace(/\\s{2,}/g, \" \").trim());\n              magicAbilities[magicAbility.name] = magicAbility;\n            }\n          }\n        });\n      }\n\n      // Handle Item Modifications\n      [...searchTerms].forEach((searchTerm) => {\n        if ((regexMatch = itemModificationsRegex().exec(searchTerm)) !== null) {\n          searchTerms.add(searchTerm);\n          searchTerms.add(searchTerm.replace(regexMatch[0], \"\").trim());\n          requiresNameChange = true;\n        }\n      });\n\n      // Handle misc modifier terms\n      [...searchTerms].forEach((searchTerm) => {\n        searchTerms.add(searchTerm.replace(/\\W?(Integrated|Implanted|Timeworn)\\W?/gi, \"\"));\n      });\n\n      // Handle ironwood separately. We can assume the item is made or iron normally, so this is good enough to keep as normal item\n      [...searchTerms].forEach((searchTerm) => {\n        if (searchTerm.includes(\"ironwood\")) {\n          searchTerms.add(searchTerm.replace(/\\bironwood\\b\\s+/i, \"\"));\n          baseMaterial = \"iron\";\n          requiresNameChange = true;\n        }\n      });\n\n      // Handle special cases\n      this.handleSpecialCases(searchTerms, gearSubtext);\n\n      // Handle physical might and mental prowess stat items\n      [...searchTerms].forEach((searchTerm) => {\n        if (searchTerm.search(/\\b(?:physical might|mental prowess)\\b/i) !== -1) {\n          searchTerm = searchTerm\n            .replace(/Intelligence/i, \"Int\")\n            .replace(/Wisdom/i, \"Wis\")\n            .replace(/Charisma/i, \"Cha\")\n            .replace(/Strength/i, \"Str\")\n            .replace(/Dexterity/i, \"Dex\")\n            .replace(/Constitution/i, \"Con\");\n\n          searchTerms.add(searchTerm.replace(/(Str|Dex|Con|Int|Wis|Cha),\\s*(Dex|Con|Wis|Cha)/i, \"$1 & $2\"));\n          // TODO: Remove this once system removes generic items, as we will find the specific item then\n          requiresNameChange = true;\n        }\n      });\n\n      // Handle Material addons\n      [...searchTerms].forEach((searchTerm) => {\n        if (searchTerm.search(materialAddonsRegex()) !== -1) {\n          let addonMatches = searchTerm.match(materialAddonsRegex());\n          addons = addonMatches\n            .map((element) => {\n              const probableId = element[0] + element.slice(1).replace(/\\s/, \"\");\n              return (\n                pf1.registry.materials.find(\n                  (mt) => mt.id === probableId || mt.name.toLowerCase() === element.toLowerCase()\n                )?.id ?? null\n              );\n            })\n            .filter((x) => !!x);\n          searchTerms.add(searchTerm.replace(materialAddonsRegex(), \"\"));\n        }\n      });\n\n      let gear = {\n        type: \"loot\",\n        name: gearText.replace(/^([\\d+]+|\\b(?:masterwork|mwk|broken|timeworn)\\b)/gi, \"\").trim(),\n        rawName: quantity > 1 ? this.stripQuantity(sbcUtils.singularize(input)) : input,\n        subtext: gearSubtext,\n        price: goldIsTotal ? goldValue / quantity : goldValue,\n        value: 0,\n        size: size,\n        fluffTerm: fluffTerm,\n        enhancementValue: enhancementValue,\n        enhancementTypes: Object.values(magicAbilities),\n        maxStrength: maxStrength,\n        charges: charges,\n        mwk: /\\bmasterwork\\b|\\bmwk\\b/i.test(gearText) || enhancementValue > 0,\n        quantity: quantity,\n        timeworn: /\\btimeworn\\b/i.test(gearText),\n        broken: /\\bbroken\\b/i.test(gearText),\n        material: material,\n        baseMaterial: baseMaterial,\n        addons: addons,\n        implanted: null,\n      };\n\n      [...searchTerms].forEach((searchTerm) => {\n        searchTerms.add(searchTerm?.replace(/ies\\s*$/gi, \"y\"));\n        searchTerms.add(searchTerm.replace(/ives/gi, \"ife\"));\n        searchTerms.add(searchTerm?.replace(/(?!Charges)s\\s*$/gi, \"\"));\n      });\n\n      console.log(input, searchTerms);\n\n      let gearKeys = Object.keys(gear);\n\n      /** @type {Item} */\n      let entity = {};\n\n      const gold = sbcUtils.getMoneyFromString(gearText);\n      if (gold) {\n        // Store all money for later, so we can bundle it into a pouch\n        money.pp += gold.pp;\n        money.gp += gold.gp;\n        money.sp += gold.sp;\n        money.cp += gold.cp;\n        return;\n      } else if (supportedSpellsRegex().test(gearText)) {\n        supportedSpellsRegex().lastIndex = 0;\n        gear.type = \"consumable\";\n\n        let namePattern = gearText.match(supportedSpellsRegex());\n        let consumableType = this.getConsumableType(namePattern[1]?.toLowerCase());\n        // Remove spell bonus denominator from search name\n        let spellName = namePattern[2].replace(/\\+\\d+/, \"\").trim();\n        let spellBonus = namePattern[2].match(/\\+(\\d+)/)?.[1] ?? 0;\n        // let charges = gearSubtext?.match(/\\d+/)?.[0] ?? (/wand/i.test(consumableType) ? 50 : 1);\n        let consumableQuantity = parseInt(\n          gearSubtext?.match(/(\\d+) charges/i)?.[1] ?? (/wand/i.test(consumableType) ? 50 : 1)\n        );\n        let casterLevel = gearSubtext?.match(/CL\\s*(\\d+)/i)?.[1] ?? -1;\n\n        let consumable = null;\n        entity = await compendiumOps.findEntityInCompendia(\n          { search: new Set([`${consumableType} of ${spellName}`]), item: `${consumableType} of ${spellName}` },\n          {\n            itemType: \"consumable\",\n          }\n        );\n\n        if (!entity) {\n          entity = await compendiumOps.findEntityInCompendia(\n            { search: new Set([spellName, sbcUtils.singularize(spellName)]), item: spellName },\n            {\n              itemType: \"spell\",\n            }\n          );\n          if (entity) {\n            const data = entity.toObject();\n\n            if (spellBonus) {\n              // Search for matching buff and determine caster level based on that\n              const buff = await compendiumOps.findEntityInCompendia(\n                { search: data.name, item: data.name },\n                {\n                  itemType: \"buff\",\n                }\n              );\n\n              if (buff) {\n                const changeFormula = buff.system.changes[0].formula;\n                for (let i = 1; i <= 20; i++) {\n                  const roll = new pf1.dice.RollPF(changeFormula, { item: { level: i } });\n                  const result = (await roll.evaluate()).total;\n                  if (result === +spellBonus) {\n                    data.cl = i;\n                    break;\n                  }\n                }\n              }\n            }\n\n            consumable = await CONFIG.Item.documentClasses.spell.toConsumable(\n              data,\n              consumableType === \"oil\" ? \"potion\" : consumableType\n            );\n          }\n        } else {\n          consumable = entity;\n        }\n\n        if (consumable) {\n          if (consumableType === \"wand\") gear.charges = consumableQuantity;\n\n          if (casterLevel > 0) consumable.system.cl = parseInt(casterLevel);\n\n          if (spellBonus) {\n            consumable.name += ` +${spellBonus}`;\n            gear.enhancementValue = 0;\n          }\n\n          if (consumableType === \"oil\") {\n            consumable.name = consumable.name.replace(\"Potion\", \"Oil\");\n            consumable.system.unidentified.name = consumable.system.unidentified.name.replace(\"Potion\", \"Oil\");\n          }\n\n          entity = new Item.implementation(consumable);\n        }\n      } else {\n        entity = await compendiumOps.findEntityInCompendia(\n          { search: searchTerms, item: input },\n          { itemTypes: gearItemTypes }\n        );\n        if (entity?.type === \"implant\") {\n          gear.implanted = true;\n        }\n      }\n\n      if (gearSubtext && entity?.name?.toLowerCase() === gearSubtext.toLowerCase()) {\n        requiresNameChange = true;\n      }\n\n      if (entity && Object.keys(entity).length !== 0) {\n        const itemName = requiresNameChange ? sbcUtils.capitalize(gear.rawName) : this.buildItemName(entity, gear);\n\n        const newGearPrice = this.calculateItemPrice(entity, gear);\n        if (entity.system.price !== newGearPrice) {\n          gear.price = newGearPrice;\n        }\n\n        let updates = {\n          name: itemName,\n          \"system.identifiedName\": itemName,\n        };\n        for (let i = 0; i < gearKeys.length; i++) {\n          const key = gearKeys[i];\n          const change = gear[key];\n\n          if (!change || (Array.isArray(change) && !change.length)) {\n            continue;\n          }\n\n          switch (key) {\n            case \"implanted\":\n              if (value !== null) {\n                updates[\"system.implanted\"] = change;\n              }\n              break;\n\n            case \"charges\":\n              if (entity.system?.uses?.per === \"charges\") {\n                updates[\"system.uses.value\"] = change;\n              }\n              break;\n\n            case \"material\": {\n              const materialInfo = pf1.registry.materials.get(change) || null;\n              if (!materialInfo) {\n                break;\n              }\n              const baseMaterials = Array.isArray(materialInfo.baseMaterial)\n                ? materialInfo.baseMaterial\n                : [materialInfo.baseMaterial];\n              let baseMaterial =\n                gear.baseMaterial ||\n                entity.system?.material?.base?.value ||\n                entity.system?.armor?.material?.base?.value;\n              baseMaterial = baseMaterials.includes(baseMaterial) ? baseMaterial : baseMaterials[0];\n\n              switch (entity.type) {\n                case \"weapon\":\n                  updates[\"system.material.normal.value\"] = change;\n                  updates[\"system.material.base.value\"] = baseMaterial;\n                  break;\n\n                case \"equipment\":\n                  if ([\"armor\", \"shield\"].includes(entity.system.subType)) {\n                    updates[\"system.armor.material.normal.value\"] = change;\n                    updates[\"system.armor.material.base.value\"] = baseMaterial;\n                  }\n                  break;\n              }\n              Object.assign(updates, this.applyMaterialInfo(entity, gear, gear.material));\n              break;\n            }\n\n            case \"size\":\n              updates[\"system.size\"] = change;\n              break;\n\n            case \"maxStrength\":\n              if (entity.type === \"weapon\") {\n                const actions = entity.toObject().system.actions ?? [];\n                actions.forEach((action) => setProperty(action, \"ability.max\", change));\n                updates[\"system.actions\"] = actions;\n              }\n              break;\n\n            case \"addons\": {\n              switch (entity.type) {\n                case \"weapon\":\n                  updates[\"system.material.addon\"] = change;\n                  break;\n\n                case \"equipment\":\n                  if ([\"armor\", \"shield\"].includes(entity.system.subType)) {\n                    updates[\"system.armor.material.addon\"] = change;\n                  }\n                  break;\n              }\n              change.forEach((addon) => Object.assign(updates, this.applyMaterialInfo(entity, gear, addon)));\n              break;\n            }\n\n            case \"enhancementTypes\": {\n              let description = entity.system.description.value;\n              let casterLevel = +(gear.enhancementValue || 0) * 3;\n              let auras = [];\n\n              change.forEach((enhancementType) => {\n                casterLevel = Math.max(casterLevel, enhancementType.cl);\n                auras.push(enhancementType.aura);\n\n                description +=\n                  \"\\n<h3>\" +\n                  sbcUtils.translate(`specialAbilities.${enhancementType.name}.name`) +\n                  \"</h3>\\n\" +\n                  sbcUtils.translate(`specialAbilities.${enhancementType.name}.description`);\n              });\n\n              updates[\"system.description.value\"] = description;\n              updates[\"system.cl\"] = casterLevel;\n\n              // Filter out duplicate auras\n              auras = auras.filter((aura, index) => auras.indexOf(aura) === index);\n              if (auras.length === 1) {\n                updates[\"system.aura.school\"] = auras[0];\n              } else {\n                updates[\"system.aura.custom\"] = true;\n                updates[\"system.aura.school\"] = auras.map((aura) => sbcUtils.translate(`auras.${aura}`)).join(\", \");\n              }\n\n              break;\n            }\n\n            case \"enhancementValue\":\n              switch (entity.type) {\n                case \"weapon\":\n                  updates[\"system.enh\"] = +change;\n                  updates[\"system.masterwork\"] = true;\n                  updates[\"system.aura.school\"] = \"evo\";\n                  break;\n\n                case \"equipment\":\n                  updates[\"system.armor.enh\"] = +change;\n                  updates[\"system.masterwork\"] = true;\n                  updates[\"system.aura.school\"] = \"abj\";\n                  break;\n              }\n              updates[\"system.hardness\"] = entity.system.hardness + change * 2;\n              updates[\"system.hp.max\"] = entity.system.hp.max + change * 10;\n              updates[\"system.hp.value\"] = entity.system.hp.value + change * 10;\n              updates[\"system.cl\"] = +change * 3;\n              break;\n\n            case \"price\":\n              updates[\"system.price\"] = +change;\n              break;\n\n            case \"mwk\":\n              updates[\"system.masterwork\"] = change;\n              break;\n\n            case \"value\":\n              updates[\"system.price\"] = +change;\n              break;\n\n            case \"quantity\":\n              updates[\"system.quantity\"] = +change;\n              break;\n\n            case \"timeworn\":\n              updates[\"system.timeworn\"] = change;\n              break;\n\n            case \"broken\":\n              updates[\"system.broken\"] = change;\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        if (Object.keys(updates).length) {\n          console.log(sbcUtils.translate(\"parser.gear.parseInfo\"), updates);\n          await entity.updateSource(updates);\n        }\n\n        await createItem(entity);\n      } else {\n        gear.name = input;\n        const placeholder = await sbcUtils.generatePlaceholderEntity(gear, line);\n\n        await createItem(placeholder);\n        placeholdersGenerated.push(gear.name);\n      }\n    });\n\n    // If we found money during the item parse, create a pouch for it\n    if (money.pp || money.gp || money.sp || money.cp) {\n      const moneyString = (\n        (money.pp ? sbcUtils.translate(\"money.pp\", { value: money.pp }) : \"\") +\n        \" \" +\n        (money.gp ? sbcUtils.translate(\"money.gp\", { value: money.gp }) : \"\") +\n        \" \" +\n        (money.sp ? sbcUtils.translate(\"money.sp\", { value: money.sp }) : \"\") +\n        \" \" +\n        (money.cp ? sbcUtils.translate(\"money.cp\", { value: money.cp }) : \"\")\n      )\n        .replace(/\\s{2,}/, \" \")\n        .trim();\n\n      let pouch = {\n        type: \"container\",\n        name: sbcUtils.translate(\"moneyPouch\", { money: moneyString }),\n        currency: money,\n      };\n      const placeholder = await sbcUtils.generatePlaceholderEntity(pouch, line);\n      await createItem(placeholder);\n    }\n\n    if (placeholdersGenerated.length > 0) {\n      this.logInfo(\"parser.gear.generatedPlaceholders\", placeholdersGenerated[0], line, {\n        items: placeholdersGenerated.join(\", \"),\n      });\n    }\n\n    this.app.processData.notes.statistics.gear = this.getItemNotes();\n\n    // classItems were created successfully\n    return true;\n  }\n\n  /**\n   * Apply a specific materials properties to the item\n   *\n   * @param {Item} item The base item\n   * @param {object} gear The gear object\n   * @param {string} material The material to apply\n   *\n   * @returns {{[key: string]: any}} The properties to apply\n   */\n  applyMaterialInfo(item, gear, material) {\n    const updates = {};\n    const materialInfo = pf1.registry.materials.get(material) || null;\n\n    if (!materialInfo) return updates;\n\n    if (materialInfo.hardness) {\n      updates[\"system.hardness\"] = materialInfo.hardness + gear.enhancementValue * 2;\n    }\n\n    if (materialInfo.healthMultiplier) {\n      updates[\"system.hp.max\"] = Math.max(\n        1,\n        Math.floor(item.system.hp.max * materialInfo.healthMultiplier) + gear.enhancementValue * 10\n      );\n      updates[\"system.hp.value\"] = Math.max(\n        1,\n        Math.floor(item.system.hp.value * materialInfo.healthMultiplier) + gear.enhancementValue * 10\n      );\n    }\n\n    if (materialInfo.masterwork) {\n      updates[\"system.masterwork\"] = true;\n    }\n\n    if (materialInfo.weight.multiplier !== 1) {\n      updates[\"system.weight.value\"] = item.system.weight * materialInfo.weight.multiplier;\n    }\n\n    if (materialInfo.weight.bonusPerPound) {\n      updates[\"system.weight.value\"] = item.system.weight * (1 + materialInfo.weight.bonusPerPound);\n    }\n\n    if (item.type === \"equipment\") {\n      const armorChanges = materialInfo[item.system.subType] || { acp: 0, maxDex: 0, asf: 0 };\n      if (armorChanges.acp) {\n        updates[\"system.armor.acp\"] = Math.max(0, item.system.armor.acp - armorChanges.acp);\n      }\n\n      if (armorChanges.maxDex && item.system.armor.dex) {\n        updates[\"system.armor.dex\"] = item.system.armor.dex + armorChanges.maxDex;\n      }\n\n      if (armorChanges.asf) {\n        updates[\"system.spellFailure\"] = Math.max(0, item.system.spellFailure + armorChanges.asf);\n      }\n    }\n\n    return updates;\n  }\n\n  /**\n   * Dynamically builds an items name based on its properties\n   *\n   * @param {Item} item The item to calculate the price for\n   * @param {object} gear The gear object\n   * @returns {string} The final item name\n   */\n  buildItemName(item, gear) {\n    let nameSegments = [item.name];\n\n    if (gear.maxStrength) {\n      nameSegments.unshift(`(+${gear.maxStrength} ${sbcUtils.translate(\"str\")})`);\n    }\n\n    gear.addons.forEach((addon) => {\n      const materialInfo = pf1.registry.materials.get(addon);\n      if (materialInfo) {\n        nameSegments.push(materialInfo.name);\n      }\n    });\n\n    if (gear.material && !gear.name.match(/\\bwand\\b/i)) {\n      const materialInfo = pf1.registry.materials.get(gear.material);\n      // Attach material name only if not part of item name\n      if (materialInfo && !item.name.includes(materialInfo.name)) {\n        nameSegments.push(materialInfo.name);\n      } else {\n        // We wrongly detected material, so drop it\n        gear.material = null;\n      }\n    }\n\n    gear.enhancementTypes.forEach((enhancementType) => {\n      nameSegments.push(\n        (enhancementType.hasSpecialTerm ? sbcUtils.capitalize(enhancementType.specialTerm) + \"-\" : \"\") +\n          sbcUtils.translate(`specialAbilities.${enhancementType.name}.name`)\n      );\n    });\n\n    if (gear.timeworn) {\n      nameSegments.push(sbcUtils.translate(\"timeworn\"));\n    }\n\n    if (gear.broken) {\n      nameSegments.push(sbcUtils.translate(\"broken\"));\n    }\n\n    if (gear.enhancementValue && !item.name.match(new RegExp(`\\\\+${gear.enhancementValue}`))) {\n      nameSegments.push(\"+\" + gear.enhancementValue);\n    } else if (gear.mwk) {\n      nameSegments.push(sbcUtils.translate(\"masterwork\"));\n    }\n\n    if (gear.fluffTerm) {\n      nameSegments.push(sbcUtils.capitalize(gear.fluffTerm));\n    }\n\n    if (gear.size && gear.size !== \"med\") {\n      nameSegments.push(pf1.config.actorSizes[gear.size]);\n    }\n\n    return nameSegments.reverse().join(\" \");\n  }\n\n  /**\n   * Calculates the price of a given item\n   *\n   * @param {Item} item The item to calculate the price for\n   * @param {object} gear The gear object\n   * @returns {number} The price of the item\n   */\n  calculateItemPrice(item, gear) {\n    // Nothing to do here, the item price has been explicitly overwritten\n    if (gear.price) return gear.price;\n\n    let price = item.system.price || 0;\n    price += this.calculateMaterialPrice(item, gear, gear.material);\n    gear.addons.forEach((addon) => (price += this.calculateMaterialPrice(item, gear, addon)));\n\n    if (gear.mwk) {\n      if (\n        item.system.subType === \"ammo\" ||\n        gear.name.toLowerCase() === \"shuriken\" ||\n        gear.name.toLowerCase() === \"crystal chakram\"\n      ) {\n        price += 6;\n      } else {\n        price += item.type === \"weapon\" ? 300 : 150;\n      }\n    }\n\n    // TODO: Handle double weapons\n\n    let effectiveEnhancementBonus = gear.enhancementValue;\n\n    gear.enhancementTypes.forEach((enhancementType) => {\n      if (enhancementType.bonus) {\n        effectiveEnhancementBonus += enhancementType.bonus;\n      }\n\n      if (enhancementType.staticCost) {\n        price += enhancementType.staticCost;\n      }\n    });\n\n    if (effectiveEnhancementBonus) {\n      let enhancementMultiplier = item.type === \"weapon\" ? 2000 : item.type === \"equipment\" ? 1000 : 40;\n      if (item.name.toLowerCase() === \"shuriken\" || item.name.toLowerCase() === \"crystal chakram\") {\n        enhancementMultiplier = 40;\n      }\n      price += Math.pow(effectiveEnhancementBonus, 2) * enhancementMultiplier;\n    }\n\n    // Handle composite bow price adjust\n    if (gear.maxStrength) {\n      const isLongbow = gear.rawName.match(/longbow/i);\n\n      price += gear.maxStrength * (isLongbow ? 100 : 75);\n    }\n\n    return price;\n  }\n\n  /**\n   * Calculates the price of a given item\n   *\n   * @param {Item} item The item to calculate the price for\n   * @param {object} gear The gear object\n   * @param {string} material The material to calculate the price for\n   * @returns {number} The price of the item\n   */\n  calculateMaterialPrice(item, gear, material) {\n    let price = parseFloat(item.system.price) || 0;\n    let basePrice = price;\n\n    const materialInfo = pf1.registry.materials.get(material);\n    if (!materialInfo) return 0;\n\n    switch (item.type) {\n      case \"equipment\": {\n        if (item.system.subType !== \"armor\" && item.system.subType !== \"shield\") {\n          break;\n        }\n\n        if (materialInfo) {\n          price *= materialInfo.price.multiplier || 1;\n\n          switch (item.system.subType) {\n            case \"shield\":\n              price += materialInfo.price.shield || 0;\n              break;\n\n            case \"armor\":\n              switch (item.system.equipmentSubtype) {\n                case \"lightArmor\":\n                  price += materialInfo.price.lightArmor || 0;\n                  break;\n\n                case \"mediumArmor\":\n                  price += materialInfo.price.mediumArmor || 0;\n                  break;\n\n                case \"heavyArmor\":\n                  price += materialInfo.price.heavyArmor || 0;\n                  break;\n              }\n              break;\n\n            default:\n              price += materialInfo.price.perPound * item.system.weight.value;\n              break;\n          }\n        }\n\n        // Subtract masterwork price if already included in material price\n        if (gear.mwk && materialInfo?.masterwork) {\n          price -= 150;\n        }\n        break;\n      }\n\n      case \"weapon\": {\n        if (materialInfo) {\n          price *= materialInfo.price.multiplier || 1;\n        }\n\n        if (item.name.toLowerCase() === \"shuriken\" || item.name.toLowerCase() === \"crystal chakram\") {\n          price += materialInfo.price.ammunition || 0;\n\n          if (gear.mwk && materialInfo?.masterwork) {\n            price -= 6;\n          }\n        } else {\n          switch (item.system.weaponSubtype) {\n            case \"light\":\n              price += materialInfo.price.lightWeapon || 0;\n              break;\n\n            case \"1h\":\n              price += materialInfo.price.oneHandWeapon || 0;\n              break;\n\n            case \"2h\":\n              price += materialInfo.price.twoHandWeapon || 0;\n              break;\n\n            case \"ranged\":\n              price += materialInfo.price.rangedTwoHandWeapon || 0;\n              break;\n\n            default:\n              price += materialInfo.price.perPound * item.system.weight.value;\n              break;\n          }\n\n          // Subtract masterwork price if already included in material price\n          if (gear.mwk && materialInfo?.masterwork) {\n            price -= 300;\n          }\n        }\n\n        break;\n      }\n\n      case \"loot\": {\n        if (item.system.subType !== \"ammo\") {\n          break;\n        }\n\n        if (materialInfo) {\n          price *= materialInfo.price.multiplier || 1;\n          if (materialInfo.price.ammunition) {\n            price += materialInfo.price.ammunition;\n          } else {\n            price += materialInfo.price.perPound * item.system.weight.value;\n          }\n        }\n\n        // Apply masterwork price if not included in material\n        if (gear.mwk && !materialInfo?.masterwork) {\n          price += 6;\n        }\n\n        break;\n      }\n    }\n\n    if (gear.enhancementValue) {\n      price += materialInfo.enhancement?.weapon || 0;\n    }\n\n    return price - basePrice;\n  }\n\n  getItemNotes() {\n    const itemNotes = [];\n    const actor = window.SBC.actor;\n    const itemGroups = [\"weapon\", \"equipment\", \"consumable\", \"loot\", \"container\"];\n\n    for (const itemGroup of itemGroups) {\n      actor.itemTypes[itemGroup].forEach((item) => {\n        itemNotes.push({\n          name: item.name,\n          quantity: item.system.quantity || 1,\n          charges: item.system.uses?.per === \"charges\" ? item.system.uses.value : null,\n        });\n      });\n    }\n\n    return itemNotes;\n  }\n\n  getConsumableType(name) {\n    switch (true) {\n      case name.search(/^(?:potion|oil)s?/i) !== -1:\n        return \"potion\";\n\n      case name.search(/^wands?/i) !== -1:\n        return \"wand\";\n\n      case name.search(/scrolls?/i) !== -1:\n        return \"scroll\";\n\n      default:\n        return undefined;\n    }\n  }\n\n  stripQuantity(string) {\n    return string\n      .replace(/\\(\\d+\\s*[,)]\\s*/, \"(\")\n      .replace(\"()\", \"\")\n      .trim();\n  }\n\n  handleSpecialCases(searchTerms, gearSubtext) {\n    // Special case for grenades\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.search(/grenades?$/gi) !== -1) {\n        searchTerms.add(`Grenade (${searchTerm.replace(/s$/, \"\")})`);\n      }\n    });\n\n    // Black Powder Horn special case\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.search(/black powder horn/i) !== -1) {\n        searchTerms.add(searchTerm.replace(/black powder horn/i, \"Powder Horn\"));\n      }\n    });\n\n    // Handle flail special case\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.includes(\"flail\") && (!searchTerm.includes(\"light\") || !searchTerm.includes(\"heavy\"))) {\n        searchTerms.add(searchTerm.replace(/flail/i, \"Light Flail\"));\n      }\n    });\n\n    // Special case for Studded Leather armor\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.search(/studded leather(?!\\s*armor)/i) !== -1) {\n        searchTerms.add(searchTerm.replace(/studded leather/i, \"Studded Leather Armor\"));\n      }\n    });\n\n    // Special case for Lamellar armor\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.search(/lamellar\\s*armor/i) !== -1) {\n        searchTerms.add(searchTerm.replace(/lamellar armor/i, \"Lamellar\"));\n      }\n    });\n\n    // Special case for Pearl of Power\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.toLowerCase().includes(\"pearl of power\")) {\n        const pearlLevel = +searchTerm.match(/(\\d+)/)?.[1];\n        if (pearlLevel) {\n          const spellLevelEnding = [\"st\", \"nd\", \"rd\"][pearlLevel - 1] ?? \"th\";\n          searchTerms.add(`Pearl of Power, ${pearlLevel}${spellLevelEnding} Level Spell`);\n        }\n      }\n    });\n\n    // Special case for Artisan's tools\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.match(/tool/i) && searchTerm.match(/artisan|thieves/i)) {\n        const toolName = searchTerm.includes(\"artisan\") ? \"Artisan's\" : \"Thieves'\";\n        searchTerms.add(\n          toolName + \" Tools, \" + (searchTerm.match(/\\b(?:mwk|masterwork)\\b/i) ? \"Masterwork\" : \"Common\")\n        );\n      }\n    });\n\n    // Special case for firearm bullets\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.toLowerCase().includes(\"bullet\")) {\n        searchTerms.add(searchTerm.replace(/bullet/i, \"Firearm Bullet\"));\n      }\n    });\n\n    // Special case for bolts\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.toLowerCase().includes(\"bolt\")) {\n        searchTerms.delete(searchTerm);\n        searchTerms.add(searchTerm.replace(/bolt/i, \"Crossbow Bolt\"));\n      }\n    });\n\n    // Special case for alchemical cartridges\n    [...searchTerms].forEach((searchTerm) => {\n      if (searchTerm.toLowerCase().includes(\"alchemical\") && searchTerm.toLowerCase().includes(\"cartridge\")) {\n        searchTerm = searchTerm\n          .replace(/alchemical(.*)cartridges?/gi, \"$1 Alchemical Cartridge\")\n          .replace(/\\s{2,}/, \" \")\n          .trim();\n\n        const cartridgeType = searchTerm.toLowerCase().split(\"alchemical cartridge\")[0].trim();\n\n        searchTerms.add(\n          \"Alchemical Cartridge (\" +\n            cartridgeType +\n            (gearSubtext.includes(\"bullet\") || cartridgeType === \"paper\" ? \", bullet or pellet\" : \"\") +\n            \")\"\n        );\n      }\n    });\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { languagesRegex } from \"../../sbcRegex.js\";\n\n// Parse Languages\nexport default class LanguageParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Statistics\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"language\";\n  }\n\n  /**\n   * Parse a string as languages\n   *\n   * @param {string} value        The value to parse\n   * @param {number} _line        The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, _line, _type = undefined) {\n    const languages = value.split(/[,;]/g);\n    const specialLanguages = [];\n    const realLanguages = [];\n    let languageContext = \"\";\n\n    this.app.processData.notes.statistics.languages = [];\n\n    for (let i = 0; i < languages.length; i++) {\n      let language = languages[i].trim();\n      let checkForLanguageContext = sbcUtils.parseSubtext(language);\n\n      // Check for language context information and add this to the custom language field if available\n      if (checkForLanguageContext.length > 1) {\n        language = checkForLanguageContext[0];\n        languageContext = checkForLanguageContext[1];\n\n        specialLanguages.push(`${language} (${languageContext})`);\n        continue;\n      }\n\n      if (language.search(languagesRegex()) !== -1) {\n        let languageKey = sbcUtils.getKeyByValue(pf1.config.languages, language);\n        realLanguages.push(languageKey);\n      } else {\n        specialLanguages.push(language);\n      }\n    }\n\n    await window.SBC.actor.update({\n      \"system.traits.languages\": realLanguages\n        .concat(specialLanguages)\n        .concat(window.SBC.actor.system.traits.languages.base),\n    });\n\n    this.app.processData.notes.statistics.languages.push(...realLanguages, ...specialLanguages);\n\n    return true;\n  }\n}\n",
    "import { sbcUtils } from \"../../sbcUtils.js\";\nimport { AbstractParser } from \"../abstract-parser.js\";\nimport { racialModifiersRegex, skillsRegex } from \"../../sbcRegex.js\";\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../../sbcTypes.js\";\n\n// Parse Skills\nexport default class SkillParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Statistics\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"skill\";\n  }\n\n  /** @type {{[key: string]: {[key: string]: string|number}}} */\n  versatilePerformanceSkillOverrides = {};\n\n  /** @type {{[key: string]: Array<string>}} */\n  versatilePerformanceSkillDisablers = {};\n\n  /**\n   * Parse a string as skills\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   * @private\n   */\n  async _parse(value, line, _type = undefined) {\n    // Reverse the skills so that we can handle Racial Modifiers first.\n    let [skills, racialSkills] = value.split(/racial (?:modifiers?|bonus)/i);\n    skills = this.splitText(skills);\n    racialSkills = racialSkills ? this.splitText(racialSkills) : [];\n\n    this.app.processData.notes.statistics.skills = [];\n\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n\n    const maxRanks = sbcInstance.actor.system.attributes.hd.total;\n    const classSkills = [];\n    const racialModifiers = {};\n    const skillChanges = {};\n    const skillChangesAfter = {};\n\n    // Check the current Items for classes and save, if a skill is a classSkill\n    const currentItems = sbcInstance.actor.items.contents;\n\n    await sbcUtils.runParallelOps(currentItems, async (item) => {\n      let skillKeys = Object.keys(item.system.classSkills ?? {});\n\n      // Loop through the skills\n      for (let j = 0; j < skillKeys.length; j++) {\n        let currentSkill = skillKeys[j];\n        if (item.system.classSkills[currentSkill] === true) {\n          if (!classSkills.includes(currentSkill)) {\n            classSkills.push(currentSkill);\n          }\n        }\n      }\n\n      // Loop through the item's changes, if any\n      await this.updateSkillChanges(item, skillChanges);\n    });\n\n    // Setup Counters\n    let countOfCustomSkills = 0;\n    let countOfSubSkills = {\n      art: 1,\n      crf: 1,\n      lor: 1,\n      prf: 1,\n      pro: 1,\n    };\n\n    // Replace common Skill shorthands and misswordings\n    const formatSkill = (rawSkill) =>\n      rawSkill\n        .replace(/\\bEnter Choice\\b/gim, \"any one\")\n        .replace(/Arcane/gim, \"Arcana\")\n        .replace(/\\bPer\\./gim, \"Perception\")\n        .replace(/S\\. Motive/gim, \"Sense Motive\")\n        .replace(/\\bLing\\./gim, \"Linguistics\");\n\n    // Process skills for racial modifiers\n    for (const racialSkill of racialSkills) {\n      let rawSkill = formatSkill(racialSkill);\n\n      let racialSkillMatch = rawSkill.match(racialModifiersRegex());\n      if (!racialSkillMatch) {\n        continue;\n      }\n\n      const parsedValue = parseInt(racialSkillMatch.groups.value);\n      const skillKey = Object.keys(skillChanges).find((o) => skillChanges[o].name === racialSkillMatch.groups.name);\n      if (skillKey && skillChanges[skillKey].racial && racialSkillMatch.groups.context) {\n        racialModifiers[racialSkillMatch.groups.name.toLowerCase()] = {\n          name: racialSkillMatch.groups.name,\n          number: parsedValue,\n          prefixedValue: sbcUtils.prefixNumber(parsedValue),\n          context: racialSkillMatch.groups.context ?? \"\",\n        };\n      }\n    }\n    this.app.processData.notes.statistics.racialSkillModifiers = Object.keys(racialModifiers).length\n      ? Object.values(racialModifiers)\n      : null;\n\n    // Now process the normal skills\n    for (let i = 0; i < skills.length; i++) {\n      if (!skills[i]) continue;\n      let rawSkill = formatSkill(skills[i]);\n\n      if (rawSkill.match(/[+-]?\\s*\\d+(?![^(]*\\))/g)?.length > 1) {\n        let missedCommas = rawSkill.split(/(?<=[-+]\\d+) /);\n        rawSkill = missedCommas.splice(0, 1)[0];\n        skills.push(...missedCommas);\n      }\n\n      let skill = null;\n      let knowledgeSubSkills = [\n        \"Arcana\",\n        \"Dungeoneering\",\n        \"Engineering\",\n        \"Geography\",\n        \"History\",\n        \"Local\",\n        \"Nature\",\n        \"Nobility\",\n        \"Planes\",\n        \"Religion\",\n      ];\n\n      // Check if there are multiple subskills\n      if (\n        rawSkill.search(/knowledge|perform|craft|profession|lore|artistry/i) !== -1 &&\n        rawSkill.search(/,|\\band\\b|&/g) !== -1\n      ) {\n        // If there are, generate new skills and push them to the array of skills\n\n        let tempSkill = sbcUtils.parseSubtext(rawSkill);\n\n        let skillName = tempSkill[0];\n        let skillModifier = tempSkill[2][0];\n\n        let subSkills = tempSkill[1].split(/,|\\band\\b|&/g);\n\n        for (let j = 0; j < subSkills.length; j++) {\n          let subSkill = subSkills[j].trim();\n          let newSkill = skillName + \" (\" + subSkill + \") \" + skillModifier;\n          skills.push(newSkill);\n        }\n\n        continue;\n      }\n\n      if (rawSkill.match(/\\bknowledge\\b/i) && rawSkill.match(/\\bany\\b/i)) {\n        // If it's a knowledge skill with \"any\" as subskill\n        // Find out how many, as most of the time its denoted as \"any two\"/\"any three\"\n\n        let tempSkill = sbcUtils.parseSubtext(rawSkill);\n\n        let skillName = tempSkill[0];\n        let skillModifier = tempSkill[2][0];\n\n        const stringOfKnowledgeSubskills = tempSkill[1].match(/\\bany\\b (.*)/i)[1];\n        const numberOfKnowledgeSubskills =\n          [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"even\", \"eight\", \"nine\"].indexOf(stringOfKnowledgeSubskills) +\n          1;\n\n        // Pick Subskills at random\n        let alreadyPickedSubskills = \"\";\n\n        for (let i = 0; i < numberOfKnowledgeSubskills; i++) {\n          let randomSubSkill = Math.floor(Math.random() * 10);\n          let searchString = new RegExp(knowledgeSubSkills[randomSubSkill], \"i\");\n\n          if (alreadyPickedSubskills.search(searchString) === -1 && !skills.includes(searchString)) {\n            let subSkill = knowledgeSubSkills[randomSubSkill];\n            let newSkill = skillName + \" (\" + subSkill + \") \" + skillModifier;\n            skills.push(newSkill);\n            alreadyPickedSubskills += newSkill;\n          } else {\n            i--;\n          }\n        }\n\n        continue;\n      }\n\n      if (rawSkill.match(/\\bknowledge\\b/i) && rawSkill.match(/\\ball\\b/i)) {\n        // If it's a knowledge skill with \"all\" as subskill\n\n        const tempSkill = sbcUtils.parseSubtext(rawSkill);\n        const skillName = tempSkill[0];\n        const skillModifier = tempSkill[2][0];\n\n        for (let j = 0; j < knowledgeSubSkills.length; j++) {\n          const knowledgeSubSkill = knowledgeSubSkills[j].trim();\n          const newSkill = skillName + \" (\" + knowledgeSubSkill + \") \" + skillModifier;\n          skills.push(newSkill);\n        }\n\n        continue;\n      }\n\n      skill = sbcUtils.parseSubtext(rawSkill);\n\n      try {\n        let skillName = skill[0].replace(/[+-]?\\s*\\d+/g, \"\").trim();\n        let skillTotal = skill[0].replace(skillName, \"\").replace(/\\s/g, \"\");\n        let subSkill = \"\";\n        let skillContext = \"\";\n\n        // Check, if there is a subskill\n        if (skill[1]) {\n          if (skill[1].startsWith(\"+\")) {\n            skillContext = skill[1];\n          } else {\n            subSkill = skill[1];\n          }\n        }\n\n        // Check, if there are restValues after separating subtext\n        if (skill[2]) {\n          // If the rest includes two values, the first one is the skillTotal and the second the context note\n          if (skillTotal === \"\" && skill[2][1]) {\n            skillContext = skill[2][1];\n          }\n          skillTotal = skill[2][0];\n        }\n\n        // Check if its one of the supported skills, otherwise try to parse it as a custom skill\n        const searchSkillWithSubSkill = skillName + \" (\" + subSkill + \")\";\n        let skillKey = \"\";\n\n        if (skillName.match(skillsRegex())) {\n          // Supported Skills without Subskills\n          skillKey = sbcUtils.getKeyByValue(pf1.config.skills, skillName);\n        } else if (searchSkillWithSubSkill.match(skillsRegex())) {\n          // Supported Skills with Subskills\n          skillName = searchSkillWithSubSkill;\n          skillKey = sbcUtils.getKeyByValue(pf1.config.skills, searchSkillWithSubSkill);\n        } else {\n          // Custom Skills not included in the system\n          skillKey = \"skill\";\n        }\n\n        const size = sbcInstance.actor.system.traits.size.base;\n        let sizeMod = 0;\n\n        // As long as it's not a custom skill ...\n        if (skillKey !== \"skill\") {\n          // Seems the temporary actors does not calculate the mod or if it's a classSkill beforehand, so we need to do that manually\n          const skillAbility = sbcInstance.actor.system.skills[skillKey].ability;\n          const skillAbilityMod = sbcInstance.actor.system.abilities[skillAbility].mod;\n\n          switch (skillKey) {\n            case \"fly\":\n              sizeMod = pf1.config.sizeFlyMods[size];\n              break;\n\n            case \"ste\":\n              sizeMod = pf1.config.sizeStealthMods[size];\n              break;\n\n            default:\n              break;\n          }\n\n          const skillInfo = {\n            name: skillName,\n            key: skillKey,\n            total: +skillTotal,\n            abilityMod: +skillAbilityMod,\n            classSkill: classSkills.includes(skillKey),\n            sizeMod: +sizeMod,\n            racialModifiers,\n            changes: skillChanges,\n            acp: sbcInstance.actor.system.skills[skillKey].acp,\n            acpTotal: sbcInstance.actor.system.attributes.acp.total,\n            maxRanks,\n            speedBonus: [\"swm\", \"clm\"].includes(skillKey)\n              ? sbcInstance.actor.system.attributes.speed[skillKey === \"swm\" ? \"swim\" : \"climb\"].base > 0\n                ? 8\n                : 0\n              : 0,\n            isOutsider: sbcInstance.app.processData.characterData.isOutsider,\n            outsiderSkillPicks: sbcInstance.app.processData.characterData.outsiderSkillPicks,\n            outsiderSkills: sbcInstance.app.processData.characterData.outsiderSkills,\n            isExpert: sbcInstance.app.processData.characterData.isExpert,\n            expertSkillPicks: sbcInstance.app.processData.characterData.expertSkillPicks,\n            expertSkills: sbcInstance.app.processData.characterData.expertSkills,\n          };\n\n          /** @type {[number, boolean]} */\n          const [skillRanks, isNewClassSkill, outsiderExpert] = this.calculateSkillRanks(skillInfo);\n          if (isNewClassSkill) {\n            if (outsiderExpert === \"outsider\") {\n              sbcInstance.app.processData.characterData.outsiderSkillPicks -= 1;\n              sbcInstance.app.processData.characterData.outsiderSkills.push(skillKey);\n            } else {\n              sbcInstance.app.processData.characterData.expertSkillPicks -= 1;\n              sbcInstance.app.processData.characterData.expertSkills.push(skillKey);\n            }\n\n            skillInfo.classSkill = true;\n          }\n\n          // Check if there are racial modifiers to add to the context\n          const racialNote = racialModifiers[skillName.toLowerCase()]?.context.length\n            ? `${skillContext ? \"; \" : \"\"}${racialModifiers[skillName.toLowerCase()].prefixedValue}${racialModifiers[skillName.toLowerCase()].context}`\n            : \"\";\n          if (skillKey.search(/(art|crf|lor|prf|pro)/) === -1) {\n            // IF ITS NOT A SKILL WITH SUBSKILLS\n            await sbcInstance.actor.update({\n              [`system.skills.${skillKey}.rank`]: skillRanks,\n            });\n\n            // Process things again as a double-check (and to account for updated formulas)\n            skillChangesAfter[skillKey] = {};\n            await sbcUtils\n              .runParallelOps(currentItems, async (item) => {\n                // Loop through the item's changes, if any\n                await this.updateSkillChanges(item, skillChangesAfter);\n              })\n              .then(async () => {\n                const subSkillInfo = Object.assign({}, skillInfo, { skillChanges: skillChangesAfter });\n                /** @type {[number, boolean]} */\n                const [skillRanks2, isNewClassSkill, outsiderExpert] = this.calculateSkillRanks(subSkillInfo);\n                if (isNewClassSkill) {\n                  if (outsiderExpert === \"outsider\") {\n                    sbcInstance.app.processData.characterData.outsiderSkillPicks -= 1;\n                    sbcInstance.app.processData.characterData.outsiderSkills.push(skillKey);\n                  } else {\n                    sbcInstance.app.processData.characterData.expertSkillPicks -= 1;\n                    sbcInstance.app.processData.characterData.expertSkills.push(skillKey);\n                  }\n\n                  skillInfo.classSkill = true;\n                }\n\n                if (skillRanks !== skillRanks2) {\n                  await sbcInstance.actor.update({\n                    [`system.skills.${skillKey}.rank`]: skillRanks2,\n                  });\n                }\n              });\n\n            // Add Data to conversionValidation\n            this.app.processData.characterData.conversionValidation.skills[skillKey] = {\n              total: +skillTotal,\n              context:\n                skillContext.replace(/\\+?(-?\\d+)/g, (value) => sbcUtils.prefixNumber(+value - +skillTotal)) +\n                racialNote,\n            };\n\n            this.app.processData.notes.statistics.skills.push({\n              name: pf1.config.skills[skillKey] || skillName,\n              prefixedValue: skillTotal >= 0 ? \"+\" + +skillTotal : skillTotal,\n              context: skillContext,\n            });\n          } else {\n            // IF ITS A SKILL WITH SUBSKILLS (e.g. Art, Craft, etc.)\n            const subSkillKey = skillKey + +countOfSubSkills[skillKey];\n            const subSkillInfo = Object.assign({}, skillInfo, { key: subSkillKey, skillChanges: skillChangesAfter });\n\n            // WIP FIND A WAY TO APPEND INSTEAD OF OVERWRITE THE SUBSKILLS\n            await sbcInstance.actor.update({\n              [`system.skills.${skillKey}.subSkills.${subSkillKey}`]: {\n                ability: sbcInstance.actor.system.skills[skillKey].ability,\n                acp: sbcInstance.actor.system.skills[skillKey].acp,\n                cs: sbcInstance.actor.system.skills[skillKey].cs,\n                name: subSkill.capitalize(),\n                rank: skillRanks,\n                rt: sbcInstance.actor.system.skills[skillKey].rt,\n              },\n            });\n\n            // Process things again as a double-check (and to account for updated formulas)\n            skillChangesAfter[skillKey] = {};\n            await sbcUtils\n              .runParallelOps(currentItems, async (item) => {\n                // Loop through the item's changes, if any\n                await this.updateSkillChanges(item, skillChangesAfter);\n              })\n              .then(async () => {\n                /** @type {[number, boolean]} */\n                const [skillRanks2, _isNewClassSkill, _outsiderExpert] = this.calculateSkillRanks(subSkillInfo);\n\n                // There are some instances where a subskill of a parent skill is a class skill\n                // rather than the parent skill itself. This is unfortunate, as we can't mark it\n                // as a class skill for the class.\n                // if (isNewClassSkill) {\n                //   sbcInstance.app.processData.characterData.outsiderSkillPicks -= 1;\n                //   sbcInstance.app.processData.characterData.outsiderSkills.push(skillKey);\n                // }\n\n                if (skillRanks !== skillRanks2) {\n                  await sbcInstance.actor.update({\n                    [`system.skills.${skillKey}.subSkills.${subSkillKey}`]: {\n                      ability: sbcInstance.actor.system.skills[skillKey].ability,\n                      acp: sbcInstance.actor.system.skills[skillKey].acp,\n                      cs: sbcInstance.actor.system.skills[skillKey].cs,\n                      name: subSkill.capitalize(),\n                      rank: skillRanks2,\n                      rt: sbcInstance.actor.system.skills[skillKey].rt,\n                    },\n                  });\n                }\n              });\n\n            // Add Data to conversionValidation\n            this.app.processData.characterData.conversionValidation.skills[subSkillKey] = {\n              name: subSkill.capitalize(),\n              total: +skillTotal,\n              context: skillContext.replace(/\\d+/g, (value) => +value - +skillTotal),\n            };\n\n            this.app.processData.notes.statistics.skills.push({\n              name: pf1.config.skills[skillKey] + ` (${subSkill.capitalize()})`,\n              prefixedValue: skillTotal >= 0 ? \"+\" + +skillTotal : skillTotal,\n              context: skillContext,\n            });\n\n            countOfSubSkills[skillKey]++;\n          }\n        } else {\n          // if it's a custom skill ...\n          let customSkillKey = \"skill\";\n\n          if (countOfCustomSkills > 0) {\n            customSkillKey = \"skill\" + (+countOfCustomSkills + 1);\n          }\n\n          let defaultAbilityMod = sbcInstance.actor.system.abilities[\"int\"].mod;\n\n          let skillRanks = +skillTotal - +defaultAbilityMod;\n          if (skillChanges[customSkillKey] !== null && skillChanges[customSkillKey] !== undefined) {\n            skillRanks -= skillChanges[customSkillKey];\n          }\n\n          await sbcInstance.actor.update({\n            [`system.skills.${customSkillKey}`]: {\n              ability: \"int\",\n              acp: false,\n              background: false,\n              cs: false,\n              custom: true,\n              name: skillName,\n              rank: skillRanks,\n              rt: false,\n            },\n          });\n\n          // Add Data to conversionValidation\n          this.app.processData.characterData.conversionValidation.skills[customSkillKey] = {\n            name: skillName,\n            total: +skillTotal,\n            context: skillContext.replace(/\\d+/g, (value) => +value - +skillTotal),\n          };\n\n          this.app.processData.notes.statistics.skills.push({\n            name: skillName,\n            prefixedValue: skillTotal >= 0 ? \"+\" + +skillTotal : skillTotal,\n            context: skillContext,\n          });\n\n          countOfCustomSkills++;\n        }\n\n        if (skillName.toLowerCase() === \"perception\") {\n          this.app.processData.notes.base.perception = skillTotal >= 0 ? \"+\" + +skillTotal : skillTotal;\n        }\n      } catch (err) {\n        this.throwError(undefined, \"parser.skill.failedToParse\", {\n          value: skill,\n        });\n        return false;\n      }\n    }\n\n    // If all skills were parsed correctly, return true\n    return true;\n  }\n\n  /**\n   * Check the item for any skill-based changes\n   *\n   * @param {import(\"../../../pf1/module/documents/item/item-pf.mjs\").ItemPF} item  The item to update the skill changes for\n   * @param {{string: number}} skillChanges   A dictionary of skill changes\n   * @returns {Promise<void>}                 A Promise that resolves when the skill changes have been updated\n   * @private\n   * @async\n   */\n  async updateSkillChanges(item, skillChanges) {\n    if (!item.system.changes) return;\n\n    await sbcUtils.runParallelOps(item.system.changes, async (change) => {\n      let skillKey = \"\";\n      if (/skill\\.(...)\\.subSkills/i.test(change.target)) {\n        // We are a subskill, and custom\n        skillKey = change.target.match(/skill\\....\\.subSkills\\.(.*)/i)[1];\n      } else if (/skill\\./i.test(change.target)) {\n        // We are a normal skill\n        skillKey = change.target.match(/skill\\.(.*)/i)[1];\n      }\n\n      if (skillKey !== \"\") {\n        const processedFormula = await Roll.fromTerms(Roll.parse(change.formula, item.getRollData())).evaluate();\n        const processedFormulaTotal = processedFormula?.total ?? +change.formula; // change.value;\n\n        skillChanges[skillKey] ||= { total: 0, skillFocus: false, racial: false };\n        //if (skillChanges[skillKey] !== null && skillChanges[skillKey] !== undefined) {\n        skillChanges[skillKey].total += processedFormulaTotal;\n        //} else skillChanges[skillKey].total = processedFormulaTotal;\n\n        if (item.name.match(/Skill Focus/i)) skillChanges[skillKey].skillFocus = true;\n        else skillChanges[skillKey].skillFocus = false;\n\n        skillChanges[skillKey].racial = skillChanges[skillKey].racial || change.type === \"racial\";\n        skillChanges[skillKey].name = pf1.config.skills[skillKey];\n      }\n    });\n  }\n\n  /**\n   * Calculate the skill ranks\n   *\n   * @param {object} skillInfo                    The skill information\n   * @param {string} skillInfo.name               The name of the skill\n   * @param {string} skillInfo.key                The key of the skill\n   * @param {number} [skillInfo.total]            The total skill value, which we need to achieve\n   * @param {number} [skillInfo.abilityMod]       The applicable ability modifier for this skill\n   * @param {boolean} [skillInfo.classSkill]      Whether this skill is a class skill\n   * @param {number} [skillInfo.sizeMod]          The applicable size modifier for this skill\n   * @param {object} [skillInfo.racialModifiers]  A list of racial modifiers this actor has\n   * @param {object} [skillInfo.changes]          A list of changes pertaining to the skill\n   * @param {boolean} [skillInfo.acp]             Does this skill used the Armor Check Penalty?\n   * @param {number} [skillInfo.acpTotal]         The total Armor Check Penalty\n   * @param {number} [skillInfo.maxRanks]         The maximum skill ranks the actor can possess\n   * @param {number} [skillInfo.speedBonus]       The speed bonus for this skill\n   * @param {boolean} [skillInfo.isOutsider]      Whether the actor is an outsider\n   * @param {Array<string>} [skillInfo.outsiderSkills]  An array of the original outsider skills\n   * @param {number} [skillInfo.outsiderSkillPicks] The remaining outsider class skills to pick\n   * @param {boolean} [skillInfo.isExpert]       Whether the actor is an expert\n   * @param {Array<string>} [skillInfo.expertSkills]  An array of the original expert skills\n   * @param {number} [skillInfo.expertSkillPicks] The remaining expert class skills to pick\n   * @returns {[number, boolean, string]}          The calculated skill ranks, whether it's a new class skill, and whether it's for outsider or expert\n   * @private\n   */\n  calculateSkillRanks({\n    name,\n    key,\n    total = 0,\n    abilityMod = 0,\n    classSkill = false,\n    sizeMod = 0,\n    racialModifiers = {},\n    changes = {},\n    acp = false,\n    acpTotal = 0,\n    maxRanks = 0,\n    speedBonus = 0,\n    isOutsider = false,\n    outsiderSkills = [],\n    outsiderSkillPicks = 4,\n    isExpert = false,\n    expertSkills = [],\n    expertSkillPicks = 10,\n  } = {}) {\n    if (Object.keys(this.versatilePerformanceSkillOverrides).includes(key)) {\n      // If the skill is overridden by versatile performance, we need to set the skill ranks to 0\n      return [0, false, \"\"];\n    }\n\n    let skillRanks = +total - +abilityMod - (classSkill ? pf1.config.classSkillBonus : 0) - +sizeMod - +speedBonus;\n    let isNewClassSkill = false;\n    let outsiderExpert = \"\";\n\n    // Factor ACP into the total, if it's applicable\n    if (acp && acpTotal) {\n      skillRanks += acpTotal;\n    }\n\n    if (key === \"fly\") {\n      skillRanks -= pf1.config.flyManeuverabilityValues[window.SBC.actor.system.attributes.speed.fly.maneuverability];\n    }\n\n    if (racialModifiers[name.toLowerCase()] && racialModifiers[name.toLowerCase()].context.length === 0) {\n      skillRanks -= racialModifiers[name.toLowerCase()].number;\n    }\n\n    if (changes[key] !== null && changes[key] !== undefined) {\n      skillRanks -= changes[key].total;\n    }\n\n    if (\n      (changes[key]?.skillFocus\n        ? skillRanks - maxRanks - 3 === 3 || skillRanks - maxRanks === 3\n        : skillRanks - maxRanks === 3 || skillRanks - maxRanks === 3 || skillRanks > maxRanks) &&\n      isOutsider &&\n      outsiderSkillPicks > 0 &&\n      !outsiderSkills.includes(key) &&\n      !classSkill\n    ) {\n      isNewClassSkill = true;\n      outsiderExpert = \"outsider\";\n\n      if (changes[key]?.skillFocus && skillRanks - maxRanks - 3 === 3) skillRanks -= 3;\n\n      skillRanks -= pf1.config.classSkillBonus;\n    } else if (\n      (changes[key]?.skillFocus\n        ? skillRanks - maxRanks - 3 === 3 || skillRanks - maxRanks === 3\n        : skillRanks - maxRanks === 3 || skillRanks > maxRanks) &&\n      isExpert &&\n      expertSkillPicks > 0 &&\n      !expertSkills.includes(key) &&\n      !classSkill\n    ) {\n      isNewClassSkill = true;\n      outsiderExpert = \"expert\";\n\n      if (changes[key]?.skillFocus && skillRanks - maxRanks - 3 === 3) skillRanks -= 3;\n\n      skillRanks -= pf1.config.classSkillBonus;\n    }\n\n    sbcUtils.log(\n      `Skill: ${name} | Total: ${total} | Ability: ${abilityMod} | Class: ${classSkill} | Size: ${sizeMod} | Racial: ${racialModifiers[name.toLowerCase()]?.number ?? 0} | Change: ${changes[key]?.total ?? 0} | Ranks: ${skillRanks}`\n    );\n\n    return [Math.clamp(skillRanks, 0, maxRanks), isNewClassSkill, outsiderExpert];\n  }\n}\n",
    "import { AbstractParser } from \"../abstract-parser.js\";\n\nexport default class AgeParser extends AbstractParser {\n  /**\n   * @inheritDoc\n   */\n  get parserGroup() {\n    return \"Parser/Base\";\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get parserType() {\n    return \"age\";\n  }\n\n  /**\n   * Parses a sense string\n   *\n   * @param {string} value        The value to parse\n   * @param {number} line         The line number\n   * @param {string} _type        The type of value\n   * @returns {Promise<boolean>}  Always true, unless an error occurs\n   */\n  async _parse(value, line, _type = undefined) {\n    let label;\n    let statValues = { phys: 0, ment: 0 };\n\n    switch (value) {\n      case \"Venerable\":\n        label = \"SBCPF1.parser.age.venerable\";\n        value = \"venerable\";\n        statValues.phys = -6;\n        statValues.ment = 3;\n\n        break;\n\n      case \"Old\":\n        label = \"SBCPF1.parser.age.old\";\n        value = \"old\";\n        statValues.phys = -3;\n        statValues.ment = 2;\n\n        break;\n\n      case \"Middle[- ]Aged?\":\n        label = \"SBCPF1.parser.age.middleAged\";\n        value = \"middleAge\";\n        statValues.phys = -1;\n        statValues.ment = 1;\n        break;\n\n      case \"Young\":\n        label = \"SBCPF1.parser.age.young\";\n        value = \"young\";\n        break;\n\n      default:\n        label = \"SBCPF1.parser.age.adult\";\n        value = \"adult\";\n    }\n\n    label = game.i18n.localize(label);\n\n    await window.SBC.actor.update({\n      \"system.details.age\": label,\n      \"system.traits.ageCategory\": value,\n    });\n\n    this.app.processData.notes.age = label;\n    return true;\n  }\n\n  /**\n   * Get the ability score modifier based on the age category\n   *\n   * @param {(\"str\"|\"con\"|\"dex\"|\"int\"|\"wis\"|\"cha\")} ability The ability score to get the modifier for\n   * @returns {number} The modifier for the ability score\n   */\n  getAbilityChange(ability) {\n    const isPhysical = [\"str\", \"dex\", \"con\"].includes(ability);\n    switch (window.SBC.actor.system.traits.ageCategory.base) {\n      case \"venerable\":\n        return isPhysical ? -6 : 3;\n      case \"old\":\n        return isPhysical ? -3 : 2;\n      case \"middleAge\":\n        return isPhysical ? -1 : 1;\n      case \"young\": {\n        switch (ability) {\n          case \"con\":\n          case \"str\":\n          case \"wis\":\n            return -2;\n          case \"dex\":\n            return 2;\n          default:\n            return 0;\n        }\n      }\n      default:\n        return 0;\n    }\n  }\n}\n",
    "import { EntityParser, NotesParser, SimpleParser, SplitEntityParser } from \"./Universal/index.js\";\nimport {\n  AuraParser,\n  ClassParser,\n  CreatureParser,\n  RaceParser,\n  SensesParser,\n  MythicRankParser,\n} from \"./BaseData/index.js\";\nimport {\n  ACParser,\n  DRParser,\n  HPParser,\n  ImmunityParser,\n  ResistanceParser,\n  SavesParser,\n  SRParser,\n  WeaknessParser,\n} from \"./Defense/index.js\";\nimport { EcologyParser, SpecialAbilityParser, TacticsParser } from \"./Misc/index.js\";\nimport { AttackParser, SpeedParser, SpellBooksParser } from \"./Offense/index.js\";\nimport { AbilityParser, GearParser, LanguageParser, SkillParser } from \"./Statistics/index.js\";\nimport AgeParser from \"./BaseData/age-parser.js\";\n\nexport class parserMapping {\n  /** @type {parserMap} */\n  static map = {};\n\n  /* ------------------------------------ */\n  /* Initialize Parser Mapping            */\n\n  /* ------------------------------------ */\n  /**\n   * Initialize the parser mapping\n   *\n   * @param {sbcTypes.InputDialog} app  The SBC application\n   * @returns {void}\n   */\n  static initMapping(app) {\n    parserMapping.map = {\n      types: {\n        npc: [\"base\", \"defense\", \"offense\", \"tactics\", \"statistics\", \"ecology\", \"special abilities\", \"description\"],\n        character: [\n          \"base\",\n          \"defense\",\n          \"offense\",\n          \"tactics\",\n          \"statistics\",\n          \"ecology\",\n          \"special abilities\",\n          \"description\",\n        ],\n        vehicle: [\"vehicleBase\", \"vehicleDefense\", \"vehicleOffense\", \"vehicleDescription\"],\n        trap: [\"trap\"],\n        haunt: [\"hauntBase\"],\n      },\n      trap: {\n        name: new SimpleParser(app, [\"name\", \"prototypeToken.name\"], \"string\"),\n        cr: new SimpleParser(app, [\"system.details.cr.base\", \"system.details.cr.total\"], \"number\"),\n        type: new SimpleParser(app, [\"system.details.type\"], \"string\"),\n        perception: new SimpleParser(app, [\"system.attributes.perception.total\"], \"number\"),\n        disableDevice: new SimpleParser(app, [\"system.attributes.disableDevice.total\"], \"number\"),\n        trigger: new NotesParser(app, [\"base.trigger\"]),\n        reset: new NotesParser(app, [\"base.reset\"]),\n        effect: new NotesParser(app, [\"base.effect\"]),\n        source: new NotesParser(app, [\"base.source\"]),\n        description: new NotesParser(app, [\"description.long\"], \"string\"),\n      },\n      haunt: {\n        name: new SimpleParser(app, [\"name\", \"prototypeToken.name\"], \"string\"),\n        cr: new SimpleParser(app, [\"system.details.cr.base\", \"system.details.cr.total\"], \"number\"),\n        alignment: new SimpleParser(app, [\"system.details.alignment\"], \"string\"),\n        source: new NotesParser(app, [\"base.source\"]),\n        description: new NotesParser(app, [\"description.long\"], \"string\"),\n      },\n      base: {\n        name: new SimpleParser(app, [\"name\", \"prototypeToken.name\"], \"string\"),\n        cr: new SimpleParser(app, [\"system.details.cr.base\", \"system.details.cr.total\"], \"number\"),\n        mr: new MythicRankParser(app),\n        level: new NotesParser(app, [\"system.details.level.value\"]), // gets calculated by foundry\n        xp: new NotesParser(app, [\"system.details.xp.value\"]), // gets calculated by foundry\n        gender: new SimpleParser(app, [\"system.details.gender\"], \"string\"),\n        age: new AgeParser(app),\n        race: new RaceParser(app),\n        classes: new ClassParser(app),\n        source: new NotesParser(app, [\"base.source\"]), // used in the notes section\n        alignment: new SimpleParser(app, [\"system.details.alignment\"], \"string\"),\n        size: new SimpleParser(app, [\"system.traits.size\"], \"string\"),\n        space: new SimpleParser(app, [\"prototypeToken.height\", \"prototypeToken.width\"], \"number\"),\n        scale: new SimpleParser(app, [\"prototypeToken.texture.scaleX\", \"prototypeToken.texture.scaleY\"], \"number\"),\n        creatureType: new CreatureParser(app),\n        init: new SimpleParser(app, [\"system.attributes.init.total\"], \"number\"),\n        senses: new SensesParser(app),\n        aura: new AuraParser(app),\n      },\n      defense: {\n        acNormal: new SimpleParser(app, [\"system.attributes.ac.normal.total\"], \"number\"),\n        acFlatFooted: new SimpleParser(app, [\"system.attributes.ac.flatFooted.total\"], \"number\"),\n        acTouch: new SimpleParser(app, [\"system.attributes.ac.touch.total\"], \"number\"),\n        acTypes: new ACParser(app),\n        hp: new HPParser(app),\n        regeneration: new SimpleParser(app, [\"system.traits.regen\"], \"string\"),\n        fastHealing: new SimpleParser(app, [\"system.traits.fastHealing\"], \"string\"),\n        saves: new SavesParser(app),\n        immune: new ImmunityParser(app),\n        resist: new ResistanceParser(app),\n        weakness: new WeaknessParser(app),\n        defensiveAbilities: new EntityParser(app),\n        dr: new DRParser(app),\n        sr: new SRParser(app),\n      },\n      offense: {\n        speed: new SpeedParser(app),\n        attacks: new AttackParser(app),\n        specialAttacks: new SplitEntityParser(app),\n        space: new SimpleParser(app, [\"prototypeToken.height\", \"prototypeToken.width\"], \"number\"),\n        stature: new SimpleParser(app, [\"system.traits.stature\"], \"string\"),\n        spellBooks: new SpellBooksParser(app),\n      },\n      tactics: new TacticsParser(app),\n      statistics: {\n        str: new AbilityParser(app, [\"system.abilities.str.value\"], [\"system.abilities.str.mod\"], \"number\"),\n        dex: new AbilityParser(app, [\"system.abilities.dex.value\"], [\"system.abilities.dex.mod\"], \"number\"),\n        con: new AbilityParser(app, [\"system.abilities.con.value\"], [\"system.abilities.con.mod\"], \"number\"),\n        int: new AbilityParser(app, [\"system.abilities.int.value\"], [\"system.abilities.int.mod\"], \"number\"),\n        wis: new AbilityParser(app, [\"system.abilities.wis.value\"], [\"system.abilities.wis.mod\"], \"number\"),\n        cha: new AbilityParser(app, [\"system.abilities.cha.value\"], [\"system.abilities.cha.mod\"], \"number\"),\n        bab: new SimpleParser(app, [\"system.attributes.bab.total\"], \"number\"),\n        cmb: new SimpleParser(app, [\"system.attributes.cmb.total\"], \"number\"),\n        cmd: new SimpleParser(app, [\"system.attributes.cmd.total\"], \"number\"),\n        feats: new EntityParser(app),\n        skills: new SkillParser(app),\n        languages: new LanguageParser(app),\n        sq: new SplitEntityParser(app),\n        gear: new GearParser(app),\n      },\n      ecology: new EcologyParser(app),\n      specialAbilities: new SpecialAbilityParser(app),\n      description: new NotesParser(app, [\"description.long\"], \"string\"),\n    };\n  }\n\n  /**\n   * Get the necessary parsing categories for a given actor type\n   *\n   * @param {string} actorType    The type of actor\n   * @returns {Array<string>}     The necessary parsing categories\n   */\n  static getNeededCategories(actorType) {\n    switch (actorType) {\n      case \"character\":\n      case \"npc\":\n        return [\"defense\", \"offense\", \"statistics\"];\n      case \"vehicle\":\n        return [\"vehicleDefense\", \"vehicleOffense\"];\n      case \"trap\":\n      case \"haunt\":\n        return [];\n    }\n  }\n}\n\n/**\n * @typedef BaseMapping\n * @property {SimpleParser} name            The name of the entity\n * @property {SimpleParser} cr              The challenge rating of the entity\n * @property {MythicRankParser} mr          The mythic rank of the entity\n * @property {NotesParser} level            The level of the entity\n * @property {NotesParser} xp               The experience points of the entity\n * @property {SimpleParser} gender          The gender of the entity\n * @property {AgeParser} age                The age of the entity\n * @property {RaceParser} race              The race of the entity\n * @property {ClassParser} classes          The classes of the entity\n * @property {NotesParser} source           The source of the entity\n * @property {SimpleParser} alignment       The alignment of the entity\n * @property {SimpleParser} size            The size of the entity\n * @property {SimpleParser} space           The space of the entity\n * @property {SimpleParser} scale           The scale of the entity\n * @property {CreatureParser} creatureType  The creature type of the entity\n * @property {SimpleParser} init            The initiative of the entity\n * @property {SensesParser} senses          The senses of the entity\n * @property {AuraParser} aura              The aura of the entity\n */\n\n/**\n * @typedef DefenseMapping\n * @property {SimpleParser} acNormal              The normal armor class of the entity\n * @property {SimpleParser} acFlatFooted          The flat-footed armor class of the entity\n * @property {SimpleParser} acTouch               The touch armor class of the entity\n * @property {ACParser} acTypes                   The armor class types of the entity\n * @property {HPParser} hp                        The hit points of the entity\n * @property {SimpleParser} regeneration          The regeneration of the entity\n * @property {SimpleParser} fastHealing           The fast healing of the entity\n * @property {SavesParser} saves                  The saves of the entity\n * @property {ImmunityParser} immune              The immunities of the entity\n * @property {ResistanceParser} resist            The resistances of the entity\n * @property {WeaknessParser} weakness            The weaknesses of the entity\n * @property {EntityParser} defensiveAbilities    The defensive abilities of the entity\n * @property {DRParser} dr                        The damage reduction of the entity\n * @property {SRParser} sr                        The spell resistance of the entity\n */\n\n/**\n * @typedef OffenseMapping\n * @property {SpeedParser} speed            The speed of the entity\n * @property {AttackParser} attacks         The attacks of the entity\n * @property {SplitEntityParser} specialAttacks  The special attacks of the entity\n * @property {SpellBooksParser} spellBooks  The spell books of the entity\n * @property {TacticsParser} tactics        The tactics of the entity\n */\n\n/**\n * @typedef StatisticsMapping\n * @property {AbilityParser} str          The strength of the entity\n * @property {AbilityParser} dex          The dexterity of the entity\n * @property {AbilityParser} con          The constitution of the entity\n * @property {AbilityParser} int          The intelligence of the entity\n * @property {AbilityParser} wis          The wisdom of the entity\n * @property {AbilityParser} cha          The charisma of the entity\n * @property {SimpleParser} bab           The base attack bonus of the entity\n * @property {SimpleParser} cmb           The combat maneuver bonus of the entity\n * @property {SimpleParser} cmd           The combat maneuver defense of the entity\n * @property {EntityParser} feats         The feats of the entity\n * @property {SkillParser} skills         The skills of the entity\n * @property {LanguageParser} languages   The languages of the entity\n * @property {SplitEntityParser} sq            The special qualities of the entity\n * @property {GearParser} gear            The gear of the entity\n */\n\n/**\n * @typedef parserMap\n * @property {object} types                           Mapping for the different types of entities\n * @property {Array<string>} types.npc                Mapping for NPCs\n * @property {Array<string>} types.pc                 Mapping for PCs\n * @property {Array<string>} types.vehicle            Mapping for Vehicles\n * @property {Array<string>} types.trap               Mapping for Traps\n * @property {Array<string>} types.haunt              Mapping for Haunts\n * @property {BaseMapping} base                       Mapping for the base data\n * @property {DefenseMapping} defense                 Mapping for the defense data\n * @property {OffenseMapping} offense                 Mapping for the offense data\n * @property {StatisticsMapping} statistics           Mapping for the statistics data\n * @property {EcologyParser} ecology                  Mapping for the ecology data\n * @property {SpecialAbilityParser} specialAbilities  Mapping for the special abilities data\n * @property {NotesParser} description                Mapping for the description data\n */\n",
    "import { sbcError } from \"./sbcError.js\";\nimport { sbcUtils } from \"./sbcUtils.js\";\nimport { parserMapping } from \"./Parsers/parser-mapping.js\";\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\n/* ------------------------------------ */\n/* Conversion Validation                */\n/* ------------------------------------ */\nexport class sbcValidation {\n  /**\n   * Build changes for the current process data\n   *\n   * @param {sbcTypes.ProcessData} processData  The current process data\n   * @param {string} itemID                     The item ID to build changes for\n   * @returns {Promise<void>}                   A Promise that resolves once the changes have been built\n   */\n  static async buildChanges(processData, itemID = null) {\n    let actor = window.SBC.actor;\n    /** @type {Item} */\n    let item = null;\n    /** @type {Array<Item>} */\n    let items = [];\n    if (itemID !== null) {\n      item = actor.items.get(itemID);\n      items = [item];\n    }\n    if (item === null) items = actor.items;\n    const rollData = actor.getRollData();\n    let changes = {};\n\n    items.forEach((currentItem) => {\n      let itemChanges = currentItem.changes;\n\n      // Check, if the currentItem has changes to be considered\n      // eslint-disable-next-line no-undef\n      if (!foundry.utils.isEmpty(itemChanges)) {\n        itemChanges.map(async (element) => {\n          const target = element.target;\n          const formula = element.formula;\n          const type = element.type;\n\n          if (changes[target] == null) changes[target] = {};\n          let processedFormula = await Roll.fromTerms(Roll.parse(formula, rollData)).evaluate();\n\n          processedFormula = processedFormula?.total ?? +formula;\n\n          if (changes[target][type] == null) {\n            changes[target][type] = processedFormula;\n          } else {\n            changes[target][type] += processedFormula;\n          }\n        });\n      }\n    });\n\n    processData.changes = changes;\n  }\n\n  /**\n   * Get the total value of a specific target and type from the changes\n   *\n   * @param {sbcTypes.ProcessData} processData  The current process data\n   * @param {string} target                     The target to get the value from\n   * @param {string} type                       The type to get the value from\n   * @returns {Promise<number>}                 The total value of the target and type\n   */\n  static async getValueFromChanges(processData, target = null, type = null) {\n    let total = 0;\n    if (target == null && type == null) return total;\n    else if (target !== \"all\") {\n      if (processData.changes[target] == null) return 0;\n\n      for (const key in Object.keys(processData.changes[target])) {\n        if ((type && key === type) || type == null) total += processData.changes[target][key];\n      }\n\n      return total;\n    } else {\n      Object.keys(processData.changes).map((subtarget) => {\n        sbcUtils.log(`Checking subtarget ${subtarget}:`);\n        Object.keys(processData.changes[subtarget]).map((k) => {\n          sbcUtils.log(`type k is ${k} = ${processData.changes[subtarget][k]}`);\n          if ((type && k === type) || type == null) total += +processData.changes[subtarget][k];\n        });\n      });\n      return total;\n    }\n  }\n\n  /**\n   * Validate the conversion and create a conversion buff.\n   *\n   * This function will create a conversion buff with all the changes that need to be made to the actor.\n   * It will also add context notes to the buff.\n   *\n   * The conversion buff will be created in two stages:\n   * 1. Ability Scores\n   * 2. All other attributes\n   *\n   * The reason for this is that ability scores can have cascading effects on other attributes\n   * and we want to avoid that cascading effects interfere with other corrections.\n   * The conversion buff will be created as a perm buff and will be hidden from the token.\n   *\n   * @param {sbcTypes.ProcessData} processData  The current process data\n   * @returns {Promise<void>}\n   */\n  static async conversionValidation(processData) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    if (!sbcInstance.settings.getSetting(\"createBuff\")) return;\n    sbcInstance.settings.getSetting(\"debug\").debug && console.groupCollapsed(\"sbc-pf1 | Conversion Validation\");\n    console.log(processData);\n    const actor = sbcInstance.actor;\n    const conversionValidation = processData.characterData.conversionValidation;\n\n    try {\n      await this.buildChanges(processData);\n\n      const stage1changes = [],\n        stage2changes = [];\n      let contextNotes = [];\n\n      let valueInAcTypes = 0;\n\n      // Validate the spellBooks\n      let spellBooksToValidate = Object.keys(conversionValidation.spellBooks);\n      const bookUpdates = {};\n      for (let i = 0; i < spellBooksToValidate.length; i++) {\n        let spellBookToValidate = spellBooksToValidate[i];\n        let casterLevelToValidate = conversionValidation.spellBooks[spellBookToValidate].casterLevel;\n        let concentrationBonusToValidate = conversionValidation.spellBooks[spellBookToValidate].concentrationBonus;\n        let casterLevelInActor = actor.system.attributes.spells.spellbooks[spellBookToValidate].cl.total;\n\n        console.log(spellBookToValidate, casterLevelToValidate, casterLevelInActor);\n        // let spellCastingAbility = actor.system.attributes.spells.spellbooks[spellBookToValidate].ability\n        // let spellCastingAbilityModifier = actor.system.abilities[spellCastingAbility].mod\n\n        const concentrationBonusOnActor =\n          actor.system.attributes.spells.spellbooks[spellBookToValidate].concentration.total;\n\n        let differenceInCasterLevel = +casterLevelToValidate - +casterLevelInActor;\n        let differenceInConcentrationBonus =\n          +concentrationBonusToValidate - concentrationBonusOnActor - differenceInCasterLevel;\n\n        processData.miscNotes.spellbookNotes[i] = { key: spellBookToValidate };\n        if (differenceInCasterLevel !== 0) {\n          processData.miscNotes.spellbookNotes[i].casterLevel =\n            `sbc | Total in statblock was CL ${casterLevelToValidate}, adjust as needed.`;\n          bookUpdates[`data.attributes.spells.spellbooks.${spellBookToValidate}`] = {\n            cl: {\n              formula: differenceInCasterLevel.toString(),\n            },\n            //clNotes: \"sbc | Total in statblock was CL \" + casterLevelToValidate + \", adjust as needed.\",\n          };\n        }\n        if (differenceInConcentrationBonus !== 0) {\n          processData.miscNotes.spellbookNotes[i].concentrationBonus =\n            `sbc | Total in statblock was +${concentrationBonusToValidate}, adjust as needed.`;\n          bookUpdates[`data.attributes.spells.spellbooks.${spellBookToValidate}.concentrationFormula`] =\n            differenceInConcentrationBonus.toString();\n          // bookUpdates[`data.attributes.spells.spellbooks.${spellBookToValidate}.concentrationNotes`] =\n          //   \"sbc | Total in statblock was +\" + concentrationBonusToValidate + \", adjust as needed.\";\n        }\n      }\n\n      // eslint-disable-next-line no-undef\n      if (!foundry.utils.isEmpty(bookUpdates)) {\n        await actor.update(bookUpdates);\n        await updateMiscNotesItem(actor, processData.miscNotes.spellbookNotes);\n      }\n\n      // Validate ability scores first as they can have cascading effects\n      const abilityScoreKeys = [\"str\", \"dex\", \"con\", \"int\", \"wis\", \"cha\"];\n      for (let abl of abilityScoreKeys) {\n        const totalInActor = actor.system.abilities[abl].total;\n        let totalInStatblock = conversionValidation.attributes[abl.capitalize()] ?? totalInActor;\n        const difference = +totalInStatblock - +totalInActor;\n        if (difference === 0) continue;\n\n        console.log(totalInStatblock, totalInActor);\n        let attributeChange = Object.assign({}, new pf1.components.ItemChange().toObject(undefined, false), {\n          formula: difference.toString(),\n          type: \"untypedPerm\",\n          target: abl,\n          value: +difference,\n        });\n\n        stage1changes.push(attributeChange);\n\n        delete conversionValidation.attributes[abl.capitalize()];\n      }\n\n      // Stage 1 conversion buff to allow ability score cascading effects to not interfere with other corrections\n      // This might be better off as direct modification to the actor, however.\n      if (stage1changes.length) {\n        let conversionBuffItem1 = {\n          name: \"sbc | Conversion Buff (Ability Scores)\",\n          type: \"buff\",\n          system: {\n            description: {\n              value: `<h2>sbc | Conversion Buff (Ability Scores)</h2>\n                            This Buff was created by <strong>sbc</strong> to compensate for differences between the statblock input and FoundryVTTs automatically calculated values.\n                            <br><br>\n                            As differences in ability scores can have cascading effects, these get handled first and in a separate conversion buff.`,\n            },\n            active: true,\n            subType: \"perm\",\n            changes: stage1changes,\n            hideFromToken: true,\n            level: 0,\n            tag: \"sbcConversionBuff1\",\n            useCustomTag: true,\n          },\n          img: \"systems/pf1/icons/skills/yellow_36.jpg\",\n        };\n\n        await actor.createEmbeddedDocuments(\"Item\", [conversionBuffItem1]);\n      }\n\n      // Get an array of all attributes that need to be validated\n      let attributesToValidate = Object.keys(conversionValidation.attributes);\n      // And push \"acNormal\", \"acTouch\" and \"acFlatFooted\" to the end of that array so it gets validated after the acTypes\n      attributesToValidate.splice(attributesToValidate.indexOf(\"acNormal\"), 1);\n      attributesToValidate.splice(attributesToValidate.indexOf(\"acTouch\"), 1);\n      attributesToValidate.splice(attributesToValidate.indexOf(\"acFlatFooted\"), 1);\n      attributesToValidate.push(\"acNormal\", \"acTouch\", \"acFlatFooted\");\n\n      // Before we validate our attributes, let's sanity check our saving throws if we're an Outsider...\n      if (processData.characterData.isOutsider) {\n        const outsiderClass = actor.itemTypes.class.find((o) => o.id === processData.characterData.outsiderId);\n\n        if (outsiderClass) {\n          const saveDifferences = {\n            fort: 0,\n            ref: 0,\n            will: 0,\n          };\n\n          const saveProgression = {\n            fort: outsiderClass.system.savingThrows.fort.value,\n            ref: outsiderClass.system.savingThrows.ref.value,\n            will: outsiderClass.system.savingThrows.will.value,\n            changed: false,\n          };\n\n          for (const saveType of [\"fort\", \"ref\", \"will\"]) {\n            let saveInStatblock = conversionValidation.attributes[saveType];\n            let saveInActor = actor.system.attributes.savingThrows[saveType].total ?? 0;\n            saveDifferences[saveType] = +saveInStatblock - +saveInActor;\n          }\n\n          // If any pair of saving throws are equal, but opposite, we can assume the Outsider has switched\n          // their good and poor saves around.\n          if (\n            saveDifferences.fort !== 0 &&\n            saveDifferences.ref !== 0 &&\n            saveDifferences.fort + saveDifferences.ref === 0\n          ) {\n            saveProgression.fort = outsiderClass.system.savingThrows.ref.value;\n            saveProgression.ref = outsiderClass.system.savingThrows.fort.value;\n            saveProgression.changed = true;\n          } else if (\n            saveDifferences.fort !== 0 &&\n            saveDifferences.will !== 0 &&\n            saveDifferences.fort + saveDifferences.will === 0\n          ) {\n            saveProgression.fort = outsiderClass.system.savingThrows.will.value;\n            saveProgression.will = outsiderClass.system.savingThrows.fort.value;\n            saveProgression.changed = true;\n          } else if (\n            saveDifferences.ref !== 0 &&\n            saveDifferences.will !== 0 &&\n            saveDifferences.ref + saveDifferences.will === 0\n          ) {\n            saveProgression.ref = outsiderClass.system.savingThrows.will.value;\n            saveProgression.will = outsiderClass.system.savingThrows.ref.value;\n            saveProgression.changed = true;\n          }\n\n          // If we changed the save progression, we need to update the class item and the actor\n          if (saveProgression.changed) {\n            await outsiderClass.update({\n              \"system.savingThrows.fort.value\": saveProgression.fort,\n              \"system.savingThrows.ref.value\": saveProgression.ref,\n              \"system.savingThrows.will.value\": saveProgression.will,\n            });\n          }\n        }\n      }\n\n      // Loop through the attributes ...\n      for (let i = 0; i < attributesToValidate.length; i++) {\n        let attribute = attributesToValidate[i];\n        let type = \"\";\n        let target = \"\";\n        let totalInStatblock = conversionValidation.attributes[attribute];\n        let totalInActor = 0;\n        let valueInItems = 0;\n        let difference = 0;\n\n        // Skip if it's not a number (such as CMB being a dash)\n        if (isNaN(totalInStatblock)) continue;\n\n        // Generate Changes for the conversionBuff\n        switch (attribute.toLowerCase()) {\n          case \"cmd\":\n          case \"cmb\":\n          case \"init\":\n            totalInActor = actor.system.attributes[attribute].total;\n            type = \"untypedPerm\";\n            target = attribute;\n            sbcUtils.log(\n              `Attribute: ${attribute} | Total in Actor: ${totalInActor} | Total in Statblock: ${totalInStatblock}`\n            );\n            if (totalInActor !== totalInStatblock) {\n              difference = +totalInStatblock - +totalInActor;\n            }\n            break;\n          case \"hpbonus\":\n            type = \"untypedPerm\";\n            target = \"mhp\";\n            difference = +totalInStatblock;\n            break;\n          case \"hptotal\":\n            totalInActor = actor.system.attributes.hp.max;\n            type = \"untypedPerm\";\n            target = \"mhp\";\n            difference = +totalInStatblock - +totalInActor;\n            break;\n          case \"acnormal\":\n            totalInActor = actor.system.attributes.ac.normal.total;\n            type = \"untypedPerm\";\n            target = \"aac\";\n            difference = +totalInStatblock - +totalInActor - +valueInAcTypes;\n            break;\n          case \"base\":\n          case \"enhancement\":\n          case \"dodge\":\n          case \"inherent\":\n          case \"deflection\":\n          case \"morale\":\n          case \"luck\":\n          case \"sacred\":\n          case \"insight\":\n          case \"resistance\":\n          case \"profane\":\n          case \"trait\":\n          case \"racial\":\n          case \"competence\":\n          case \"circumstance\":\n          case \"alchemical\":\n          case \"penalty\":\n            valueInItems = await this.getValueFromChanges(processData, \"all\", attribute.toLowerCase());\n\n            type = attribute;\n            target = \"aac\";\n            difference = +totalInStatblock - +valueInItems;\n            valueInAcTypes += +difference;\n            break;\n          case \"rage\":\n            type = \"untypedPerm\";\n            target = \"ac\";\n            difference = +totalInStatblock;\n            break;\n          case \"fort\":\n          case \"ref\":\n          case \"will\":\n            type = \"untypedPerm\";\n            target = attribute;\n            totalInActor = actor.system.attributes.savingThrows[attribute].total ?? 0;\n            difference = +totalInStatblock - +totalInActor;\n            break;\n          default:\n            break;\n        }\n\n        // If the total in the statblock differs from the total in foundry, add a change to the conversion buff\n        if (difference !== 0) {\n          let attributeChange = Object.assign({}, new pf1.components.ItemChange().toObject(undefined, false), {\n            formula: difference.toString(),\n            type: type,\n            target: target,\n            value: +difference,\n          });\n\n          stage2changes.push(attributeChange);\n        }\n      }\n\n      // Add context notes to the buff\n      let contextNotesToAdd = Object.keys(conversionValidation.context);\n\n      for (let i = 0; i < contextNotesToAdd.length; i++) {\n        let contextNoteType = contextNotesToAdd[i];\n        let contextNoteToAdd = conversionValidation.context[contextNoteType];\n\n        if (contextNoteToAdd !== \"\") {\n          let contextNote = {\n            subTarget: contextNoteType,\n            target: \"misc\",\n            text: contextNoteToAdd,\n          };\n          contextNotes.push(contextNote);\n        }\n      }\n\n      // Handle Skill Information in the conversionValidation\n      // (1) Create skillContext Objects to add to the Buff\n      // (2) Adjust for differences between calculated skillTotals and statblockTotals\n      let skillKeys = Object.keys(conversionValidation.skills);\n\n      for (let i = 0; i < skillKeys.length; i++) {\n        let skillKey = skillKeys[i];\n        if (Object.keys(parserMapping.map.statistics.skills.versatilePerformanceSkillOverrides).includes(skillKey)) {\n          continue;\n        }\n        let parentSkillKey = skillKey.replace(/(\\d+)/, \"\");\n        let skillToValidate = conversionValidation.skills[skillKey];\n        let skillModInActor = 0;\n\n        let skillSubKeys = Object.keys(actor.system.skills[parentSkillKey]);\n\n        // For Skills with subskill --> target: \"skill.prf.subSkills.prf1\"\n        let target = \"\";\n\n        if (!skillSubKeys.includes(\"subSkills\")) {\n          const skInfo = actor.getSkillInfo(skillKey);\n          skillModInActor = skInfo.mod ?? 0;\n          target = `skill.${skillKey}`;\n        } else {\n          const subSkillInfo = actor.getSkillInfo(`${parentSkillKey}.${skillKey}`);\n          skillModInActor = subSkillInfo.mod ?? 0;\n          target = `skill.${parentSkillKey}.${skillKey}`;\n        }\n\n        // (1) Create skillContext Objects to add to the Buff\n        if (skillToValidate.context !== \"\") {\n          let contextNote = skillToValidate.context;\n          let skillContext = {\n            target: target,\n            text: contextNote,\n          };\n          contextNotes.push(skillContext);\n        }\n\n        // (2) Adjust for differences between calculated skillTotals and statblockTotals\n        if (+skillToValidate.total !== +skillModInActor) {\n          let difference = +skillToValidate.total - +skillModInActor;\n\n          if (difference !== 0) {\n            let skillChange = await new pf1.components.ItemChange({\n              formula: difference.toString(),\n              type: \"untypedPerm\",\n              target: target,\n              value: +difference,\n            });\n\n            stage2changes.push(skillChange.toObject());\n          }\n        }\n      }\n\n      let conversionBuffItem2 = {\n        name: \"sbc | Conversion Buff\",\n        type: \"buff\",\n        system: {\n          description: {\n            value: `<h2>sbc | Conversion Buff</h2>\n                        This Buff was created by <strong>sbc</strong> to compensate for differences between the input and the values FoundryVTT calculates automatically.\n                        <br><br>\n                        Especially when the pathfinder system gets upgraded, entries in compendiums get updated or foundry changes in some way, this buff may become outdated.\n                        <br><br>\n                        For most mooks the conversion should more or less work, but for important NPCs or creatures it is adviced to double check the conversion manually.`,\n          },\n          active: true,\n          subType: \"perm\",\n          changes: stage2changes,\n          contextNotes: contextNotes,\n          hideFromToken: true,\n          level: 0,\n          tag: \"sbcConversionBuff2\",\n          useCustomTag: true,\n        },\n        img: \"systems/pf1/icons/skills/yellow_36.jpg\",\n      };\n\n      // Only create the conversion buff if there are changes to be made\n      if (stage2changes.length > 0 || contextNotes.length > 0) {\n        await actor.createEmbeddedDocuments(\"Item\", [conversionBuffItem2]);\n      }\n\n      Hooks.callAll(\"sbc.validated\", actor);\n    } catch (err) {\n      sbcInstance.settings.getSetting(\"debug\").debug && console.error(err);\n      let errorMessage = \"Failed to validate the conversion and create a conversion buff\";\n      let error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Validation\", errorMessage);\n      processData.errors.push(error);\n      console.error(err);\n      throw err;\n    }\n    sbcInstance.settings.getSetting(\"debug\").debug && console.groupEnd();\n  }\n}\n\n/**\n * Update the Misc Notes Item with the new spellbook data notes\n *\n * @param {import (\"../pf1/module/documents/actor/actor-base.mjs\").ActorBasePF} actor The actor to update the misc notes item for\n * @param {sbcTypes.SpellbookNotesData[]} miscNotes The misc notes to update the misc notes item with\n * @returns {Promise<void>}\n */\nasync function updateMiscNotesItem(actor, miscNotes) {\n  let contextNotes = [];\n  let descData = \"\";\n\n  for (let note of miscNotes) {\n    const spellbook = actor.system.attributes.spells.spellbooks[note.key];\n    if (note.casterLevel || note.concentration) {\n      descData += `<p><strong>${spellbook.name || spellbook.label}</strong>:</p>`;\n\n      if (note.casterLevel) {\n        contextNotes.push({\n          target: `cl.book.${note.key}`,\n          text: note.casterLevel,\n        });\n\n        descData += `<p>Caster Level: ${note.casterLevel}</p>`;\n      }\n\n      if (note.concentration) {\n        contextNotes.push({\n          target: `concn.${note.key}`,\n          text: note.concentration,\n        });\n\n        descData += `<p>Concentration Bonus: ${note.concentration}</p>`;\n      }\n    }\n  }\n\n  let miscNotesItem = actor.itemTypes.feat.find((item) => item.name === \"Miscellaneous Notes\");\n  if (miscNotesItem) {\n    descData = miscNotesItem.system.description.value + descData;\n    await miscNotesItem.update({\n      \"system.contextNotes\": miscNotesItem.system.contextNotes.concat(contextNotes),\n      \"system.description.value\": descData,\n    });\n  } else {\n    descData = `<p>This feature was created by <strong>SBC</strong> to collect any notes that don't have a source on the actor,\n                such as saving throw details or a bonus to CMD from extra legs. It may also be used to record a natural armor bonus,\n                spell resistance bonus, or spellcasting notes.</p>${descData}`;\n    await actor.createEmbeddedDocuments(\"Item\", [\n      {\n        name: \"Miscellaneous Notes\",\n        type: \"feat\",\n        system: {\n          contextNotes: contextNotes,\n          description: { value: descData },\n          subType: \"misc\",\n          tag: \"miscellaneousNotes\",\n        },\n        img: \"systems/pf1/icons/skills/yellow_36.jpg\",\n      },\n    ]);\n  }\n}\n",
    "import { parserMapping } from \"../Parsers/parser-mapping.js\";\nimport { OtherRaces } from \"../Content/index.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { sbcUtils } from \"../sbcUtils.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\nimport { alignmentRegex, classesRegex, creatureTypeAndSizeRegex, genderRegex, sizeRegex } from \"../sbcRegex.js\";\n\n/* ------------------------------------ */\n/* Regexes for base data                 */\n/* ------------------------------------ */\nlet aura = { content: \"\", line: 0 };\n\n/* ------------------------------------ */\n/* Parser for base data                 */\n/* ------------------------------------ */\n/**\n * Parses the base data of the statblock. This is everything up to the first category.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {Array.<string>} data               Array of separated data.\n * @param {number} startLine                  Index from where base part starts.\n * @returns {Promise.<boolean>}               `false` if any error is caught.\n */\nexport async function parseBase(processData, data, startLine) {\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" + processData.parsedCategories + \"/\" + processData.foundCategories + \" >> PARSING BASE DATA\"\n    );\n\n  let parsedSubCategories = [];\n  processData.notes[\"base\"] = {};\n\n  aura = { content: \"\", line: 0 };\n\n  let mythicRankLine = null;\n  let mythicRankLineContent = null;\n\n  // Loop through the lines\n  for (let line = 0; line < data.length; line++) {\n    try {\n      let lineContent = data[line].trim();\n\n      // Skip empty lines\n      if (lineContent === \"\") continue;\n\n      // Check for the name\n      if (!parsedSubCategories[\"name\"]) {\n        [parsedSubCategories[\"name\"], lineContent] = await parseName(lineContent, line);\n        if (lineContent === \"\") continue;\n      }\n\n      // Parse Challenge Rating\n      if (!parsedSubCategories[\"cr\"] && lineContent.match(/\\bCR\\b/i) !== null) {\n        [parsedSubCategories[\"cr\"], lineContent] = await parseCR(processData, lineContent, line);\n        if (lineContent === \"\") continue;\n      }\n\n      // Parse Mythic Rank (uses NotesParser, as mr currently is not supported by FVTT PF1)\n      if (!parsedSubCategories[\"mr\"]) {\n        if (lineContent.match(/\\bMR\\b/i) !== null) {\n          mythicRankLine = line;\n          mythicRankLineContent = lineContent;\n        }\n\n        if (parsedSubCategories[\"classes\"] && mythicRankLineContent) {\n          [parsedSubCategories[\"mr\"], mythicRankLineContent] = await parseMR(\n            processData,\n            mythicRankLineContent,\n            mythicRankLine\n          );\n        }\n      }\n\n      if (line !== 0) {\n        // Parse Source (uses NotesParser, the source has no separate field in FVTT PF1)\n        if (!parsedSubCategories[\"source\"] && lineContent.toLowerCase().startsWith(\"source\")) {\n          [parsedSubCategories[\"source\"], lineContent] = await parseSource(lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse XP\n        if (!parsedSubCategories[\"xp\"] && lineContent.toLowerCase().startsWith(\"xp\")) {\n          [parsedSubCategories[\"xp\"], lineContent] = await parseXP(processData, lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse Gender\n        if (!parsedSubCategories[\"gender\"] && genderRegex().test(lineContent)) {\n          [parsedSubCategories[\"gender\"], lineContent] = await parseGender(lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse Race\n        if (!parsedSubCategories[\"race\"]) {\n          [parsedSubCategories[\"race\"], lineContent] = await parseRace(lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse Classes\n        if (!parsedSubCategories[\"classes\"]) {\n          // Check for classes only in lines that do not start with an alignment\n          // So as not to match the class \"MEDIUM\" when it's a Medium Humanoid for example\n          const isAlignmentLine = lineContent.match(alignmentRegex());\n\n          // Check for classes only in lines that do not start with \"Source\"\n          // So as not to match the class \"Witch\" when it's included in \"Source Pathfinder #72: The Witch Queen's Revenge pg. 86\"\n          const isSourceLine = lineContent.toLowerCase().startsWith(\"source\");\n\n          // let isAgeLine = lineContent.match(/(Old|Middle Age|Middle-aged|Venerable)/i);\n          // if (isAgeLine && !parsedSubCategories[\"age\"]) {\n          //     let age = isAgeLine[1];\n          //     let parserAge = parserMapping.map.base.age\n          //     parsedSubCategories[\"age\"] = await parserAge.parse(age, line);\n\n          //     if (parsedSubCategories[\"age\"] === true) lineContent = sbcUtils.cleanLine(age, lineContent);\n          // }\n          if (\n            !parsedSubCategories[\"age\"] &&\n            sbcUtils.haystackRegexSearch([\"Middle[- ]Aged?\", \"Old\", \"Venerable\"], lineContent)\n          ) {\n            [parsedSubCategories[\"age\"], lineContent] = await parseAge(lineContent, line);\n            if (lineContent === \"\") continue;\n          }\n\n          if (!isAlignmentLine && !isSourceLine) {\n            parsedSubCategories[\"classes\"] = await parseClasses(lineContent, line);\n            if (lineContent === \"\") continue;\n          }\n        }\n\n        // Parse Alignment\n        if (!parsedSubCategories[\"alignment\"] && alignmentRegex().test(lineContent)) {\n          [parsedSubCategories[\"alignment\"], lineContent] = await parseAlignment(processData, lineContent, line);\n          if (lineContent === \"\") continue;\n\n          if (parsedSubCategories[\"alignment\"] === true) {\n            parsedSubCategories[\"classes\"] = true;\n          }\n        }\n\n        // Parse Size and Space / Token Size\n        if (!parsedSubCategories[\"size\"] && sizeRegex().test(lineContent)) {\n          parsedSubCategories[\"size\"] = await parseSizeAndSpace(processData, lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse Creature Type and Subtype, but only when they are found after a size declaration\n        if (\n          !parsedSubCategories[\"creatureType\"] &&\n          creatureTypeAndSizeRegex().test(lineContent) &&\n          sizeRegex().test(lineContent)\n        ) {\n          [parsedSubCategories[\"creatureType\"], lineContent] = await parseCreatureType(lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse Initiative\n        if (!parsedSubCategories[\"init\"] && lineContent.toLowerCase().match(/^init\\b/i)) {\n          [parsedSubCategories[\"init\"], lineContent] = await parseInit(processData, lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse Senses\n        if (!parsedSubCategories[\"senses\"] && lineContent.match(/\\bSenses\\b/i) !== null) {\n          [parsedSubCategories[\"senses\"], lineContent] = await parseSenses(lineContent, line);\n          if (lineContent === \"\") continue;\n        }\n\n        // Parse Aura\n        if (!parsedSubCategories[\"aura\"] && lineContent.match(/\\bAura\\b/i) !== null) {\n          aura = { content: lineContent, line: line };\n          parsedSubCategories[\"aura\"] = true;\n          // [parsedSubCategories[\"aura\"], lineContent] = await parseAura(lineContent, line);\n          // if (lineContent === \"\") continue;\n        }\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n      const errorMessage = \"Parsing the base data failed at the highlighted line\";\n      const error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse/Base\", errorMessage, startLine + line + 1);\n      processData.errors.push(error);\n      processData.input.prepared.success = false;\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      return false;\n    }\n  }\n\n  // Parse errors and warnings\n  if (!parsedSubCategories[\"cr\"] && window.SBC.actorType === 0) {\n    const error = new sbcError(\n      sbcError.ERRORLEVELS.WARNING,\n      \"Parse/Base\",\n      \"No CR for this NPC detected, please check the highlighted line\",\n      0\n    );\n    processData.errors.push(error);\n  }\n\n  if (!parsedSubCategories[\"creatureType\"]) {\n    const error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse/Base\", \"No creature type found!\");\n    processData.errors.push(error);\n  }\n\n  sbcUtils.log(\"RESULT OF PARSING BASE DATA (TRUE = PARSED SUCCESSFULLY)\");\n  sbcUtils.log(parsedSubCategories);\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n\n/**\n * Parses the name of the statblock.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number.\n * @returns {Promise.<[boolean, string]>}  Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseName(lineContent, line) {\n  const parserName = parserMapping.map.base.name;\n  const name = lineContent\n    .replace(/\\bCR\\b.*$/i, \"\")\n    .replace(/\\($/, \"\")\n    .trim();\n  const result = await parserName.parse(name.trim().capitalize(), line);\n\n  if (result) {\n    lineContent = sbcUtils.cleanLine(name, lineContent);\n  }\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Challenge Rating of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseCR(processData, lineContent, line) {\n  const parserCR = parserMapping.map.base.cr;\n  let crMatch = lineContent.match(/\\bCR\\b\\s(-|\\d*\\.\\d+|\\d+(?:\\/\\d+)?)/i);\n  let cr = crMatch[1];\n\n  if (cr.includes(\"/\")) processData.notes.base.cr = cr;\n  else {\n    for (const [frac, dec] in Object.entries(window.SBC.config.const.crFractions)) {\n      if (+cr === dec) {\n        processData.notes.base.cr = frac;\n        break;\n      }\n    }\n  }\n  const result = await parserCR.parse(parseFloat(window.SBC.config.const.crFractions[cr] || cr), line);\n  if (result) {\n    lineContent = sbcUtils.cleanLine(crMatch[0], lineContent);\n  }\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Mythic Rank of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseMR(processData, lineContent, line) {\n  const parserMR = parserMapping.map.base.mr;\n  const mrMatch = lineContent.match(/\\bMR\\b\\s(\\d+)/i);\n  const mr = mrMatch[1];\n\n  processData.notes.base.mr = mr;\n  const result = await parserMR.parse(mr, line);\n\n  if (result) {\n    lineContent = sbcUtils.cleanLine(mr, lineContent);\n  }\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Source of the statblock.\n *\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseSource(lineContent, line) {\n  const parserSource = parserMapping.map.base.source;\n  const source = lineContent.match(/^Source\\s+(.*)/)[1].trim();\n  const result = await parserSource.parse(source, line);\n\n  if (result) lineContent = sbcUtils.cleanLine(source, lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the XP of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseXP(processData, lineContent, line) {\n  const parserXP = parserMapping.map.base.xp;\n  const xp =\n    lineContent\n      .match(/^XP\\s+([\\d,.]*)/)?.[1]\n      .replace(/\\.,/g, \"\")\n      .trim() ?? \"0\";\n  processData.notes.base.xp = xp;\n\n  // We just save the xp into our notes, as Foundry calculates them automatically\n  const result = await parserXP.parse(xp, line);\n\n  if (result === true) lineContent = sbcUtils.cleanLine(lineContent.match(/^(XP\\s+[\\d,.]*)/)[1], lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Gender of the statblock.\n *\n * @param {string} lineContent              Content of the line.\n * @param {number} line                     Line number.\n * @returns {Promise<[boolean, string]>}    Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseGender(lineContent, line) {\n  const gender = lineContent.match(genderRegex())[0];\n  const parserGender = parserMapping.map.base.gender;\n  const result = await parserGender.parse(gender, line);\n\n  if (result) lineContent = sbcUtils.cleanLine(gender, lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Race of the statblock.\n *\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseRace(lineContent, line) {\n  const parserRace = parserMapping.map.base.race;\n\n  // Check, if it's one of the supported or any other known races\n  let race =\n    sbcUtils\n      .haystackRegexSearch(\n        window.SBC.config.races.map((term) => (term += \"\\\\b\")),\n        lineContent\n      )\n      ?.replace(\"\\\\b\", \"\") ||\n    sbcUtils\n      .haystackRegexSearch(\n        OtherRaces.map((term) => (term += \"\\\\b\")),\n        lineContent\n      )\n      ?.replace(\"\\\\b\", \"\") ||\n    false;\n\n  // Return false if the race wasn't found, or it was found inside parentheses\n  if (!race) return [false, lineContent];\n  if (\n    new RegExp(`\\\\(${race.toLowerCase()}|,\\\\s*${race.toLowerCase()}\\\\s*,|${race.toLowerCase()}\\\\)`).test(\n      lineContent.toLowerCase()\n    )\n  )\n    return [false, lineContent];\n\n  return [await parserRace.parse(race, line), sbcUtils.cleanLine(race, lineContent)];\n}\n\n/**\n * Parses the Age of the statblock.\n *\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseAge(lineContent, line) {\n  const age = sbcUtils.haystackRegexSearch([\"Middle[- ]Aged?\", \"Old\", \"Venerable\"], lineContent) || \"\";\n  const parserAge = parserMapping.map.base.age;\n  const result = await parserAge.parse(age, line);\n\n  if (result) lineContent = sbcUtils.cleanLine(age, lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Classes of the statblock.\n *\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise.<boolean>}                 Returns the result of the parsing.\n */\nasync function parseClasses(lineContent, line) {\n  const classMatch = lineContent.match(classesRegex());\n  if (classMatch) {\n    const classes = lineContent.slice(lineContent.indexOf(classMatch[0]));\n\n    const parserClasses = parserMapping.map.base.classes;\n    return await parserClasses.parse(classes, line);\n  }\n  return true;\n}\n\n/**\n * Parses the Alignment of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseAlignment(processData, lineContent, line) {\n  const parserAlignment = parserMapping.map.base.alignment;\n  const alignment = lineContent.match(alignmentRegex())[1].trim();\n  processData.notes.base.alignment = alignment;\n  const result = await parserAlignment.parse(alignment.replace(/\\bN\\b/, \"TN\").toLowerCase(), line);\n\n  if (result) lineContent = sbcUtils.cleanLine(alignment, lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Size and Space of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise.<object>}                  Returns an object with the parsed data.\n */\nasync function parseSizeAndSpace(processData, lineContent, line) {\n  const parserSize = parserMapping.map.base.size;\n  const size = lineContent.match(sizeRegex())[0].trim();\n  processData.notes.base.size = size;\n  const actorSize = sbcUtils.getKeyByValue(pf1.config.actorSizes, size);\n\n  // Values derived from Size\n  const parserSpace = parserMapping.map.base.space;\n  const parserScale = parserMapping.map.base.scale;\n\n  const space = pf1.config.tokenSizes[actorSize].w;\n  const scale = pf1.config.tokenSizes[actorSize].scale;\n\n  switch (actorSize) {\n    case \"dim\":\n    case \"fine\":\n    case \"tiny\":\n      await window.SBC.actor.update({\n        \"system.skills.swm.ability\": \"dex\",\n        \"system.skills.clm.ability\": \"dex\",\n        \"system.attributes.cmbAbility\": \"dex\",\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return {\n    size: await parserSize.parse(actorSize, line),\n    space: await parserSpace.parse(space, line),\n    scale: await parserScale.parse(scale, line),\n  };\n}\n\n/**\n * Parses the Creature Type of the statblock.\n *\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseCreatureType(lineContent, line) {\n  const creatureType = lineContent.match(creatureTypeAndSizeRegex())[1];\n  const parserCreatureType = parserMapping.map.base.creatureType;\n\n  const result = await parserCreatureType.parse(creatureType, line);\n\n  if (result) lineContent = sbcUtils.cleanLine(creatureType, lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Initiative of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseInit(processData, lineContent, line) {\n  const parserInit = parserMapping.map.base.init;\n  const init = lineContent.match(/Init\\s*([+-]?\\d+)/)[1].trim();\n  processData.characterData.conversionValidation.attributes[\"init\"] = +init;\n  const result = await parserInit.parse(+init, line);\n\n  if (result) lineContent = sbcUtils.cleanLine(init, lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Senses of the statblock.\n *\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number.\n * @returns {Promise<[boolean, string]>}        Returns a tuple with the result of the parsing and the cleaned line content.\n */\nasync function parseSenses(lineContent, line) {\n  const parserSenses = parserMapping.map.base.senses;\n  const senses = lineContent.match(/\\bSenses\\b\\s*(.*?)(?:\\n|$|\\s*Aura)/gim)[0].replace(/\\bSenses\\b\\s*|\\s*Aura\\b/g, \"\");\n  const result = await parserSenses.parse(senses, line);\n\n  if (result) lineContent = sbcUtils.cleanLine(senses, lineContent);\n\n  return [result, lineContent];\n}\n\n/**\n * Parses the Aura of the statblock.\n *\n * @returns {Promise<boolean>}        Returns the result of the parsing.\n */\nexport async function parseAuras() {\n  if (!aura.content) return true;\n\n  const parserAura = parserMapping.map.base.aura;\n  const auraValue = aura.content.match(/\\bAura\\b\\s*(.*)/gim)[0].replace(/\\s*Aura\\b/g, \"\");\n  const result = await parserAura.parse(auraValue, aura.line);\n\n  return result;\n}\n",
    "import { sbcUtils } from \"../sbcUtils.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { parserMapping } from \"../Parsers/parser-mapping.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\n\n/* ------------------------------------ */\n/* Parser for defense data              */\n/* ------------------------------------ */\n/**\n * Parses the defense data of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {Array.<string>} data               Array of separated data.\n * @param {number} startLine                  Index from where base part starts.\n * @returns {Promise.<boolean>}               `false` if any error is caught.\n */\nexport async function parseDefense(processData, data, startLine) {\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" + processData.parsedCategories + \"/\" + processData.foundCategories + \" >> PARSING DEFENSE DATA\"\n    );\n\n  let parsedSubCategories = [];\n  processData.notes[\"defense\"] = {};\n\n  // Loop through the lines\n  for (let line = 0; line < data.length; line++) {\n    try {\n      let lineContent = data[line];\n\n      // Parse Normal AC\n      if (!parsedSubCategories[\"acNormal\"] && lineContent.toLowerCase().startsWith(\"ac\")) {\n        parsedSubCategories[\"acNormal\"] = await parseAC(\"acNormal\", \"AC\", processData, lineContent, line + startLine);\n      }\n\n      // Parse Touch AC\n      if (!parsedSubCategories[\"acTouch\"] && lineContent.match(/Touch/i)) {\n        parsedSubCategories[\"acTouch\"] = await parseAC(\"acTouch\", \"Touch\", processData, lineContent, line + startLine);\n      }\n\n      // Parse Flat-footed AC\n      if (!parsedSubCategories[\"acFlatFooted\"] && lineContent.match(/flat-footed/i)) {\n        parsedSubCategories[\"acFlatFooted\"] = await parseAC(\n          \"acFlatFooted\",\n          \"flat-footed\",\n          processData,\n          lineContent,\n          line + startLine\n        );\n      }\n\n      // Parse AC Types\n      if (!parsedSubCategories[\"acTypes\"] && /AC.*?\\((.*?)\\)/i.test(lineContent)) {\n        // if (/^(?:AC[^(]*[(])([^)]*)/i.test(lineContent)) {\n        parsedSubCategories[\"acTypes\"] = await parseACTypes(processData, lineContent, line + startLine);\n        // }\n      }\n\n      // Parse HP and HD\n      if (!parsedSubCategories[\"hp\"] && lineContent.toLowerCase().startsWith(\"hp\")) {\n        parsedSubCategories[\"hp\"] = await parseHP(lineContent, line + startLine);\n      }\n\n      // Parse Saves\n      if (!parsedSubCategories[\"saves\"] && lineContent.toLowerCase().startsWith(\"fort \")) {\n        parsedSubCategories[\"saves\"] = await parserSaves(lineContent, line + startLine);\n      }\n\n      // Parse Damage Reduction\n      if (!parsedSubCategories[\"dr\"] && lineContent.match(/\\bDR\\b/i)) {\n        parsedSubCategories[\"dr\"] = await parseDR(lineContent, line + startLine);\n      }\n\n      // Parse Immunities\n      if (!parsedSubCategories[\"immune\"] && lineContent.match(/Immune\\b/i)) {\n        parsedSubCategories[\"immune\"] = await parseImmunities(lineContent, line + startLine);\n      }\n\n      // Parse Resistances\n      if (!parsedSubCategories[\"resist\"] && lineContent.match(/(?<!abilities\\s*)\\bResist\\b/i)) {\n        parsedSubCategories[\"resist\"] = await parseResistances(lineContent, line + startLine);\n      }\n\n      // Parse Weaknesses / Vulnerabilities\n      if (!parsedSubCategories[\"weakness\"] && lineContent.match(/\\bWeaknesses\\b/i)) {\n        parsedSubCategories[\"weakness\"] = await parseWeaknesses(lineContent, line + startLine);\n      }\n\n      // Parse Spell Resistance\n      if (!parsedSubCategories[\"sr\"] && lineContent.match(/\\bSR\\b/i)) {\n        parsedSubCategories[\"sr\"] = await parseSR(lineContent, line + startLine);\n      }\n\n      // Parse Defensive Abilities\n      if (!parsedSubCategories[\"defensiveAbilities\"] && lineContent.match(/Defensive Abilities\\b/i)) {\n        parsedSubCategories[\"defensiveAbilities\"] = await parserDefensiveAbilities(\n          processData,\n          lineContent,\n          line + startLine\n        );\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n      const errorMessage = `Parsing the defense data failed at line ${startLine + line + 1}`;\n      const error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse/Defense\", errorMessage, line + startLine);\n      processData.errors.push(error);\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      return false;\n    }\n  }\n\n  sbcUtils.log(\"RESULT OF PARSING DEFENSE DATA (TRUE = PARSED SUCCESSFULLY)\");\n  sbcUtils.log(parsedSubCategories, window.SBC.actor.system);\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n\n/**\n * Parse the various AC forms (Normal, Touch, and Flat-footed)\n *\n * @param {string} type                         The type of AC to parse (\"acNormal\", \"acTouch\", or \"acFlatFooted\")\n * @param {string} typeRegex                    The type term to use in regex for this section\n * @param {sbcTypes.ProcessData} processData    Process Data object\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number\n * @returns {Promise<boolean>}                  The result of the parsing (`false` if an error occurred)\n */\nasync function parseAC(type, typeRegex, processData, lineContent, line) {\n  const parserAC = parserMapping.map.defense[type];\n  const acRegex = new RegExp(`${typeRegex}\\\\s*(-?\\\\d+)`, \"i\");\n  const ac = lineContent.match(acRegex)[1].trim();\n\n  processData.notes.defense[type] = ac;\n  processData.characterData.conversionValidation.attributes[type] = +ac;\n\n  return await parserAC.parse(+ac, line);\n}\n\n/**\n * Parse the AC Types that appear after the AC totals for the categories.\n * For example, \"(+2 natural armor, +1 deflection, +1 dodge)\"\n *\n * @param {sbcTypes.ProcessData} processData    Process Data object\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number\n * @returns {Promise<boolean>}                  The result of the parsing (`false` if an error occurred)\n */\nasync function parseACTypes(processData, lineContent, line) {\n  const parserAcTypes = parserMapping.map.defense.acTypes;\n  // const acTypes = lineContent.match(/^(?:AC[^(]*[(])([^)]*)/i)[1].trim()\n  const acTypes = lineContent.match(/AC.*?\\((.*?)\\)/i)[1].trim();\n\n  processData.characterData.conversionValidation.attributes[\"acTypes\"] = acTypes;\n\n  return await parserAcTypes.parse(acTypes, line);\n}\n\n/**\n * Parse the HP and HD of the creature.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number\n * @returns {Promise<boolean>}  The result of the parsing (`false` if an error occurred)\n */\nasync function parseHP(lineContent, line) {\n  const parserHp = parserMapping.map.defense.hp;\n  const hp = lineContent.match(/^(?:HP)(.*)/i)[1].trim();\n\n  return await parserHp.parse(hp, line);\n}\n\n/**\n * Parse the Saves of the creature.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number\n * @returns {Promise<boolean>}  The result of the parsing (`false` if an error occurred)\n */\nasync function parserSaves(lineContent, line) {\n  const parserSaves = parserMapping.map.defense.saves;\n  const saves = lineContent.match(/^(Fort.*)/i)[1].trim();\n  return await parserSaves.parse(saves, line);\n}\n\n/**\n * Parse the Damage Reduction of the creature.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number\n * @returns {Promise<boolean>}  The result of the parsing (`false` if an error occurred)\n */\nasync function parseDR(lineContent, line) {\n  const parserDr = parserMapping.map.defense.dr;\n  const dr = lineContent.match(/\\bDR\\b(.*?)(?=$|Immune|Resist|SR|Weakness)/i)[1].trim();\n  return await parserDr.parse(dr, line);\n}\n\n/**\n * Parse the Immunities of the creature.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number\n * @returns {Promise<boolean>}  The result of the parsing (`false` if an error occurred)\n */\nasync function parseImmunities(lineContent, line) {\n  const parserImmune = parserMapping.map.defense.immune;\n  const immunities = lineContent.match(/\\bImmune\\b(.*?)(?=$|Resist|SR|Weakness|DR)/i)[1].trim();\n  return await parserImmune.parse(immunities, line);\n}\n\n/**\n * Parse the Weaknesses of the creature.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number\n * @returns {Promise<boolean>}  The result of the parsing (`false` if an error occurred)\n */\nasync function parseWeaknesses(lineContent, line) {\n  const parserWeakness = parserMapping.map.defense.weakness;\n  const weaknesses = lineContent.match(/\\bWeakness(?:es)?\\b(.*?)(?=$|\\b(?:Resist|Immune|SR|Weakness|DR)\\b)/i)[1].trim();\n  return await parserWeakness.parse(weaknesses, line);\n}\n\n/**\n * Parse the Resistances of the creature.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number\n * @returns {Promise<boolean>}  The result of the parsing (`false` if an error occurred)\n */\nasync function parseResistances(lineContent, line) {\n  const parserResist = parserMapping.map.defense.resist;\n  const resistances = lineContent.match(/\\bResist\\b(.*?)(?=$|\\b(?:Immune|SR|Weakness|DR)\\b)/i)[1].trim();\n  return await parserResist.parse(resistances, line);\n}\n\n/**\n * Parse the Spell Resistance of the creature.\n *\n * @param {string} lineContent  Content of the line.\n * @param {number} line         Line number\n * @returns {Promise<boolean>}  The result of the parsing (`false` if an error occurred)\n */\nasync function parseSR(lineContent, line) {\n  const parserSr = parserMapping.map.defense.sr;\n  const sr = lineContent.match(/\\bSR\\b(.*?)(?=$|\\b(?:Immune|Resist|Weakness|DR)\\b)/i)[1].trim();\n  return await parserSr.parse(sr, line);\n}\n\n/**\n * Parse the Defensive Abilities of the creature.\n *\n * @param {sbcTypes.ProcessData} processData    Process Data object\n * @param {string} lineContent                  Content of the line.\n * @param {number} line                         Line number\n * @returns {Promise<boolean>}                  The result of the parsing (`false` if an error occurred)\n */\nasync function parserDefensiveAbilities(processData, lineContent, line) {\n  const parserDefensiveAbilities = parserMapping.map.defense.defensiveAbilities;\n  const defensiveAbilities = lineContent\n    .match(/Defensive Abilities\\b\\s*(.*?)(?=$|\\b(?:Immune|Resist|Weakness|DR|SR)\\b)/i)[1]\n    .replace(/\\s*[,;]+/g, \",\")\n    .replace(/(,\\s*$)/, \"\")\n    .trim();\n\n  const [result, entities] = await parserDefensiveAbilities.parse(defensiveAbilities, line, \"class-abilities\", [\n    \"buff\",\n    \"consumable\",\n    \"equipment\",\n    \"feat\",\n    \"loot\",\n    \"weapon\",\n  ]);\n  processData.notes.defense.defensiveAbilities = entities;\n\n  return result;\n}\n",
    "import { sbcUtils } from \"../sbcUtils.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { parserMapping } from \"../Parsers/parser-mapping.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\n\n/* ------------------------------------ */\n/* Parser for description data          */\n/* ------------------------------------ */\n/**\n * Parses the description data\n *\n * @param {sbcTypes.ProcessData} processData    The current process data\n * @param {Array<string>} data                  The data to parse\n * @param {number} startLine                    The line number where the data starts\n * @returns {Promise<boolean>}                  Returns true if parsing was successful, false otherwise\n */\nexport async function parseDescription(processData, data, startLine) {\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" + processData.parsedCategories + \"/\" + processData.foundCategories + \" >> PARSING DESCRIPTION DATA\"\n    );\n\n  processData.notes[\"description\"] = {};\n\n  let description = \"\";\n\n  // Loop through the lines\n  for (let line = 0; line < data.length; line++) {\n    try {\n      let lineContent = data[line];\n      switch (lineContent.toLowerCase()) {\n        case \"description\":\n          break;\n        case \"\":\n          description = description.concat(\"\\n\");\n          break;\n        default:\n          description = description.concat(lineContent + \"\\n\");\n          break;\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n      let errorMessage = `Parsing the description data failed at line ${startLine + line + 1}`;\n      let error = new sbcError(sbcError.ERRORLEVELS.WARNING, \"Parse/Description\", errorMessage, line + startLine);\n      processData.errors.push(error);\n      processData.input.prepared.success = false;\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      return false;\n    }\n  }\n\n  processData.notes.description.long = description;\n\n  let parserDescription = parserMapping.map.description;\n  await parserDescription.parse(description, startLine);\n\n  sbcUtils.log(\"RESULT OF PARSING DESCRIPTION DATA (TRUE = PARSED SUCCESSFULLY)\");\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n",
    "import { sbcUtils } from \"../sbcUtils.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { parserMapping } from \"../Parsers/parser-mapping.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\n\n/* ------------------------------------ */\n/* Parser for ecology data              */\n/* ------------------------------------ */\n/**\n * Parses the ecology data of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {Array.<string>} data               Array of separated data.\n * @param {number} startLine                  Index from where base part starts.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nexport async function parseEcology(processData, data, startLine) {\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" + processData.parsedCategories + \"/\" + processData.foundCategories + \" >> PARSING ECOLOGY DATA\"\n    );\n\n  const parsedSubCategories = [];\n  processData.notes[\"ecology\"] = {\n    hasEcology: true,\n  };\n\n  // Loop through the lines\n  for (let line = 0; line < data.length; line++) {\n    try {\n      const lineContent = data[line];\n\n      const parserEcology = parserMapping.map.ecology;\n\n      // Parse Environment\n      if (!parsedSubCategories[\"environment\"] && lineContent.match(/Environment/i)) {\n        parsedSubCategories[\"environment\"] = await parseEnvironment(\n          parserEcology,\n          processData,\n          lineContent,\n          startLine + line\n        );\n      }\n\n      // Parse Organization\n      if (!parsedSubCategories[\"organization\"] && lineContent.match(/Organization/i)) {\n        parsedSubCategories[\"organization\"] = await parseOrganization(\n          parserEcology,\n          processData,\n          lineContent,\n          startLine + line\n        );\n      }\n\n      // Parse Treasure\n      if (!parsedSubCategories[\"treasure\"] && lineContent.match(/Treasure/i)) {\n        parsedSubCategories[\"treasure\"] = await parseTreasure(\n          parserEcology,\n          processData,\n          lineContent,\n          startLine + line\n        );\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n      const errorMessage = `Parsing the ecology data failed at line ${startLine + line + 1} (non-critical)`;\n      const error = new sbcError(sbcError.ERRORLEVELS.WARNING, \"Parse/Ecology\", errorMessage, line + startLine);\n      processData.errors.push(error);\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      // This is non-critical, so parse the rest\n      throw err;\n    }\n  }\n  sbcUtils.log(\"RESULT OF PARSING ECOLOGY DATA (TRUE = PARSED SUCCESSFULLY)\");\n  sbcUtils.log(parsedSubCategories);\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n\n/**\n * Parses the environment data of the statblock.\n *\n * @param {EcologyParser} parserEcology         Parser for ecology data.\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Line content to parse.\n * @param {number} line                         Line number.\n * @returns {Promise.<boolean>}                 `true` if parsing was successful.\n */\nasync function parseEnvironment(parserEcology, processData, lineContent, line) {\n  const environment = {\n    name: \"Environment\",\n    entry: lineContent.match(/^(?:Environment)([\\s\\S]*?)(?=$|Organization|Treasure)/i)[1],\n  };\n\n  processData.notes.ecology.environment = environment.entry;\n  return await parserEcology.parse(environment, line);\n}\n\n/**\n * Parses the organization data of the statblock.\n *\n * @param {EcologyParser} parserEcology         Parser for ecology data.\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Line content to parse.\n * @param {number} line                         Line number.\n * @returns {Promise.<boolean>}                 `true` if parsing was successful.\n */\nasync function parseOrganization(parserEcology, processData, lineContent, line) {\n  const organization = {\n    name: \"Organization\",\n    entry: lineContent.match(/(?:Organization)([\\s\\S]*?)(?=$|Treasure)/i)[1],\n  };\n\n  processData.notes.ecology.organization = organization.entry;\n  return await parserEcology.parse(organization, line);\n}\n\n/**\n * Parses the treasure data of the statblock.\n *\n * @param {EcologyParser} parserEcology         Parser for ecology data.\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Line content to parse.\n * @param {number} line                         Line number.\n * @returns {Promise.<boolean>}                 `true` if parsing was successful.\n */\nasync function parseTreasure(parserEcology, processData, lineContent, line) {\n  const treasure = {\n    name: \"Treasure\",\n    entry: lineContent.match(/(?:Treasure)([\\s\\S]*?)$/i)[1],\n  };\n\n  // Check for npc gear\n  const hasNPCgear = lineContent.match(/(NPC Gear)/i);\n\n  if (hasNPCgear) {\n    const npcGear = lineContent.match(/(?:NPC Gear\\s*\\()([^)]*)/gi)[0].replace(/NPC Gear\\s*\\(/i, \"\");\n    processData.treasureParsing.treasureToParse = npcGear;\n    processData.treasureParsing.lineToRemove = line;\n\n    const errorMessage = `\n        This is treasure and will not be included as items in the actor. If you want to parse these as real items, press here:<br/>\n        <input type=\"button\" id=\"parseTreasureAsGearButton\" value=\"Parse Treasure as Gear\"></input>`;\n\n    const error = new sbcError(sbcError.ERRORLEVELS.WARNING, \"Parse/Ecology\", errorMessage, line);\n    processData.errors.push(error);\n  }\n\n  processData.notes.ecology.treasure = treasure.entry;\n  return await parserEcology.parse(treasure, line);\n}\n",
    "import { parserMapping } from \"../Parsers/parser-mapping.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { sbcUtils } from \"../sbcUtils.js\";\nimport SpellBooksParser from \"../Parsers/Offense/spellbook-parser.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\nimport { classesRegex } from \"../sbcRegex.js\";\n\n/* ------------------------------------ */\n/* Parser for offense data              */\n/* ------------------------------------ */\n\n// Setup indices, booleans and arrays for spell-parsing\n/**\n * Raw data for spellbooks.\n *\n * @type {{number: sbcTypes.RawSpellBookData}}\n */\nlet rawSpellBooks = {};\nlet spellBooksFound = 0;\nlet currentSpellBook = 0;\nconst currentSpellBookType = {\n  0: \"primary\",\n  1: \"secondary\",\n  2: \"tertiary\",\n  3: \"spelllike\",\n  4: \"quinary\",\n  5: \"senary\",\n  6: \"septenary\",\n  7: \"octonary\",\n};\n\nlet startIndexOfSpellBooks = [];\nlet existingSpellbooks = [];\n\n/**\n * Parses the offense data of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {Array.<string>} data               Array of separated data.\n * @param {number} startLine                  Index from where base part starts.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nexport async function parseOffense(processData, data, startLine) {\n  rawSpellBooks = {};\n  spellBooksFound = 0;\n  currentSpellBook = 0;\n  startIndexOfSpellBooks = [];\n  existingSpellbooks = [];\n\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" + processData.parsedCategories + \"/\" + processData.foundCategories + \" >> PARSING OFFENSE DATA\"\n    );\n\n  let parsedSubCategories = [];\n  processData.notes.offense = {\n    speed: [],\n    spellBooks: [],\n  };\n\n  let meleeData = { text: \"\", line: 0 };\n  let rangedData = { text: \"\", line: 0 };\n  const specialAttacksExist = data.some((line) => /^Special\\s+Attacks\\b\\s*/i.test(line));\n  let specialAttackData = { text: \"\", line: 0 };\n\n  // Loop through the lines\n  for (let line = 0; line < data.length; line++) {\n    try {\n      const lineContent = data[line];\n\n      if (/^Spe{0,2}d\\s*/i.test(lineContent)) {\n        if (!parsedSubCategories[\"landSpeed\"] && /^Spe{0,2}d\\s*\\d+/i.test(lineContent)) {\n          parsedSubCategories[\"landSpeed\"] = await parseSpeed(lineContent, \"land\", \"^Spe{0,2}d\", line + startLine);\n        } else {\n          parsedSubCategories[\"landSpeed\"] = await parseSpeed(\"Speed 0 ft.\", \"land\", \"^Spe{0,2}d\", line + startLine);\n        }\n\n        // Parse Swim Speed\n        if (!parsedSubCategories[\"swimSpeed\"] && lineContent.match(/\\bSwim\\s*/i)) {\n          parsedSubCategories[\"swimSpeed\"] = await parseSpeed(lineContent, \"swim\", \"\\\\bSwim\", line + startLine);\n        }\n\n        // Parse Climb Speed\n        if (!parsedSubCategories[\"climbSpeed\"] && lineContent.match(/\\bClimb\\s*/i)) {\n          parsedSubCategories[\"climbSpeed\"] = await parseSpeed(lineContent, \"climb\", \"\\\\bClimb\", line + startLine);\n        }\n\n        // Parse Burrow Speed\n        if (!parsedSubCategories[\"burrowSpeed\"] && lineContent.match(/\\bBurrow\\s*/i)) {\n          parsedSubCategories[\"burrowSpeed\"] = await parseSpeed(lineContent, \"burrow\", \"\\\\bBurrow\", line + startLine);\n        }\n\n        // Parse Fly Speed\n        if (!parsedSubCategories[\"flySpeed\"] && lineContent.match(/\\bFly\\s*/i)) {\n          parsedSubCategories[\"flySpeed\"] = await parseSpeed(lineContent, \"fly\", \"\\\\bFly\", line + startLine);\n        }\n      }\n\n      // Parse Speed Abilities\n      // WIP\n\n      // Parse Melee Attacks\n      if (!parsedSubCategories[\"melee\"] && lineContent.match(/^Melee\\s*/i)) {\n        meleeData = await parseAttackLine(lineContent, \"Melee\", data[line + 1], line + startLine);\n\n        // Record for our notes\n        processData.notes.offense.melee = meleeData.text;\n\n        // Process later after Special Attacks\n        if (!specialAttacksExist) {\n          // Process Weapon Groups before attacks\n          await processWeaponGroups(processData);\n\n          parsedSubCategories[\"melee\"] = await parseAttacks(meleeData, \"mwak\");\n        }\n      }\n\n      // Parse Ranged Attacks\n      if (!parsedSubCategories[\"ranged\"] && lineContent.match(/^Ranged\\s*/i)) {\n        // Find and cache the range data for later use\n        rangedData = await parseAttackLine(lineContent, \"Ranged\", data[line + 1], line + startLine);\n\n        // Record for our notes\n        processData.notes.offense.ranged = rangedData.text;\n\n        // Process later after Special Attacks\n        if (!specialAttacksExist) {\n          // Process Weapon Groups before attacks\n          await processWeaponGroups(processData);\n\n          parsedSubCategories[\"ranged\"] = await parseAttacks(rangedData, \"rwak\");\n        }\n      }\n\n      // Parse Special Attacks\n      if (!parsedSubCategories[\"specialAttacks\"] && lineContent.match(/^Special\\s+Attacks\\b\\s*/i)) {\n        specialAttackData.text = lineContent;\n        specialAttackData.line = line + startLine;\n      }\n\n      // Parse Space, Reach and StatureparserStature\n      if (!parsedSubCategories[\"spaceStature\"]) {\n        if (/^Space\\b.*\\bReach\\b/i.test(lineContent)) {\n          // This may overwrite space and reach that was automatically derived by creature size,\n          // which in theory should be fine, i guess\n\n          const parserStature = parserMapping.map.offense.stature;\n          const [spaceResult, space] = await parseSpace(lineContent, line + startLine);\n          let [reach, reachContext] = await parseReach(lineContent);\n\n          processData.notes.offense.space = pf1.utils.convertDistance(+space).join(\" \");\n          processData.notes.offense.reach = pf1.utils.convertDistance(+reach).join(\" \");\n          processData.notes.offense.reachContext = sbcUtils.convertStringUnits(reachContext);\n\n          // Foundry PF1 actor has no field for \"reach\", so try to derive the \"stature\" from reach\n          // In 90% of all cases this should be \"tall\"\n          const stature = +reach < +space ? \"long\" : \"tall\";\n\n          parsedSubCategories[\"spaceReach\"] = {\n            space: spaceResult,\n            stature: await parserStature.parse(stature, line + startLine),\n          };\n        }\n      }\n\n      /* Parse Spell-Like Abilities\n       *\n       * Collate all lines that are part of the Spell-Like Abilities,\n       * by putting all lines found after the keyword ...\n       * ... up until the end of the section or\n       * ... up until the next keyword\n       * into an array\n       */\n      if (!parsedSubCategories[\"spellLikeAbilities\"] && lineContent.match(/Spell-Like\\s+Abilities\\b\\s*/i)) {\n        startSpellbookProcessing(processData, lineContent, line, true, false);\n        sbcUtils.log(`Spell-Like Abilities found: ${currentSpellBook}, ${startIndexOfSpellBooks[currentSpellBook]}`);\n      }\n\n      // Parse Psychic Magic\n      // Psychic Magic contains a header and a single line after about its pool\n      if (!parsedSubCategories[\"psychicMagic\"] && lineContent.match(/^Psychic\\s+Magic\\b\\s*/i)) {\n        startSpellbookProcessing(processData, lineContent, line, false, true);\n\n        rawSpellBooks[spellBooksFound].spells.push(data[line + 1]);\n        line++;\n      }\n\n      // Parse Spells/Extracts Prepared/Known\n      /* Collate all lines that are part of the spellbook's/formula book's spells,\n       * by putting all lines found after the keyword ...\n       * ... up until the end of the section or\n       * ... up until the next keyword\n       * into an array\n       */\n      if (!parsedSubCategories[\"spellBooks\"] && /(?:Spells|Extracts) (?:Prepared|Known)\\b\\s*/i.test(lineContent)) {\n        startSpellbookProcessing(processData, lineContent, line, false, false);\n        sbcUtils.log(`Spellbook ${currentSpellBook}, ${startIndexOfSpellBooks[currentSpellBook]}`);\n      }\n\n      /* If there are Spell-Like Abilities and the current line comes after the start of this section\n       * or we are in spellbook processing and the current line comes after the start of this section\n       * then check the line for the keywords that denote a new spell section and determine\n       * if we should push the line into the current section's spells array.\n       */\n      if (\n        spellBooksFound !== 0 &&\n        currentSpellBook <= spellBooksFound &&\n        +line > +startIndexOfSpellBooks[currentSpellBook]\n      ) {\n        /* If the line contains any of the keyswords that denote a new spell section\n         * like \"spells prepared\" or \"spells known\"\n         * then don't push the line to the spellbook's spells array.\n         */\n        if (/Spell-Like|Spells|Extracts (?:Prepared|Known)|Psychic Magic/gi.test(lineContent) === false) {\n          // Push the line into the array holding the raw data for Spell-Like Abilities\n          rawSpellBooks[currentSpellBook].spells.push(lineContent);\n        }\n      }\n\n      /* If this is the last line of the offense block\n       * send spellBooks (if available) to the SpellBooksParser\n       * and the notes section\n       */\n      if (line == data.length - 1) {\n        /** @type {sbcTypes.SBC} */\n        const sbcInstance = window.SBC;\n        let spellBooksInUse = 0;\n        let spellBookMapping = {};\n        await sbcUtils.runParallelOps(Object.values(rawSpellBooks), async (rawSpellBook, i) => {\n          let parser = new SpellBooksParser(sbcInstance.app);\n\n          sbcUtils.log(`Spellbook ${i} Processing: ${rawSpellBook.spellBookType}`, rawSpellBook);\n          const [result, type, inUse] = await parser.parse(rawSpellBook, startIndexOfSpellBooks[i]);\n          if (inUse) {\n            spellBookMapping[type] = currentSpellBookType[spellBooksInUse];\n            spellBooksInUse++;\n          }\n          sbcUtils.log(`Spellbook ${i} Results: ${result} - ${type} - ${inUse}`);\n        });\n\n        if (spellBooksInUse > 0) {\n          const spellBookData = {};\n          const spellbooks = window.SBC.actor.system.attributes.spells.spellbooks;\n          const books = new Set(Object.keys(spellbooks));\n\n          const itemUpdates = [];\n          const allSpells = window.SBC.actor.itemTypes.spell;\n\n          for (const [type, book] of Object.entries(spellBookMapping)) {\n            if (book === type) {\n              books.delete(book);\n              continue;\n            }\n\n            spellBookData[book] = pf1.utils.deepClone(spellbooks[type]);\n\n            allSpells\n              .filter((spell) => spell.system.spellbook === type)\n              .forEach((spell) => {\n                itemUpdates.push({ _id: spell._id, \"system.spellbook\": book });\n              });\n\n            processData.characterData.conversionValidation.spellBooks[book] = pf1.utils.deepClone(\n              processData.characterData.conversionValidation.spellBooks[type]\n            );\n            delete processData.characterData.conversionValidation.spellBooks[type];\n            books.delete(book);\n          }\n          books.forEach((book) => {\n            spellBookData[book] = SpellBooksParser.getDefaultSpellbookData();\n          });\n\n          await window.SBC.actor.update({ \"system.attributes.spells.spellbooks\": spellBookData });\n          await window.SBC.actor.updateEmbeddedDocuments(\"Item\", itemUpdates);\n        }\n\n        if (!specialAttacksExist) {\n          // Process Weapon Groups before attacks\n          await processWeaponGroups(processData);\n        } else {\n          parsedSubCategories[\"specialAttacks\"] = await parserSpecialAttacks(\n            processData,\n            specialAttackData.text,\n            specialAttackData.line\n          );\n\n          // Process Weapon Groups before attacks\n          await processWeaponGroups(processData);\n\n          // Process Melee and Ranged Attacks\n          parsedSubCategories[\"melee\"] = await parseAttacks(meleeData, \"mwak\");\n          parsedSubCategories[\"ranged\"] = await parseAttacks(rangedData, \"rwak\");\n        }\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n      const errorMessage = `Parsing the offense data failed at line ${startLine + line + 1}`;\n      const error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse/Offense\", errorMessage, line + startLine);\n      processData.errors.push(error);\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      return false;\n    }\n  }\n\n  sbcUtils.log(\"RESULT OF PARSING OFFENSE DATA (TRUE = PARSED SUCCESSFULLY)\");\n  sbcUtils.log(parsedSubCategories);\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n\n/**\n * Parses the speed of the creature.\n *\n * @param {string} lineContent  The speed string.\n * @param {string} type         The type of speed.\n * @param {string} regexTerm    The regex term to match the speed.\n * @param {number} line         The line number.\n * @returns {Promise<boolean>}  `false` if any error is caught.\n */\nasync function parseSpeed(lineContent, type, regexTerm, line) {\n  const parserSpeed = parserMapping.map.offense.speed;\n  const speedRegex = new RegExp(`${regexTerm}\\\\s*($|[^,]*)`, \"i\");\n  const speed = lineContent.match(speedRegex)[1].trim();\n\n  return await parserSpeed.parse(speed, line, type);\n}\n\n/**\n * Parses the attack line.\n *\n * @param {string} lineContent  The line content.\n * @param {string} type         The type of attack.\n * @param {string} nextLine     The next line.\n * @param {number} line         The line number.\n * @returns {object}            The parsed attack line.\n */\nfunction parseAttackLine(lineContent, type, nextLine, line) {\n  const attackRegex = new RegExp(`^${type}\\\\s*(.*)`, \"i\");\n  let attackText = lineContent.match(attackRegex)[1].trim();\n  if (attackText.match(/(or|and)$/i)) attackText += \" \" + nextLine.trim();\n\n  return { text: attackText, line: line };\n}\n\n/**\n * Parses the attacks.\n *\n * @param {object} attackData   The attack data.\n * @param {string} type         The type of attack.\n * @returns {Promise<boolean>}  `false` if any error is caught.\n */\nasync function parseAttacks(attackData, type) {\n  const parserAttacks = parserMapping.map.offense.attacks;\n  return await parserAttacks.parse(attackData.text, attackData.line, type);\n}\n\n/**\n * Parses the special attacks.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                The line content.\n * @param {number} line                       The line number.\n * @returns {Promise<boolean>}                `false` if any error is caught.\n */\nasync function parserSpecialAttacks(processData, lineContent, line) {\n  const parserSpecialAttacks = parserMapping.map.offense.specialAttacks;\n  const specialAttacks = lineContent.match(/^Special\\s+Attacks?\\s*(.*)/i)[1].trim();\n\n  // parsedSubCategories[\"specialAttacks\"] = await parserSpecialAttacks.parse(specialAttacks, line+startLine)\n  const [result, entities] = await parserSpecialAttacks.parse(\n    specialAttacks,\n    line,\n    [\"special-attacks\", \"class-abilities\"],\n    [\"feat\"],\n    [\"classFeat\"],\n    false\n  );\n\n  processData.notes.offense.specialAttacks = entities;\n\n  return result;\n}\n\n/**\n * Parses the space.\n *\n * @param {string} lineContent              The line content.\n * @param {number} line                     The line number.\n * @returns {Promise<[boolean, string]>}    `false` if any error is caught. The space string.\n */\nasync function parseSpace(lineContent, line) {\n  // 10-28-23 Change:\n  // Check for space without checking for number.\n  // This used to check for a number, but failed to catch creatures that took up less space.\n  // For example, an Imp has a space of \"2-1/2 ft.\"\n  const parserSpace = parserMapping.map.offense.space;\n  let space = lineContent.match(/^Space\\s*(\\S+)\\s+/i)[1];\n  space = space.replace(/(.)-(.)/g, \"$1.$2\");\n\n  const spaceMatch = space.match(/(\\d*)\\.+(\\d*)\\/+(\\d*)/);\n  if (spaceMatch?.length > 0) space = +spaceMatch[1] + spaceMatch[2] / spaceMatch[3];\n\n  const spaceInSquares = (Math.round(space / 0.5) * 0.5) / 5;\n  const result = await parserSpace.parse(spaceInSquares, line);\n\n  return Promise.resolve([result, space]);\n}\n\n/**\n * Parses the reach.\n *\n * @param {string} lineContent  The line content.\n * @returns {Promise<[string, string]>}  The reach and reach context.\n */\nasync function parseReach(lineContent) {\n  const reachInput = sbcUtils.parseSubtext(lineContent.match(/Reach(.*)/i)[1]);\n  let reach = \"\";\n  let reachContext = \"\";\n\n  if (reachInput[0]) {\n    reach = reachInput[0];\n    // reach = reachInput[0].replace(/(\\d+)(.*)/g, \"$1\").trim();\n    reach = reach.replace(/(.)-(.)/g, \"$1.$2\");\n    const reachMatch = reach.match(/(\\d*)\\.+(\\d*)\\/+(\\d*)/);\n    if (reachMatch?.length > 1) reach = +reachMatch[1] + reachMatch[2] / reachMatch[3];\n\n    reach = reach.replace(/(\\d+\\.?\\d*)(.*)/g, \"$1\");\n  }\n\n  if (reachInput[1]) reachContext = reachInput[1].replace(/[()]/g, \"\").trim();\n  return Promise.resolve([reach, reachContext]);\n}\n\n// Spellcasting support functions\n/**\n * Get the caster level from a line.\n *\n * @param {string} line The line to check.\n * @returns {number}    The caster level, or 0 if not found.\n */\nfunction getCasterLevel(line) {\n  return line.match(/\\bCL\\b\\s*(?<cl>\\d+)/i)?.groups.cl ?? 0;\n}\n\n/**\n * Get the concentration bonus from a line.\n *\n * @param {string} line The line to check.\n * @returns {number|null}    The concentration bonus, or null if not found.\n */\nfunction getConcentrationBonus(line) {\n  return line.match(/\\b(Concentration\\b|Conc\\.)\\s*\\+(?<bonus>\\d+)/i)?.groups?.bonus;\n}\n\n/**\n * Start the processing of a spellbook.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                The line content.\n * @param {number} line                       The line number.\n * @param {boolean} isSpellLike               Whether this is a spell-like ability.\n * @param {boolean} isPsychicMagic            Whether this is psychic magic.\n */\nfunction startSpellbookProcessing(processData, lineContent, line, isSpellLike, isPsychicMagic) {\n  let spellCastingClass = \"_hd\";\n  let spellCastingType = \"prepared\";\n  let spellBookType = \"spelllike\";\n  let spellBookName = null;\n  let isAlchemist = false;\n\n  if (!isSpellLike && !isPsychicMagic) {\n    // Check for the spellCastingType (Spontaneous is default)\n    // Set casterLevel and concentrationBonus\n    // Set spellCastingClass (hd is default)\n    spellCastingType = lineContent.match(/Prepared/i) ? \"prepared\" : \"spontaneous\";\n    spellCastingClass = \"hd\";\n    isAlchemist = !!lineContent.match(/Extracts/i);\n    spellBookType = null;\n\n    const classMatch = classesRegex(false).exec(lineContent)?.groups?.class;\n\n    if (classMatch) {\n      spellCastingClass = classMatch;\n      const classItem = window.SBC.actor.itemTypes.class.find((c) => c.name.match(new RegExp(classMatch, \"i\")));\n      if (!classItem) {\n        spellCastingClass = \"hd\";\n        spellBookName = `${classMatch} ${sbcUtils.translate(\"spellbookName.spells\" + (spellCastingType === \"prepared\" ? \"Prepared\" : \"Known\"))}`;\n      }\n    } else {\n      const classItem = window.SBC.actor.itemTypes.class.find(\n        (c) => c.system.casting && c.system.casting.type === spellCastingType\n      );\n      spellCastingClass = classItem ? classItem.name : \"hd\";\n    }\n\n    // If it's a normal casting class of some sort\n    currentSpellBook = spellBooksFound;\n    spellBooksFound++;\n    sbcUtils.log(`Current Spellbook: ${currentSpellBook}, Spellbooks found: ${spellBooksFound}`);\n    spellBookType = currentSpellBookType[currentSpellBook];\n  } else if (isPsychicMagic) {\n    // If it's psychic magic\n    currentSpellBook = spellBooksFound;\n    spellBooksFound++;\n\n    spellCastingType = \"points\";\n    spellBookType = currentSpellBookType[currentSpellBook];\n  } else {\n    // Otherwise, it's a spell-like ability list\n    currentSpellBook = spellBooksFound;\n    spellBooksFound++;\n    spellBookType = currentSpellBookType[currentSpellBook];\n  }\n\n  // Set casterLevel and concentrationBonus\n  const casterLevel = getCasterLevel(lineContent);\n  const concentrationBonus = getConcentrationBonus(lineContent) ?? casterLevel;\n\n  // Before we push new data, check if the spellbook type already exists\n  // If so, we need to move that data to the next slot.\n  if (existingSpellbooks.includes(spellBookType)) {\n    // Get the next unused spellbook type\n    let newBook = getNextSpellbook();\n\n    // Shuffle data around to swap.\n    rawSpellBooks[newBook] = duplicate(rawSpellBooks[currentSpellBook]);\n    rawSpellBooks[newBook].spellBookType = currentSpellBookType[newBook];\n    startIndexOfSpellBooks[newBook] = startIndexOfSpellBooks[currentSpellBook];\n  }\n\n  // Push the line into the array holding the raw data for Spell-Like Abilities\n  rawSpellBooks[currentSpellBook] = {\n    firstLine: lineContent,\n    spells: [],\n    spellCastingType: spellCastingType,\n    spellCastingClass: spellCastingClass,\n    casterLevel: casterLevel,\n    concentrationBonus: concentrationBonus,\n    spellBookType: spellBookType,\n    isSpellLike: isSpellLike,\n    isAlchemist: isAlchemist,\n    spellBookName: spellBookName,\n  };\n  startIndexOfSpellBooks[currentSpellBook] = line;\n\n  // Keep a list of used spellbooks\n  existingSpellbooks.push(spellBookType);\n  console.log(`Current Spellbook: ${currentSpellBook}, Spellbooks found: ${spellBooksFound}`);\n}\n\n/**\n * Process the Weapon Groups.\n *\n * This function will parse the class feats and find any weapon groups\n * that the character has access to. It will then add these to the\n * character's weapon groups data for later processing of attack\n * bonuses when SBC processes the attacks.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @returns {Promise<void>}   A promise that resolves when the weapon groups have been processed.\n */\nasync function processWeaponGroups(processData) {\n  const features = window.SBC.actor.itemTypes.feat.filter((feat) => feat.system.subType === \"classFeat\");\n  const weaponGroups = Object.values(window.SBC.config.weaponGroups);\n\n  for (const feature of features) {\n    let subText = sbcUtils.parseSubtext(feature.name.toLowerCase());\n    subText.shift();\n    for (const group of subText) {\n      const foundGroup = weaponGroups.find((wg) => group.includes(wg));\n      if (foundGroup) {\n        const foundBonus = parseInt(group.match(/\\+(\\d+)/)?.[1] ?? 0);\n        sbcUtils.log(`Found Group ${foundGroup}, Found Bonus ${foundBonus}`);\n        const groupKey = Object.keys(window.SBC.config.weaponGroups)[weaponGroups.indexOf(foundGroup)];\n\n        if (foundGroup && foundBonus > 0 && !Object.keys(processData.characterData.weaponGroups).includes(groupKey))\n          processData.characterData.weaponGroups[groupKey] = foundBonus;\n      }\n    }\n  }\n\n  sbcUtils.log(\"Weapon Groups\", processData.characterData.weaponGroups);\n}\n\n/**\n * Get the next available spellbook type.\n *\n * This function will return the next available spellbook type that is not already in use.\n *\n * @returns {number}  The next spellbook type.\n */\nfunction getNextSpellbook() {\n  return parseInt(\n    Object.keys(currentSpellBookType).find((type) => !existingSpellbooks.includes(currentSpellBookType[type]))\n  );\n}\n",
    "import { sbcUtils } from \"../sbcUtils.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { parserMapping } from \"../Parsers/parser-mapping.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\n\n/* ------------------------------------ */\n/* Parser for special ability data      */\n/* ------------------------------------ */\n/**\n * Parses the ecology data of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {Array.<string>} data               Array of separated data.\n * @param {number} startLine                  Index from where base part starts.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nexport async function parseSpecialAbilities(processData, data, startLine) {\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" +\n        processData.parsedCategories +\n        \"/\" +\n        processData.foundCategories +\n        \" >> PARSING SPECIAL ABILITY DATA\"\n    );\n\n  let parsedSubCategories = [];\n  let parsedSubCategoriesCounter = 0;\n  processData.notes.specialAbilities = [];\n  const parserSpecialAbility = parserMapping.map.specialAbilities;\n\n  // Loop through the lines, and parse out each special ability.\n  // Each special ability is its own line in the array, so we send each line to the parser.\n  // If we parsed one, we add it to our array of parsed special abilities.\n  // Skip the first line, as it contains the section header \"Special Abilities\"\n  for (let line = 1; line < data.length; line++) {\n    try {\n      const lineContent = data[line];\n      const specialAbilityLabel = `specialAbility-${parsedSubCategoriesCounter}`;\n\n      // Parse Special Ability\n      if (!parsedSubCategories[specialAbilityLabel]) {\n        parsedSubCategories[specialAbilityLabel] = await parserSpecialAbility.parse(lineContent, startLine + line);\n        parsedSubCategoriesCounter += +!!parsedSubCategories[specialAbilityLabel];\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n      let errorMessage = `Parsing the special abilities failed at line ${startLine + line + 1} (non-critical)`;\n      let error = new sbcError(sbcError.ERRORLEVELS.WARNING, \"Parse/Special Abilities\", errorMessage, line + startLine);\n      processData.errors.push(error);\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      // This is non-critical, so parse the rest\n      return false;\n    }\n  }\n\n  // Now that we're done, let's combine all the special abilities for our notes later on.\n  //     processData.notes[\"specialAbilities\"].parsedSpecialAbilities = processData.notes[\"specialAbilities\"].parsedSpecialAbilities.join(`\n\n  // `)\n\n  sbcUtils.log(\"RESULT OF PARSING SPECIAL ABILITY DATA (TRUE = PARSED SUCCESSFULLY)\");\n  sbcUtils.log(parsedSubCategories);\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n",
    "import { sbcUtils } from \"../sbcUtils.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { parserMapping } from \"../Parsers/parser-mapping.js\";\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\nimport { createItem } from \"../sbcParser.js\";\n\n/* ------------------------------------ */\n/* Parser for statistics data           */\n/* ------------------------------------ */\n\nlet gearParsed = false;\nlet hasGear = false;\nlet skills = \"\";\nlet skillsLine = -1;\n\n/**\n * Parses the statistics data of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {Array.<string>} data               Array of separated data.\n * @param {number} startLine                  Index from where base part starts.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nexport async function parseStatistics(processData, data, startLine) {\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" + processData.parsedCategories + \"/\" + processData.foundCategories + \" >> PARSING STATISTICS DATA\"\n    );\n\n  let parsedSubCategories = [];\n  processData.notes[\"statistics\"] = {};\n  processData.treasureParsing.statisticsStartLine = startLine;\n  let abilities = [];\n  let abilitiesLine = 0;\n  let sqs = \"\";\n  let sqsLine = 0;\n  gearParsed = false;\n  hasGear = data.some((line) => /\\b((?:Combat |Other |^)Gear)\\b/i.test(line));\n  skills = \"\";\n  skillsLine = -1;\n\n  // Empty actor inventory to remove any class-granted items, such as spellbooks\n  for (let itemType of [\"consumable\", \"equipment\", \"loot\", \"weapon\", \"container\"]) {\n    await Promise.all(window.SBC.actor.itemTypes[itemType]?.map(async (item) => await item.delete()));\n  }\n\n  // Loop through the lines\n  for (let line = 0; line < data.length; line++) {\n    try {\n      let lineContent = data[line];\n\n      // Parse Base Attack\n      if (!parsedSubCategories[\"bab\"] && lineContent.match(/^Base Atk\\b/i)) {\n        let bab = lineContent.match(/Base Atk\\b\\s*([+-]?\\d+)/gi)[0].replace(/Base Atk\\b\\s*/i, \"\");\n\n        processData.characterData.conversionValidation.attributes[\"bab\"] = +bab;\n      }\n\n      // Parse CMB\n      if (!parsedSubCategories[\"cmb\"] && lineContent.match(/\\bCMB\\b/i)) {\n        parsedSubCategories[\"cmb\"] = await parseCMB(processData, lineContent, startLine + line);\n      }\n\n      // Parse CMD\n      if (!parsedSubCategories[\"cmd\"] && lineContent.match(/\\bCMD\\b/i)) {\n        parsedSubCategories[\"cmd\"] = await parseCMD(processData, lineContent, startLine + line);\n      }\n\n      // Parse Feats\n      if (!parsedSubCategories[\"feats\"] && lineContent.match(/^Feats\\b/i)) {\n        parsedSubCategories[\"feats\"] = await parseFeats(processData, lineContent, startLine + line);\n      }\n\n      // Parse Languages\n      if (!parsedSubCategories[\"languages\"] && lineContent.match(/^Languages\\b/i)) {\n        parsedSubCategories[\"languages\"] = await parseLanguages(processData, lineContent, startLine + line);\n      }\n\n      // Parse Gear\n      if (/((?:Combat |Other |^)Gear)\\b/i.test(lineContent)) {\n        parsedSubCategories[\"gear\"] = await parseGear(processData, lineContent, startLine + line);\n        gearParsed = true;\n      }\n\n      // Parse Abilities\n      // This gets checked every loop by its nature, as the first pass will cache the abilities\n      // and the second pass will parse them after the gear has been parsed.\n      // At least it exits early if we're not checking abilities and the gear isn't parsed.\n      if (!parsedSubCategories[\"abilities\"]) {\n        if (/(Str|Dex|Con|Int|Wis|Cha)\\s*(\\d+|-)/i.test(lineContent) && !abilities.length) {\n          // Cache the abilities so that we can process them after the gear is parsed.\n          abilities = lineContent.match(/((Str|Dex|Con|Int|Wis|Cha)\\s*(\\d+|-))/gi);\n          abilitiesLine = line;\n        }\n\n        // gearIsParsed(line, data.length) &&\n        if (gearIsParsed(line, data.length) && abilities.length > 0) {\n          for (let i = 0; i < abilities.length; i++) {\n            await parseAbility(abilities[i], processData, abilitiesLine);\n          }\n\n          parsedSubCategories[\"abilities\"] = true;\n        }\n      }\n\n      // Parse Skills\n      // This gets checked every loop by its nature, as the first pass will cache the skills\n      // and the second pass will parse them after the gear has been parsed.\n      // At least it exits early if we're not checking skills and the gear and abilities aren't parsed.\n      if (!parsedSubCategories[\"skills\"]) {\n        if (lineContent.match(/^Skills\\b/i)) {\n          skills = lineContent\n            .match(/Skills\\b\\s*(.*)/i)[1]\n            .replace(/\\s*[,;]+/g, \",\")\n            .trim();\n          skillsLine = startLine + line;\n          parsedSubCategories[\"skills\"] = true;\n        }\n      }\n\n      // Parse SQ\n      if (!parsedSubCategories[\"sq\"]) {\n        if (lineContent.match(/^SQ\\b/i)) {\n          sqs = lineContent;\n          sqsLine = line;\n        }\n\n        if (sqs && parsedSubCategories[\"abilities\"]) {\n          parsedSubCategories[\"sq\"] = await parseSQ(processData, sqs, startLine + sqsLine);\n        }\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n\n      let errorMessage = \"Parsing the statistics data failed at the highlighted line\";\n      let error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse/Statistics\", errorMessage, startLine + line + 1);\n      processData.errors.push(error);\n      processData.input.prepared.success = false;\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      return false;\n    }\n  }\n\n  sbcUtils.log(\"RESULT OF PARSING STATISTICS DATA (TRUE = PARSED SUCCESSFULLY)\");\n  sbcUtils.log(parsedSubCategories);\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n\n/**\n * Parses the CMB of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                Line content to parse.\n * @param {number} line                       Line number.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nasync function parseCMB(processData, lineContent, line) {\n  let parserCmb = parserMapping.map.statistics.cmb;\n  let cmbRaw = lineContent\n    .match(/CMB\\s+([+-]?(\\d+)?\\s*(\\(.*\\))?;?)/i)[1]\n    .trim()\n    .replace(\";\", \"\");\n\n  let cmb = cmbRaw.match(/^([+-](\\d+)?)/)?.[0] ?? null;\n  processData.flags.hasNoCMB = !cmb;\n  cmb = cmb ?? 0;\n\n  let cmbContext = sbcUtils.parseSubtext(cmbRaw)[1];\n\n  if (!processData.flags.hasNoCMB) processData.characterData.conversionValidation.attributes.cmb = +cmb;\n  if (cmbContext) {\n    const originalCmbContext = cmbContext;\n    let match;\n    const regex = /\\+?(-?\\d+)/g;\n    while ((match = regex.exec(cmbContext)) !== null) {\n      const oldValue = +match[1];\n      const newValue = sbcUtils.prefixNumber(oldValue - +cmb);\n      const matchLength = match[0].length;\n\n      cmbContext = cmbContext.substring(0, match.index) + newValue + cmbContext.substring(match.index + matchLength);\n\n      regex.lastIndex += newValue.length;\n    }\n\n    //processData.characterData.conversionValidation.context.cmb = cmbContext;\n    processData.notes.statistics.cmbContext = \" (\" + originalCmbContext + \")\";\n    processData.miscNotes.cmbNotes = cmbContext ?? \"\";\n  }\n\n  return await parserCmb.parse(+cmb, line);\n}\n\n/**\n * Parses the CMD of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                Line content to parse.\n * @param {number} line                       Line number.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nasync function parseCMD(processData, lineContent, line) {\n  let parserCmd = parserMapping.map.statistics.cmd;\n  let cmdRaw = lineContent\n    .match(/CMD\\s+([+-]?(\\d+)?\\s*(\\(.*\\))?;?)/i)[1]\n    .trim()\n    .replace(\";\", \"\");\n\n  // Check if CMD is \"-\"\n  let cmd = cmdRaw.match(/^[+-]?(\\d+)?/)?.[0] ?? null;\n  processData.flags.hasNoCMD = !cmd;\n  cmd = cmd ?? 0;\n\n  let cmdContext = sbcUtils.parseSubtext(cmdRaw)[1];\n\n  if (!processData.flags.hasNoCMD) processData.characterData.conversionValidation.attributes.cmd = +cmd;\n  if (cmdContext) {\n    const originalCmdContext = cmdContext;\n    let match;\n    const regex = /\\+?(-?\\d+)/g;\n    while ((match = regex.exec(cmdContext)) !== null) {\n      const oldValue = +match[1];\n      const newValue = sbcUtils.prefixNumber(oldValue - +cmd);\n      const matchLength = match[0].length;\n\n      cmdContext = cmdContext.substring(0, match.index) + newValue + cmdContext.substring(match.index + matchLength);\n\n      regex.lastIndex += newValue.length;\n    }\n\n    //processData.characterData.conversionValidation.context.cmd = cmdContext;\n    processData.notes.statistics.cmdContext = \" (\" + originalCmdContext + \")\";\n    processData.miscNotes.cmdNotes = cmdContext ?? \"\";\n  }\n\n  return await parserCmd.parse(+cmd, line);\n}\n\n/**\n * Parses the feats of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                Line content to parse.\n * @param {number} line                       Line number.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nasync function parseFeats(processData, lineContent, line) {\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n\n  let parserFeats = parserMapping.map.statistics.feats;\n  let feats = lineContent\n    .match(/Feats\\b\\s*(.*)/i)[1]\n    .replace(/\\s*[,;]+/g, \",\")\n    .trim();\n\n  const [result, entities] = await parserFeats.parse(feats, line, \"feats\", \"feat\", \"feat\");\n  processData.notes.statistics.feats = entities;\n\n  if (!sbcInstance.settings.getSetting(\"createAssociations\")) {\n    const compendiumOps = sbcInstance.compendiumSearch;\n    const featCount = sbcInstance.actor.getFeatCount().excess;\n    if (featCount > 0) {\n      let searchEntity = {\n        search: sbcUtils.createSearchSet([\"Bonus Feat\", \"Bonus Feats\", \"Bonus Combat Feats\"], true),\n        item: \"Bonus Feats\",\n      };\n\n      let entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n        itemType: \"feat\",\n        itemSubType: \"classFeat\",\n        classes: processData.characterData.classes,\n        race: processData.characterData.race,\n      });\n\n      if (entity) {\n        await sbcUtils.addAssociatedClass(entity, sbcInstance.actor.itemTypes.class);\n\n        await createItem(entity);\n      }\n    }\n  }\n\n  await processFeats(processData);\n  return result;\n}\n\n/**\n * Parses the languages of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                Line content to parse.\n * @param {number} line                       Line number.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nasync function parseLanguages(processData, lineContent, line) {\n  let parserLanguages = parserMapping.map.statistics.languages;\n  let languages = lineContent\n    .match(/Languages\\b\\s*(.*)/i)[1]\n    .replace(/\\s*[,;]+/g, \",\")\n    .trim();\n\n  return await parserLanguages.parse(languages, line);\n}\n\n/**\n * Parses the special qualities of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                Line content to parse.\n * @param {number} line                       Line number.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nasync function parseSQ(processData, lineContent, line) {\n  let parserSQ = parserMapping.map.statistics.sq;\n  let sqs = lineContent\n    .match(/SQ\\b\\s*(.*)/i)[1]\n    .replace(/\\s*[,;]+\\s*/g, \", \")\n    .trim();\n\n  const [result, entities] = await parserSQ.parse(\n    sqs,\n    line,\n    [\"monster-abilities\", \"class-abilities\"],\n    [\"equipment\", \"feat\", \"weapon\"],\n    null,\n    false\n  );\n\n  processData.notes.statistics.sq = entities;\n\n  return result;\n}\n\n/**\n * Parses the gear of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {string} lineContent                Line content to parse.\n * @param {number} line                       Line number.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nasync function parseGear(processData, lineContent, line) {\n  let parserGear = parserMapping.map.statistics.gear;\n  // Combat Gear, Other Gear, Gear\n  let gear = lineContent\n    .replace(/(Combat Gear|Other Gear|Gear)/g, \"\")\n    .replace(/[,;]+/g, \",\")\n    .replace(/[,;]$/, \"\")\n    .trim();\n\n  if (!processData.notes.statistics.gear) {\n    processData.notes.statistics.gear = [];\n  }\n\n  return await parserGear.parse(gear, line);\n}\n\n/**\n * Parses the abilities of the statblock.\n *\n * @param {string} abilityKey                   Key of the ability to parse.\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {number} line                         Line number.\n * @returns {Promise<boolean>}                 `false` if any error is caught.\n */\nasync function parseAbility(abilityKey, processData, line) {\n  let ability = abilityKey.match(/(\\w+)/)[1];\n  let valueInStatblock = abilityKey.match(/(\\d+|-)/)[1];\n\n  // FLAGS NEED TO BE WORKED ON AFTER PARSING IS FINISHED\n  if (valueInStatblock === \"-\" || valueInStatblock === 0 || valueInStatblock === \"0\") {\n    valueInStatblock = 0;\n    let flagKey = \"no\" + ability.capitalize();\n    processData.flags[flagKey] = true;\n  }\n\n  // CHECK CURRENT ITEMS FOR CHANGES IN ABILITIES (MAINLY RACES)\n  // Check the current Items for changes to ablities\n  const abilityChangesInItems = await sbcUtils.getTotalFromChanges(window.SBC.actor, ability);\n  const abilityChangeFromAge = parserMapping.map.base.age.getAbilityChange(ability.toLowerCase());\n\n  let correctedValue = +valueInStatblock - abilityChangesInItems - abilityChangeFromAge;\n\n  processData.characterData.conversionValidation.attributes[ability] = +valueInStatblock;\n  processData.notes.statistics[ability.toLowerCase()] = +valueInStatblock;\n\n  let parser = parserMapping.map.statistics[ability.toLowerCase()];\n  await parser.parse(+correctedValue, line);\n}\n\n/**\n * Checks if the gear is parsed or not.\n *\n * @param {number} line         Current line index.\n * @param {number} dataLength   Length of the data array.\n * @returns {boolean}           `true` if the gear is parsed.\n */\nfunction gearIsParsed(line, dataLength) {\n  if (!hasGear) return true;\n  return gearParsed || line === dataLength - 1;\n}\n\n/**\n * Processes feats to determine weapon focus and weapon specialization.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n */\nasync function processFeats(processData) {\n  let feats = window.SBC.actor.itemTypes.feat.filter((feat) => feat.system.subType === \"feat\");\n\n  for (let feat of feats) {\n    let featName = feat.name.toLowerCase();\n    let featSubtext = sbcUtils.parseSubtext(featName)[1];\n    if (!featSubtext) continue;\n\n    if (/greater weapon focus/.test(featName)) {\n      processData.characterData.weaponFocusGreater.push(featSubtext);\n    } else if (/weapon focus/.test(featName)) {\n      processData.characterData.weaponFocus.push(featSubtext);\n    } else if (/greater weapon specialization/.test(featName)) {\n      processData.characterData.weaponSpecializationGreater.push(featSubtext);\n    } else if (/weapon specialization/.test(featName)) {\n      processData.characterData.weaponSpecialization.push(featSubtext);\n    }\n  }\n\n  sbcUtils.log(\"Weapon Focus\", processData.characterData.weaponFocus);\n  sbcUtils.log(\"Weapon Focus Greater\", processData.characterData.weaponFocusGreater);\n  sbcUtils.log(\"Weapon Specialization\", processData.characterData.weaponSpecialization);\n  sbcUtils.log(\"Weapon Specialization Greater\", processData.characterData.weaponSpecializationGreater);\n}\n\n/**\n * Parses the skills of the statblock.\n * This is done indirectly by sbcParser after the Offense data is processed to have speeds available.\n * This is because the speeds, feats, and items can all affect the the math for skill totals and ranks.\n *\n * @returns {Promise<void>}\n */\nexport async function parseDelayedSkills() {\n  const versatilePerformanceOptions = {\n    act: [\"blf\", \"dis\"],\n    comedy: [\"blf\", \"int\"],\n    dance: [\"acr\", \"fly\"],\n    keyboard: [\"dip\", \"int\"],\n    oratory: [\"blf\", \"sen\"],\n    percussion: [\"han\", \"int\"],\n    sing: [\"blf\", \"sen\"],\n    string: [\"blf\", \"dip\"],\n    wind: [\"dip\", \"han\"],\n  };\n\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n  let parserSkills = parserMapping.map.statistics.skills;\n\n  let skillsList = skills.split(/racial (?:modifiers?|bonus)/i)[0];\n  skillsList = parserSkills.splitText(skillsList);\n\n  for (const vpItem of sbcInstance.actor.itemTypes.feat.filter(\n    (feat) => feat.system.subType === \"classFeat\" && feat.name.match(/Versatile Performance \\(/i)\n  )) {\n    const vpSkillName = sbcUtils.parseSubtext(vpItem.name)[1];\n    const vpSkillOptions = versatilePerformanceOptions[vpSkillName.toLowerCase()];\n    const vpSkill = skillsList.find((s) => s.startsWith(`Perform (${vpSkillName.toLowerCase()}`));\n\n    if (vpSkillOptions && vpSkill) {\n      const vpValue = vpSkill.match(/([+-]?\\d+)/)[1];\n\n      for (const skill of vpSkillOptions) {\n        const skillName = sbcInstance.actor.getSkillInfo(skill).name;\n        const skillFound = skillsList.find((s) => s.startsWith(skillName));\n\n        if (skillFound) {\n          const skillValue = skillFound.match(/([+-]?\\d+)/)[1];\n\n          if (skillValue === vpValue) {\n            parserSkills.versatilePerformanceSkillOverrides[skill] = {\n              name: vpSkillName.toLowerCase(),\n              value: vpValue,\n            };\n          } else {\n            if (parserSkills.versatilePerformanceSkillDisablers[skill]) {\n              parserSkills.versatilePerformanceSkillDisablers[skill].push(vpSkillName);\n            } else {\n              parserSkills.versatilePerformanceSkillDisablers[skill] = [vpSkillName];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  await parserSkills.parse(skills, skillsLine);\n\n  // Update the outsider class skills if necessary\n  if (sbcInstance.app.processData.characterData.isOutsider) {\n    const outsiderItem = sbcInstance.actor.items.get(sbcInstance.app.processData.characterData.outsiderId);\n    if (!outsiderItem) return;\n\n    const updates = {};\n    sbcInstance.app.processData.characterData.outsiderSkills.forEach(\n      (key) => (updates[`system.classSkills.${key}`] = true)\n    );\n\n    await outsiderItem.update(updates);\n  }\n\n  // Update the expert class skills if necessary\n  if (sbcInstance.app.processData.characterData.isExpert) {\n    const expertItem = sbcInstance.actor.items.get(sbcInstance.app.processData.characterData.expertId);\n    if (!expertItem) return;\n\n    const updates = {};\n    sbcInstance.app.processData.characterData.expertSkills.forEach(\n      (key) => (updates[`system.classSkills.${key}`] = true)\n    );\n\n    await expertItem.update(updates);\n  }\n\n  // Disable unnecessary Versatile Performance skills if RB is active\n  const vp_disable_prf = {};\n  for (const skill of Object.keys(parserSkills.versatilePerformanceSkillDisablers)) {\n    for (const vpName of parserSkills.versatilePerformanceSkillDisablers[skill]) {\n      const vpKey = sbcInstance.actor.allSkills\n        .find((s) => sbcInstance.actor.getSkillInfo(s).name === vpName)\n        ?.replace(\"prf.\", \"\");\n      if (vpKey) {\n        vp_disable_prf[`${vpKey}_${skill}`] = true;\n      }\n    }\n  }\n\n  if (Object.keys(vp_disable_prf).length > 0) {\n    await sbcInstance.actor.setFlag(sbcInstance.rollBonusOps.flagKey, \"vp_disable_prf\", vp_disable_prf);\n  }\n}\n",
    "import { sbcUtils } from \"../sbcUtils.js\";\nimport { sbcError } from \"../sbcError.js\";\nimport { parserMapping } from \"../Parsers/parser-mapping.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"../sbcTypes.js\";\n\n/* ------------------------------------ */\n/* Parser for tactics data              */\n/* ------------------------------------ */\n/**\n * Parses the ecology data of the statblock.\n *\n * @param {sbcTypes.ProcessData} processData  Process data object.\n * @param {Array.<string>} data               Array of separated data.\n * @param {number} startLine                  Index from where base part starts.\n * @returns {Promise<boolean>}               `false` if any error is caught.\n */\nexport async function parseTactics(processData, data, startLine) {\n  window.SBC.settings.getSetting(\"debug\") &&\n    console.groupCollapsed(\n      \"sbc-pf1 | \" + processData.parsedCategories + \"/\" + processData.foundCategories + \" >> PARSING TACTICS DATA\"\n    );\n\n  const parsedSubCategories = [];\n  processData.notes[\"tactics\"] = {\n    hasTactics: true,\n  };\n\n  const parserTactics = parserMapping.map.tactics;\n\n  // Loop through the lines\n  for (let line = 0; line < data.length; line++) {\n    try {\n      const lineContent = data[line];\n\n      // Parse Before Combat\n      if (!parsedSubCategories[\"beforeCombat\"] && lineContent.match(/Before Combat/i) !== null) {\n        parsedSubCategories[\"beforeCombat\"] = await parseBeforeCombatSection(\n          parserTactics,\n          processData,\n          lineContent,\n          startLine + line\n        );\n      }\n\n      // Parse During Combat\n      if (!parsedSubCategories[\"duringCombat\"] && lineContent.match(/During Combat/i) !== null) {\n        parsedSubCategories[\"duringCombat\"] = await parseDuringCombatSection(\n          parserTactics,\n          processData,\n          lineContent,\n          startLine + line\n        );\n      }\n\n      // Parse Morale\n      if (!parsedSubCategories[\"morale\"] && lineContent.match(/^Morale/i) !== null) {\n        parsedSubCategories[\"morale\"] = await parseMoraleSection(\n          parserTactics,\n          processData,\n          lineContent,\n          startLine + line\n        );\n      }\n\n      // Parse Base Statistics\n      if (!parsedSubCategories[\"baseStatistics\"] && lineContent.match(/^Base Statistics/i) !== null) {\n        parsedSubCategories[\"baseStatistics\"] = await parseBaseStatisticsSection(\n          parserTactics,\n          processData,\n          lineContent,\n          startLine + line\n        );\n      }\n    } catch (err) {\n      window.SBC.settings.getSetting(\"debug\") && console.error(err);\n      const errorMessage = `Parsing the tactics data failed at line ${startLine + line + 1} (non-critical)`;\n      const error = new sbcError(sbcError.ERRORLEVELS.WARNING, \"Parse/Tactics\", errorMessage, line + startLine);\n      processData.errors.push(error);\n\n      window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n      return false;\n    }\n  }\n\n  sbcUtils.log(\"RESULT OF PARSING TACTICS DATA (TRUE = PARSED SUCCESSFULLY)\");\n  sbcUtils.log(parsedSubCategories);\n  window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n\n  return true;\n}\n\n/**\n * Parses the Before Combat section of the statblock.\n *\n * @param {TacticsParser} parserTactics         Tactics parser\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Line content\n * @param {number} line                         Line number\n * @returns {Promise<boolean>}                  `true` if successful, `false` otherwise.\n */\nasync function parseBeforeCombatSection(parserTactics, processData, lineContent, line) {\n  const beforeCombat = {\n    name: \"Before Combat\",\n    entry: lineContent.match(/^(?:Before Combat)([\\s\\S]*?)(?=$|During Combat|Morale|Base Statistics)/i)[1],\n  };\n\n  processData.notes.tactics.beforeCombat = beforeCombat.entry;\n  return await parserTactics.parse(beforeCombat, line);\n}\n\n/**\n * Parses the During Combat section of the statblock.\n *\n * @param {import(\"../Parsers/Misc/tactics-parser.js\").default} parserTactics         Tactics parser\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Line content\n * @param {number} line                         Line number\n * @returns {Promise<boolean>}                  `true` if successful, `false` otherwise.\n */\nasync function parseDuringCombatSection(parserTactics, processData, lineContent, line) {\n  const duringCombat = {\n    name: \"During Combat\",\n    entry: lineContent.match(/^(?:During Combat)([\\s\\S]*?)(?=$|Morale|Base Statistics)/i)[1],\n  };\n\n  processData.notes.tactics.duringCombat = duringCombat.entry;\n  return await parserTactics.parse(duringCombat, line);\n}\n\n/**\n * Parses the Morale section of the statblock.\n *\n * @param {import(\"../Parsers/Misc/tactics-parser.js\").default} parserTactics         Tactics parser\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Line content\n * @param {number} line                         Line number\n * @returns {Promise<boolean>}                  `true` if successful, `false` otherwise.\n */\nasync function parseMoraleSection(parserTactics, processData, lineContent, line) {\n  const morale = {\n    name: \"Morale\",\n    entry: lineContent.match(/^(?:Morale)([\\s\\S]*?)(?=$|Base Statistics)/i)[1],\n  };\n\n  processData.notes.tactics.morale = morale.entry;\n  return await parserTactics.parse(morale, line);\n}\n\n/**\n * Parses the Base Statistics section of the statblock.\n *\n * @param {import(\"../Parsers/Misc/tactics-parser.js\").default} parserTactics         Tactics parser\n * @param {sbcTypes.ProcessData} processData    Process data object.\n * @param {string} lineContent                  Line content\n * @param {number} line                         Line number\n * @returns {Promise<boolean>}                  `true` if successful, `false` otherwise.\n */\nasync function parseBaseStatisticsSection(parserTactics, processData, lineContent, line) {\n  const baseStatistics = {\n    name: \"Base Statistics\",\n    entry: lineContent.match(/^(?:Base Statistics)([\\s\\S]*?)$/i)[1],\n  };\n\n  processData.notes.tactics.baseStatistics = baseStatistics.entry;\n  return await parserTactics.parse(baseStatistics, line);\n}\n",
    "import { sbcUtils } from \"./sbcUtils.js\";\nimport { sbcError } from \"./sbcError.js\";\nimport { parserMapping } from \"./Parsers/parser-mapping.js\";\nimport { sbcValidation } from \"./sbcValidation.js\";\nimport { Metamagic } from \"./Content/index.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\nimport { parseBase, parseAuras } from \"./Process/base-data.js\";\nimport { parseDefense } from \"./Process/defense-data.js\";\nimport { parseDescription } from \"./Process/description-data.js\";\nimport { parseEcology } from \"./Process/ecology-data.js\";\nimport { parseOffense } from \"./Process/offense-data.js\";\nimport { parseSpecialAbilities } from \"./Process/special-ability-data.js\";\nimport { parseStatistics, parseDelayedSkills } from \"./Process/statistics-data.js\";\nimport { parseTactics } from \"./Process/tactics-data.js\";\nimport { SimpleParser } from \"./Parsers/Universal/index.js\";\n\n/* ------------------------------------ */\n/* sbcParser    \t\t\t\t\t\t            */\n/* ------------------------------------ */\n\nexport class sbcParser {\n  /* ------------------------------------ */\n  /* Prepare the input                    */\n  /* ------------------------------------ */\n\n  /**\n   * Modifies the Statblock input in order to have it as an array per line break.\n   *\n   * @param {sbcTypes.ProcessData} processData The processed data to be prepared.\n   */\n  static async prepareInput(processData) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    sbcInstance.isImporting = true;\n    window.SBC.settings.getSetting(\"debug\") && console.group(\"sbc-pf1 | PREPARING INPUT\");\n    if (processData.input.text === \"\") {\n      processData.errors.push(new sbcError(sbcError.ERRORLEVELS.FATAL, \"Prepare\", \"Given input is empty.\"));\n\n      throw \"Given input is empty.\";\n    }\n\n    try {\n      // Check if David's \"Roll Bonuses PF1\" module is installed and active\n      if (game.modules.get(\"roll-bonuses-pf1\")?.active) {\n        sbcUtils.log(\"Roll Bonuses PF1 module is active\");\n        processData.flags[\"rollBonusesPF1\"] = true;\n      }\n\n      // Initial Clean-up of input\n      $(\"#sbcProgressBar\").css(\"width\", \"5%\");\n\n      const sourceScrubbing = new RegExp(\"(\" + sbcInstance.config.sources.join(\"\\\\b|\") + \")\", \"gm\");\n      // Replace different dash-glyphs with the minus-glyph\n      processData.input.prepared.data = processData.input.text\n        .replace(/[–—−]/gm, \"-\")\n        // Remove weird multiplication signs\n        .replaceAll(\"×\", \"x\")\n        // Remove double commas\n        .replace(/,+/gm, \",\")\n        // Replace real fractions with readable characters (½ ⅓ ¼ ⅕ ⅙ ⅛)\n        .replaceAll(\"½\", \"1/2\")\n        .replaceAll(\"⅓\", \"1/3\")\n        .replaceAll(\"¼\", \"1/4\")\n        .replaceAll(\"⅕\", \"1/5\")\n        .replaceAll(\"⅙\", \"1/6\")\n        .replaceAll(\"⅛\", \"1/8\")\n        // Remove Source Superscript (e.g. ^APG, ^UE)\n        .replace(sourceScrubbing, \"\")\n        // Remove Bestiary Source Superscript (e.g. ^B)\n        .replace(/([a-z])B\\b/gm, \"$1\")\n        // Remove Mythic and Mythic Adventures superscript (\"M, MA\")\n        .replace(/([a-z])M\\b,\\s*MA/gm, \"$1M\")\n\n        // Fix quotes\n        // eslint-disable-next-line quotes\n        .replaceAll(\"“\", '\"')\n        // eslint-disable-next-line quotes\n        .replaceAll(\"”\", '\"')\n        .replaceAll(\"‘\", \"'\")\n        .replaceAll(\"’\", \"'\")\n\n        // Replace ligatures\n        .replaceAll(\"ﬂ\", \"fl\")\n        .replaceAll(\"ﬁ\", \"fi\")\n        .replaceAll(\"ﬀ\", \"ff\")\n        .replaceAll(\"ﬃ\", \"ffi\")\n        .replaceAll(\"ﬄ\", \"ffl\")\n        .replaceAll(\"ﬆ\", \"st\")\n\n        // Remove lines that only consist of 20 dashes (Hero Lab Online)\n        .replace(/^-{20}$/gm, \"\")\n\n        // Fix miscellaneous formattings\n        .replace(/\\*, (D,?)/g, \"$1\")\n\n        // Separate the input into separate lines and put them into an array,\n        // so that we can place highlights on specific lines when for\n        // example an error occurs\n\n        .split(/\\n/g);\n\n      // Process each line for a line starter.\n      // If a line starter isn't found, then it's a continuation of the previous line.\n      // If a line starter is found, then it's a new line.\n      sbcUtils.log(\"Before: \", processData.input.prepared.data);\n      let result = [];\n      const lineCategoryPattern = new RegExp(\"^(\" + sbcInstance.config.lineCategories.join(\"|\") + \")\", \"i\");\n      const lineStarterPattern = new RegExp(\"^(\" + sbcInstance.config.lineStarts.join(\"|\") + \")(?!\\\\))\", \"i\");\n\n      processData.input.prepared.data.forEach((line, index) => {\n        // Capitalize the line if it's a category\n        if (lineCategoryPattern.test(line)) {\n          if (line.match(/Offenses|Defenses/i)) {\n            line = line.replace(\"Offenses\", \"Offense\").replace(\"Defenses\", \"Defense\");\n          }\n\n          console.log(line, lineCategoryPattern);\n          line = line.toLowerCase().capitalize();\n        }\n\n        // let caseNum = 0;\n        if (line && sbcInstance.config.lineStarts.some((starter) => line.startsWith(starter))) {\n          // The line starts with a string from the other array, push it as a new line\n          // caseNum = 1;\n          result.push(line);\n        } else if (\n          index > 0 &&\n          lineStarterPattern.test(result[result.length - 1]) &&\n          !lineStarterPattern.test(line) &&\n          !/^Description/i.test(result[result.length - 1])\n        ) {\n          // The line doesn't start with a string from the other array, append it to the last line\n          // caseNum = 2;\n          result[result.length - 1] += \" \" + line;\n        } else {\n          // The first line doesn't start with a string from the other array, push it as a new line\n          // caseNum = 3;\n          result.push(line);\n        }\n      });\n\n      // Move gear in treasure section to statistics\n      let ecologyLine = 0;\n      for (let i = 0; i < result.length; i++) {\n        const currentLine = result[i];\n        if (currentLine.toLowerCase().startsWith(\"ecology\")) {\n          ecologyLine = i;\n          continue;\n        }\n\n        if (\n          ecologyLine &&\n          currentLine.toLowerCase().match(/^Treasure\\s+(?:NPC gear|standard|double|triple)\\s*\\(.*\\)/i)\n        ) {\n          const newGearLine =\n            \"Gear \" +\n            currentLine\n              .replace(/^Treasure\\s+(?:NPC gear|standard|double|triple)\\s*\\((.*?)(?:,\\s+other treasure)?\\)\\s*$/i, \"$1\")\n              .replaceAll(\"[\", \"(\")\n              .replaceAll(\"]\", \")\");\n          result.splice(i, 1);\n          result.splice(ecologyLine, 0, newGearLine);\n          break;\n        }\n      }\n\n      // Filter out lines that start with an asterisk - These are comments to check books\n      result = result.filter((line) => !line.startsWith(\"*\"));\n\n      processData.input.prepared.data = result;\n      sbcUtils.log(\"After: \", processData.input.prepared.data);\n\n      // Check if the input is prepared successfully and set the input field to the prepared data\n      processData.input.prepared.success = true;\n      processData.input.text = processData.input.prepared.data.join(\"\\n\");\n    } catch (errorMessage) {\n      let error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Prepare\", errorMessage);\n      processData.errors.push(error);\n      processData.input.prepared.success = false;\n      throw errorMessage;\n    }\n\n    window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n  }\n\n  /* ------------------------------------ */\n  /* Parse the input                      */\n  /* ------------------------------------ */\n  /**\n   * Parse the input data and create the actor data.\n   *\n   * @param {sbcTypes.ProcessData} processData  The process data object to use for preparing\n   */\n  static async parseInput(processData) {\n    window.SBC.settings.getSetting(\"debug\") && console.group(\"sbc-pf1 | PARSING INPUT\");\n    let characterData = processData.characterData;\n    let text = processData.input.text;\n\n    // Check if there is stuff to parse and a temporary actor to hold the data\n    if (characterData == null || !text) {\n      if (characterData == null)\n        processData.errors.push(new sbcError(sbcError.ERRORLEVELS.FATAL, \"Input\", \"No valid characterData found\"));\n      if (!processData.input.text)\n        processData.errors.push(new sbcError(sbcError.ERRORLEVELS.FATAL, \"Parse\", \"Not enough input found to parse\"));\n\n      processData.input.prepared.success = false;\n    }\n\n    if (processData.input.prepared.success) {\n      const actorType = window.SBC.actor.type;\n      // DO STUFF WITH THE PARSED INPUT\n      // parse the different blocks of content\n      try {\n        sbcParser.updateProgressBar(processData, \"Preparation\", \"Clean-up\");\n        // const availableCategories = Object.keys(parserMapping.map);\n        const availableCategories = parserMapping.map.types[actorType];\n        console.log(availableCategories);\n\n        /* ------------------------------------ */\n        /* The input was prepared and is        */\n        /* currently in the form of an array    */\n        /* which consists of one entry per line */\n        /* ------------------------------------ */\n\n        // Split the input data via the category names of our mapping\n        // base (no keyword, so use everything up to the defense keyword)\n        // defense\n        // offense\n        // tactics\n        // statistics\n        // ecology\n        // special abilities\n        // description\n\n        // Get the index position of our keywords/categories\n        // Bonus, filter for the categories found in the statblock\n        let categoryIndexPositions = {};\n        for (let i = 1; i < availableCategories.length; i++) {\n          const category = availableCategories[i];\n          const categoryPattern = new RegExp(\"^\\\\b\" + category + \"\\\\b\\\\s*(?:\\\\r?\\\\n|$)\", \"i\");\n\n          processData.input.prepared.data.filter(function (item, index) {\n            if (categoryPattern.test(item) && categoryIndexPositions[category] == null) {\n              categoryIndexPositions[category] = index;\n            }\n          });\n        }\n\n        // Check, if any categories could be found\n        let foundCategories = Object.keys(categoryIndexPositions);\n        let foundCategoriesString = foundCategories.join(\", \").capitalize();\n        foundCategories.unshift(\"base\");\n        let parsedCategories = {};\n\n        processData.foundCategories = foundCategories.length;\n        console.log(\"Found Categories: \", foundCategories, foundCategories.length);\n        if (foundCategories.length !== 0) {\n          // Check, if the needed categories are there\n          let neededCategories = parserMapping.getNeededCategories(actorType);\n          let foundAllNeededCategories = neededCategories.length\n            ? neededCategories.every((i) => foundCategories.includes(i))\n            : true;\n\n          if (foundAllNeededCategories) {\n            // Split the input into chunks for the found categories\n            // via the index positions found earlier\n            // and send these chunks off to the correct parser in sbcParsers.js\n\n            /** @type {{string: Array<string>}} */\n            let dataChunks = {\n              base: [],\n              description: [],\n            };\n\n            /** @type {{string: number}} */\n            let startLines = {\n              base: 0,\n              description: 0,\n            };\n\n            if ([\"npc\", \"character\"].includes(actorType)) {\n              dataChunks = foundry.utils.mergeObject(dataChunks, {\n                defense: [],\n                offense: [],\n                statistics: [],\n                tactics: [],\n                ecology: [],\n                specialAbilities: [],\n              });\n\n              startLines = foundry.utils.mergeObject(startLines, {\n                defense: 0,\n                offense: 0,\n                statistics: 0,\n                tactics: 0,\n                ecology: 0,\n                specialAbilities: 0,\n              });\n            }\n\n            let lastLine = 0;\n\n            // put the found data in the dataChunks\n            for (let i = 0; i < foundCategories.length; i++) {\n              let category = foundCategories[i];\n\n              let startLine = lastLine;\n              startLines[category] = startLine;\n              let stopLine = categoryIndexPositions[foundCategories[i + 1]];\n\n              if (i === foundCategories.length - 1) {\n                dataChunks[category] = processData.input.prepared.data.slice(startLine);\n              } else {\n                dataChunks[category] = processData.input.prepared.data.slice(startLine, stopLine);\n              }\n\n              lastLine = stopLine;\n            }\n\n            // Parse the found categories into a proper order for processing\n            let orderedFoundCategories = foundCategories;\n\n            // If we're dealing with NPCs or PCs, rearrange the foundCategories\n            // so that statistics gets parsed before defense and offense, and\n            // specialAbilities gets parsed before statistics, if it exists\n            if ([\"npc\", \"character\"].includes(actorType)) {\n              orderedFoundCategories.splice(foundCategories.indexOf(\"statistics\"), 1);\n              orderedFoundCategories.splice(1, 0, \"statistics\");\n\n              // Rearrange the foundCategories so that Special Abilities get parsed before base data\n              if (foundCategories.includes(\"special abilities\")) {\n                orderedFoundCategories.splice(foundCategories.indexOf(\"special abilities\"), 1);\n                orderedFoundCategories.splice(0, 0, \"special abilities\");\n              }\n            }\n\n            // Now we can parse each category one-by-one\n            for (let i = 0; i < orderedFoundCategories.length; i++) {\n              let category = orderedFoundCategories[i];\n              sbcParser.updateProgressBar(processData, \"Parsing\", category, orderedFoundCategories.length, i + 1);\n              parsedCategories[category] = await sbcParser.parseCategories(\n                processData,\n                category,\n                dataChunks[category],\n                startLines[category]\n              );\n            }\n\n            // Do some necessary post-processing for NPCs and PCs\n            if ([\"npc\", \"character\"].includes(actorType)) {\n              // After parsing all available subCategories, create embedded entities\n              sbcParser.updateProgressBar(processData, \"Buffs\", \"Looking for Auras and Buffs\");\n              await parseAuras();\n              await createBuffs();\n\n              // After parsing all available subCategories, check the flags set on the way\n              sbcParser.updateProgressBar(processData, \"Flags\", \"Checking if Special Flags were set\");\n              await checkFlags(processData);\n\n              // After all that, process the misc notes before we might do validation\n              await processMiscNotes(processData);\n\n              // Process Roll Bonuses where possible\n              await window.SBC.rollBonusOps.processTargets(window.SBC.actor.allItems);\n\n              await sbcValidation.conversionValidation(processData);\n            }\n\n            // Create the notes section composed of the statblock and the raw input\n            sbcParser.updateProgressBar(processData, \"Preview\", \"Generating Preview\");\n            await generateNotesSection(processData);\n\n            // SET THIS TO TRUE WHEN ALL CATEGORIES ARE PARSED SUCCESSFULLY (MORE OR LESS)\n            processData.input.prepared.success = true;\n            sbcParser.updateProgressBar(processData, \"Ready\", \"Actor is ready\");\n          } else {\n            let errorMessage = `Failed to find enough keywords to parse the input.<br>\n                                        Found Keywords: ${foundCategoriesString}<br>\n                                        Needed Keywords: Defense, Offense, Statistics<br>\n                                        Optional Keywords: Special Abilities, Ecology, Tactics, Description`;\n            let error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Parse\", errorMessage);\n            processData.errors.push(error);\n            processData.input.prepared.success = false;\n            sbcParser.updateProgressBar(processData, \"Error\", \"An Error occurred during parsing\");\n          }\n        } else {\n          console.log(\"No categories found\");\n          let errorMessage = `Failed to find any keywords to parse the input.<br>\n                                        Needed Keywords: Defense, Offense, Statistics<br>\n                                        Optional Keywords: Special Abilities, Ecology, Tactics, Description`;\n          let error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Parse\", errorMessage);\n          processData.errors.push(error);\n          processData.input.prepared.success = false;\n          sbcParser.updateProgressBar(processData, \"Error\", \"An Error occurred during parsing\");\n        }\n      } catch (e) {\n        let errorMessage = \"parseInput() failed with an unspecified error. Sorry!\";\n        let error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Parse\", errorMessage);\n        processData.errors.push(error);\n        processData.input.prepared.success = false;\n        sbcParser.updateProgressBar(processData, \"Error\", \"An Error occurred during parsing\");\n        throw e;\n      }\n    } else {\n      let errorMessage = \"parseInput() failed as the input could not be prepared successfully\";\n      let error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Parse\", errorMessage);\n      processData.errors.push(error);\n      processData.input.prepared.success = false;\n      sbcParser.updateProgressBar(processData, \"Error\", \"An Error occurred during parsing\");\n    }\n\n    window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n  }\n\n  /**\n   * Try to find a matching parser for a given category\n   *\n   * @param {sbcTypes.ProcessData} processData The processed data to be prepared.\n   * @param {\"base\"|\"defense\"|\"offense\"|\"statistics\"|\"ecology\"|\"special abilities\"|\"description\"|\"tactics\"} category The part of the statblock we are parsing.\n   * @param {Array.<string>} data Array of separated data contained.\n   * @param {number} startLine Index from where this part of the statblock starts.\n   */\n  static async parseCategories(processData, category, data, startLine) {\n    switch (category) {\n      case \"base\":\n        await parseBase(processData, data, startLine);\n        break;\n\n      case \"defense\":\n        await parseDefense(processData, data, startLine);\n        break;\n\n      case \"offense\":\n        await parseOffense(processData, data, startLine);\n\n        window.SBC.settings.getSetting(\"debug\") && console.groupCollapsed(\"sbc-pf1 | >> PARSING SKILL DATA\");\n        await parseDelayedSkills();\n        window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n        break;\n\n      case \"statistics\":\n        await parseStatistics(processData, data, startLine);\n        break;\n\n      case \"tactics\":\n        await parseTactics(processData, data, startLine);\n        break;\n\n      case \"ecology\":\n        await parseEcology(processData, data, startLine);\n        break;\n\n      case \"special abilities\":\n        await parseSpecialAbilities(processData, data, startLine);\n        break;\n\n      case \"description\":\n        await parseDescription(processData, data, startLine);\n        break;\n\n      default:\n        processData.errors.push(\n          new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse/Categories\", `No Parser found for category: ${category}`)\n        );\n        processData.input.prepared.success = false;\n        return;\n    }\n\n    processData.parsedCategories++;\n  }\n\n  /**\n   * Update the progress bar with the current progress.\n   *\n   * @param {sbcTypes.ProcessData} processData    The processed data to be prepared.\n   * @param {string} process                      The process that is currently running.\n   * @param {string} subProcess                   The sub process that is currently running.\n   * @param {number} total                        The total number of steps to be taken.\n   * @param {number} step                         The current step that is being processed.\n   * @returns {void}\n   */\n  static async updateProgressBar(processData, process = \"\", subProcess = \"\", total = 1, step = 1) {\n    let newWidth = 0;\n    let progressBarText = subProcess;\n    const increment = 100 / total;\n    processData.progressBar.class = process.toLowerCase();\n\n    switch (process.toLowerCase()) {\n      case \"preparation\":\n        newWidth = 10;\n        progressBarText = process + \": \" + subProcess;\n        break;\n\n      case \"parsing\":\n        newWidth = Math.floor(10 + 0.6 * increment * step);\n        progressBarText = process + \": \" + subProcess;\n        break;\n\n      case \"buffs\":\n        newWidth = 90;\n        break;\n\n      case \"flags\":\n        newWidth = 95;\n        break;\n\n      case \"preview\":\n        newWidth = 99;\n        break;\n\n      case \"actor\":\n        newWidth = 100;\n        break;\n\n      case \"error\":\n        newWidth = 100;\n        break;\n\n      default:\n        break;\n    }\n\n    processData.progressBar.width = newWidth;\n    processData.progressBar.text = progressBarText;\n\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    await sbcInstance.app.render();\n  }\n}\n\n/**\n * Convenience helper, tries to parse the number to integer, if it is NaN, will return 0 instead.\n *\n * @param {string} value The value to parse\n * @returns {number} The parsed integer\n */\nexport const parseInteger = (value) => {\n  let p = parseInt(value);\n  return isNaN(p) ? 0 : p;\n};\n\n/**\n * Convenience helper, returns an array with the base text and the sub text if found. Format: base text (sub text)\n *\n * @param {string} value The value to parse\n * @returns {Array<string>} The parsed text\n */\nexport const parseSubtext = (value) => {\n  return sbcUtils.parseSubtext(value);\n};\n\nexport const parseValueToPath = async (obj, path, value) => {\n  const parts = path.split(\".\");\n  let curr = obj;\n  for (let i = 0; i < parts.length - 1; i++) {\n    curr = curr[parts[i]] || {};\n  }\n  curr[parts[parts.length - 1]] = value;\n};\n\n/**\n * Wrapper for {@link Actor#update}.\n *\n * @param {Actor} obj The actor to be updated.\n * @param {string} path Where to perform the update.\n * @param {any} value Value to substitute.\n * @returns {Promise.<Actor>} The update document instance.\n */\nexport const parseValueToDocPath = async (obj, path, value) => {\n  return obj.update({ [path]: value });\n};\n\n/* ------------------------------------ */\n/* Check for flags and parse            */\n/* ------------------------------------ */\n\n// Check if some special flags were set during parsing\n/**\n * Check if some special flags were set during parsing\n *\n * @param {sbcTypes.ProcessData} processData  The process data object.\n * @param {string} flagToProcess              The flag to process.\n * @returns {Promise<void>}\n * @async\n */\nexport async function checkFlags(processData, flagToProcess = \"all\") {\n  sbcUtils.log(\"Flags set during the conversion process\");\n  sbcUtils.log(processData.flags);\n\n  let parsedFlags = [];\n  const flagsToParse = flagToProcess === \"all\" ? Object.keys(processData.flags) : [flagToProcess];\n\n  for (const flag of flagsToParse) {\n    // Fix for set abilities persisting even when flags are reset\n    if (processData.flags[flag]) {\n      let fields = [];\n      let value = null;\n      let supportedTypes = \"string\";\n      let flagNeedsAdditionalParsing = false;\n\n      switch (flag) {\n        case \"isUndead\":\n          // When its an undead, use Cha for HP and Save Calculation\n          fields = [\"system.attributes.hpAbility\", \"system.attributes.savingThrows.fort.ability\"];\n          if (processData.flags[flag] === true) {\n            value = \"cha\";\n          } else {\n            value = \"con\";\n          }\n          flagNeedsAdditionalParsing = true;\n          break;\n\n        case \"noStr\":\n          fields = [\"system.abilities.str.base\", \"system.abilities.str.value\", \"system.abilities.str.total\"];\n          flagNeedsAdditionalParsing = true;\n          value = \"NaN\";\n          break;\n\n        case \"noDex\":\n          fields = [\"system.abilities.dex.base\", \"system.abilities.dex.value\", \"system.abilities.dex.total\"];\n          flagNeedsAdditionalParsing = true;\n          value = \"NaN\";\n          break;\n\n        case \"noCon\":\n          fields = [\"system.abilities.con.base\", \"system.abilities.con.value\", \"system.abilities.con.total\"];\n          flagNeedsAdditionalParsing = true;\n          value = \"NaN\";\n          break;\n\n        case \"noInt\":\n          fields = [\"system.abilities.int.base\", \"system.abilities.int.value\", \"system.abilities.int.total\"];\n          flagNeedsAdditionalParsing = true;\n          value = \"NaN\";\n          break;\n\n        case \"noWis\":\n          fields = [\"system.abilities.wis.base\", \"system.abilities.wis.value\", \"system.abilities.wis.total\"];\n          flagNeedsAdditionalParsing = true;\n          value = \"NaN\";\n          break;\n\n        case \"noCha\":\n          fields = [\"system.abilities.cha.base\", \"system.abilities.cha.value\", \"system.abilities.cha.total\"];\n          flagNeedsAdditionalParsing = true;\n          value = \"NaN\";\n          break;\n\n        default:\n          break;\n      }\n\n      if (flagNeedsAdditionalParsing) {\n        /** @type {sbcTypes.SBC} */\n        const sbcInstance = window.SBC;\n        let parser = new SimpleParser(sbcInstance.app, fields, supportedTypes);\n        parsedFlags[flag] = await parser.parse(value, -1);\n      }\n    }\n  }\n}\n\n/**\n * Migrates the item data and creates the item on the actor\n *\n * @param {Item} itemData               The item data to be created.\n * @returns {Promise<[boolean, Item]>}  Returns a boolean and the created item\n */\nexport async function createItem(itemData) {\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n\n  try {\n    const updateData = pf1.migrations.migrateItemData(itemData.toObject());\n    if (!foundry.utils.isEmpty(updateData)) {\n      await itemData.updateSource(updateData);\n    }\n\n    // Drop supplemental items. If they are required, they will be in the statblock and imported elsewhere\n    await itemData.updateSource({ \"system.links.supplements\": [] });\n\n    const item = await sbcInstance.actor.createEmbeddedDocuments(\"Item\", [itemData.toObject()]);\n    return [true, item[0]];\n  } catch (err) {\n    window.SBC.settings.getSetting(\"debug\") && console.error(err);\n    let errorMessage = `Failed to create embedded item ${itemData.name}.`;\n    let error = new sbcError(sbcError.ERRORLEVELS.ERROR, \"Parse\", errorMessage);\n    sbcInstance.app.processData.errors.push(error);\n    sbcInstance.app.processData.input.prepared.success = false;\n    return [false, null];\n  }\n}\n\n/**\n * Looks through the actor for all items\n * and creates buffs where possible\n *\n * @returns {Promise<void>}\n */\nexport async function createBuffs() {\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n  const compendiumOps = sbcInstance.compendiumSearch;\n  try {\n    window.SBC.settings.getSetting(\"debug\").debug && console.groupCollapsed(\"sbc-pf1 | Finding Buffs\");\n    let items = window.SBC.actor.items.filter((i) => [\"feat\", \"consumable\", \"spell\"].includes(i.type));\n\n    for (let buffableItem of items) {\n      let name = buffableItem.name;\n      let altName = name.replace(/(constant|weekly|monthly|yearly):/gi, \"\").trim();\n      let altName2 = name.replace(/^(?:Potion|Wand) of\\s+/gi, \"\").trim();\n\n      console.log(`Checking ${name}`, buffableItem);\n\n      let searchEntity = {\n        search: new Set([name]),\n        type: \"buff\",\n        item: name,\n      };\n\n      const nameWords = name\n        .split(\" \")\n        .slice(0, 2)\n        .map((o) => o.toLowerCase());\n      const metamagicFeat = Metamagic.find((m) => {\n        const words = m.split(\" \").map((o) => o.toLowerCase());\n        return words.every((word) => nameWords.includes(word));\n      });\n      if (metamagicFeat) {\n        searchEntity.search.add(altName.replace(new RegExp(`${metamagicFeat}`, \"i\"), \"\").trim());\n        searchEntity.search.add(altName2.replace(new RegExp(`${metamagicFeat}`, \"i\"), \"\").trim());\n      } else {\n        searchEntity.search.add(altName);\n        searchEntity.search.add(altName2);\n      }\n\n      let entity = await compendiumOps.findEntityInCompendia(searchEntity, {\n        packs: [\"pf1.commonbuffs\"],\n        itemType: \"buff\",\n        classes: sbcInstance.app.processData.characterData.classes,\n      });\n      if (!entity) entity = game.items.getName(searchEntity.name);\n      if (!entity) entity = game.items.getName(searchEntity.altName);\n\n      if (entity) {\n        console.log(`Found ${name}.`, entity);\n\n        let casterLevel = 0;\n        switch (buffableItem.type) {\n          case \"spell\":\n            {\n              let spellBookKey = buffableItem.system.spellbook;\n              console.log(`Spellbook key for ${name}: ${spellBookKey}`);\n              let spellBook = pf1.utils.deepClone(buffableItem.spellbook);\n              console.log(`Spellbook data for ${name}: `, spellBook, spellBook?.cl);\n              let casterLevel = sbcInstance.actor.system.attributes.spells.spellbooks[spellBookKey]?.cl.total ?? -1;\n              // let casterLevel = buffableItem.casterLevel ?? -1;\n              // let casterLevel = buffableItem.getRollData().cl ?? -1;\n              console.log(`Caster level for ${buffableItem.name}: ${casterLevel}`);\n            }\n            break;\n\n          case \"consumable\":\n            casterLevel = buffableItem.system.cl || 0;\n            break;\n        }\n\n        if (casterLevel > 0) entity.updateSource({ \"system.level\": casterLevel });\n\n        console.log(`Creating buff for ${name}.`);\n        const [_result, buff] = await createItem(entity);\n        // let buff = sbcInstance.actor.itemTypes.buff.find((i) => i.name === entity.name);\n\n        if (/^Constant:/i.test(name)) {\n          await buff.update({ \"system.duration.value\": \"\" });\n          await buff.setActive(true);\n        }\n      }\n    }\n    window.SBC.settings.getSetting(\"debug\") && console.groupEnd();\n  } catch (err) {\n    window.SBC.settings.getSetting(\"debug\") && console.error(err);\n  }\n}\n\n/**\n * Generates the notes section for the actor\n *\n * @param {sbcTypes.ProcessData} processData    The processed data to be prepared.\n * @returns {Promise<void>}\n */\nexport async function generateNotesSection(processData) {\n  let preview = await renderTemplate(\"modules/pf1-statblock-converter/templates/sbcPreview.hbs\", {\n    actor: window.SBC.actor || {},\n    notes: processData.notes,\n    flags: processData.flags,\n  });\n\n  let d = new Date();\n\n  let sbcInfo = await renderTemplate(\"modules/pf1-statblock-converter/templates/sbcNotes.hbs\", {\n    version: window.SBC.config.modData.version,\n    date: d.toLocaleString(game.settings?.get(\"core\", \"language\") || \"en\", {\n      month: \"long\",\n      day: \"numeric\",\n      year: \"numeric\",\n    }),\n    preview: preview,\n    rawInput: processData.input.text,\n  });\n\n  // WRITE EVERYTHING TO THE NOTES\n  await window.SBC.actor?.update({\n    \"system.details.notes.value\": sbcInfo,\n  });\n}\n\n/**\n * Processes the miscellaneous notes\n *\n * @param {sbcTypes.ProcessData} processData  The processed data to be prepared.\n * @returns {Promise<void>}\n */\nexport async function processMiscNotes(processData) {\n  let miscNotes = processData.miscNotes;\n  let actor = window.SBC.actor;\n  let contextNotes = [];\n  let changes = [];\n  let descData = `<p>This feature was created by <strong>SBC</strong> to collect any notes that don't have a source on the actor,\n                such as saving throw details or a bonus to CMD from extra legs. It may also be used to record a natural armor bonus,\n                spell resistance bonus, or spellcasting notes.</p>`;\n  let miscNotesExist = false;\n\n  if (miscNotes.acNotes.length > 0) {\n    miscNotesExist = true;\n    contextNotes.push({\n      target: \"ac\",\n      text: miscNotes.acNotes.join(\", \"),\n    });\n\n    descData += `<p><strong>Armor Class Notes:</strong></p><p>${miscNotes.acNotes.join(\", \")}</p>`;\n  }\n\n  if (miscNotes.srNotes) {\n    miscNotesExist = true;\n    contextNotes.push({\n      target: \"sr\",\n      text: miscNotes.srNotes,\n    });\n\n    descData += `<p><strong>Spell Resistance Notes:</strong></p><p>${miscNotes.srNotes}</p>`;\n  }\n\n  if (miscNotes.cmbNotes) {\n    miscNotesExist = true;\n    contextNotes.push({\n      target: \"cmb\",\n      text: miscNotes.cmbNotes,\n    });\n\n    descData += `<p><strong>CMB Notes:</strong></p><p>${miscNotes.cmbNotes}</p>`;\n  }\n\n  if (miscNotes.cmdNotes) {\n    miscNotesExist = true;\n    contextNotes.push({\n      target: \"cmd\",\n      text: miscNotes.cmdNotes,\n    });\n\n    descData += `<p><strong>CMD Notes:</strong></p><p>${miscNotes.cmdNotes}</p>`;\n  }\n\n  if (miscNotes.saveNotes) {\n    miscNotesExist = true;\n    contextNotes.push({\n      target: \"allSavingThrows\",\n      text: miscNotes.saveNotes,\n    });\n\n    descData += `<p><strong>Saving Throw Notes:</strong></p><p>${miscNotes.saveNotes}</p>`;\n  }\n\n  if (miscNotes.sr > 0) {\n    miscNotesExist = true;\n    changes.push(\n      await new pf1.components.ItemChange({\n        formula: miscNotes.sr.toString(),\n        type: \"untyped\",\n        target: \"spellResist\",\n        value: +miscNotes.sr,\n      }).toObject()\n    );\n  }\n\n  if (miscNotes.naturalAC > 0) {\n    miscNotesExist = true;\n    changes.push(\n      (\n        await new pf1.components.ItemChange({\n          formula: miscNotes.naturalAC.toString(),\n          type: \"untyped\",\n          target: \"nac\",\n          value: +miscNotes.naturalAC,\n        })\n      ).toObject()\n    );\n  }\n\n  if (!miscNotesExist) return;\n\n  await actor.createEmbeddedDocuments(\"Item\", [\n    {\n      name: \"Miscellaneous Notes\",\n      type: \"feat\",\n      system: {\n        changes: changes,\n        contextNotes: contextNotes,\n        description: { value: descData },\n        subType: \"misc\",\n        tag: \"miscellaneousNotes\",\n      },\n      img: \"systems/pf1/icons/skills/yellow_36.jpg\",\n    },\n  ]);\n}\n",
    "// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\nexport class sbcData {\n  /**\n   * Get the default process data\n   *\n   * @returns {sbcTypes.ProcessData} Default process data\n   */\n  static get defaultData() {\n    return {\n      actorReady: false,\n      appData: {},\n      characterData: {\n        conversionValidation: {\n          context: {},\n          attributes: {},\n          skills: {},\n          spellBooks: {},\n        },\n        weaponFocus: [],\n        weaponSpecialization: [],\n        weaponFocusGreater: [],\n        weaponSpecializationGreater: [],\n        classes: [],\n        archetypes: [],\n        race: null,\n        weaponGroups: {},\n        hdMaximized: false,\n        prestigeClassCasting: new Map(),\n        isOutsider: false,\n        outsiderId: null,\n        outsiderSkillPicks: 4,\n        outsiderSkills: [],\n        isExpert: false,\n        expertId: null,\n        expertSkillPicks: 10,\n        expertSkills: [],\n        versatilePerformances: [],\n      },\n      changes: {},\n      errors: [],\n      flags: {\n        hasNoCMB: false,\n        hasNoCMD: false,\n        noStr: false,\n        noDex: false,\n        noCon: false,\n        noInt: false,\n        noWis: false,\n        noCha: false,\n        isUndead: false,\n        isConstruct: false,\n        hasWeaponFinesse: false,\n      },\n      foundCategories: 0,\n      parsedCategories: 1,\n      imported: false,\n      input: {\n        data: [],\n        text: \"\",\n        html: \"\",\n        prepared: {\n          data: [],\n          success: false,\n        },\n        parsedSuccess: false,\n      },\n      miscNotes: {\n        acNotes: [],\n        cmdNotes: \"\",\n        saveNotes: \"\",\n        sr: 0,\n        srNotes: \"\",\n        naturalAC: 0,\n        spellbookNotes: [],\n      },\n      notes: {},\n      treasureParsing: {\n        treasureToParse: \"\",\n        lineToRemove: 0,\n        statisticsStartLine: 0,\n      },\n      progressBar: {\n        class: \"\",\n        text: \"\",\n        width: 0,\n      },\n    };\n  }\n}\n",
    "import { sbcParser } from \"./sbcParser.js\";\nimport { sbcUtils } from \"./sbcUtils.js\";\nimport { sbcData } from \"./sbcData.js\";\nimport { sbcError } from \"./sbcError.js\";\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\n/* ------------------------------------ */\n/* sbcInputDialog                       */\n/* Create a modal dialog with           */\n/* an input, preview and error area.    */\n/* Input is saved in a raw format and   */\n/* sent to sbcParser.js to convert to   */\n/* workable data.                       */\n/* ------------------------------------ */\n\nconst { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;\n\nexport class InputDialog extends HandlebarsApplicationMixin(ApplicationV2) {\n  /**\n   * @param {sbcTypes.AppData} appData  The data for the actor\n   * @param {object} options            Options for the dialog\n   */\n  constructor(appData, options) {\n    super(options);\n\n    this.autoConvert = window.SBC.settings.getSetting(\"autoConvert\");\n\n    /** @type {sbcTypes.ProcessData} */\n    this.processData = foundry.utils.mergeObject(sbcData.defaultData, { appData });\n    if (appData.statblock) {\n      this.processData.input.text = appData.statblock;\n      const app = this;\n      setTimeout(async () => {\n        if (this.autoConvert) await app.checkInput(document.getElementById(\"sbcInput\"));\n      }, window.SBC.settings.getSetting(\"inputDelay\"));\n    }\n  }\n\n  static DEFAULT_OPTIONS = {\n    uniqueId: \"sbcModal\",\n    id: \"sbcModal\",\n    classes: [\"sbcModal\"],\n    position: {\n      width: 1024,\n      height: 768,\n    },\n    window: {\n      title: \"SBCPF1.sbcTitle\",\n      resizable: true,\n    },\n  };\n\n  get title() {\n    return game.i18n.localize(\"SBCPF1.sbcTitle\");\n  }\n\n  static PARTS = {\n    div: {\n      scrollable: [\".sbcInput\", \".sbcHighlights\", \".sbcPreview\"],\n      template: \"modules/pf1-statblock-converter/templates/sbcModal.hbs\",\n    },\n  };\n\n  async close(options) {\n    if (!this.processData.imported && window.SBC.actor?.id) {\n      const actor = game.actors.get(window.SBC.actor.id);\n      await actor?.delete();\n    }\n    window.SBC.app = null;\n\n    super.close(options);\n  }\n\n  /**\n   * @inheritDoc\n   * @protected\n   */\n  async _preparePartContext(partId, context, options) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n\n    let data = await super._preparePartContext(partId, context, options);\n\n    data = foundry.utils.mergeObject(data, {\n      input: this.processData.input.text,\n      actorType: sbcInstance.actorType,\n      choices: {\n        0: \"NPC\",\n        1: \"PC\",\n        // 2: \"Trap\",\n        // 3: \"Haunt\",\n        // 4: \"Vehicle\",\n      },\n      errors: [],\n      errorHighlights: [],\n      preview: \"\",\n      progressBar: {\n        class: this.processData.progressBar.class,\n        ready: this.processData.input?.prepared?.success || false,\n        text: this.processData.progressBar.text,\n        width: this.processData.progressBar.width,\n      },\n      autoConvert: this.autoConvert,\n      badLanguage: game.settings.get(\"core\", \"language\") !== \"en\",\n    });\n\n    // Error Highlights\n    // By default, the entire input is shown without any markings\n    // The marks are added when errors are processed\n    this.processData.input.prepared.data.forEach((line, index) => {\n      data.errorHighlights.push({\n        value: line,\n        messageBefore: \"\",\n        messageAfter: \"\",\n        line: index,\n        marked: false,\n      });\n    });\n\n    // Errors\n    let lastId = 0;\n    let lastMessage = \"\";\n    let duplicates = 0;\n    this.processData.errors.forEach((error, index) => {\n      let message = error.errorLabel;\n      if (error.level === sbcError.ERRORLEVELS.ERROR || error.level === sbcError.ERRORLEVELS.FATAL) {\n        message += ` >> ${error.keyword} failed `;\n      }\n\n      message += ` >> ${error.message}`;\n      if (message !== lastMessage) {\n        lastId = index;\n        lastMessage = message;\n\n        // TODO: This will currently only highlight the last error in each line. Figure something smarter out for this\n        if (error.line !== -1 && error.value) {\n          const lineContent = this.processData.input.prepared.data[error.line];\n          const errorValue = error.value.trim();\n          const [messageBefore, messageAfter] = lineContent.split(errorValue);\n\n          // Set the error highlight\n          data.errorHighlights[error.line] = {\n            value: errorValue,\n            messageBefore: messageBefore,\n            messageAfter: messageAfter,\n            line: error.line,\n            marked: true,\n          };\n        }\n\n        data.errors.push({\n          message: message,\n          duplicates: duplicates,\n        });\n        // TODO: Figure out how to get this to actually work\n        // duplicates = 2;\n      } else {\n        data.errors[lastId].duplicates = duplicates;\n        duplicates++;\n      }\n    });\n\n    // sbcUtils.log(\"> There were \" + data.errors.length + \" issue(s) parsing the provided statblock:\");\n\n    // Preview\n    if (data.progressBar.ready) {\n      data.preview = await renderTemplate(\"modules/pf1-statblock-converter/templates/sbcPreview.hbs\", {\n        actor: window.SBC.actor,\n        notes: this.processData.notes,\n        flags: this.processData.flags,\n      });\n    }\n\n    // Error Highlighting\n    // TBD\n\n    return data;\n  }\n\n  /* ------------------------------------ */\n  /* eventListeners                       */\n  /* ------------------------------------ */\n  /**\n   * @inheritdoc\n   */\n  _onRender(context, options) {\n    super._onRender(context, options);\n\n    let inputArea = this.element.querySelector(\"#sbcInput\");\n    let actorTypeToggles = this.element.querySelectorAll(\".actorTypeToggle\");\n    let app = this;\n\n    /* ------------------------------------ */\n    /* ActorType Toggle                     */\n    /* ------------------------------------ */\n    for (let i = 0; i < actorTypeToggles.length; i++) {\n      actorTypeToggles[i].addEventListener(\"click\", this.toggleActorType.bind(this, inputArea));\n    }\n\n    /* ------------------------------------ */\n    /* Input Area (with delay)              */\n    /* ------------------------------------ */\n    // Get the input from the textArea\n    // delayed by inputDelay so not every keystroke results in a previewGeneration\n    inputArea.addEventListener(\n      \"keyup\",\n      _debounce(async () => {\n        if (app.autoConvert) await app.checkInput(inputArea);\n      }, window.SBC.settings.getSetting(\"inputDelay\"))\n    );\n\n    // Link the scroll event to the backdrop of the highlights\n    inputArea.addEventListener(\"scroll\", this.syncScrolls.bind(this));\n\n    // Handle the Auto Convert toggle\n    const autoConvertToggle = this.element.querySelector(\"#sbcAutoConvertToggle\");\n    autoConvertToggle.addEventListener(\"click\", async (ev) => {\n      const checked = ev.target.checked;\n      app.autoConvert = checked;\n      sbcUtils.log(`Auto Convert is now ${checked ? \"enabled\" : \"disabled\"}`);\n      if (checked) await app.checkInput(inputArea);\n      else await app.render(true);\n    });\n\n    const sbcConvertButton = this.element.querySelector(\"#sbcConvertButton\");\n    sbcConvertButton.addEventListener(\"click\", async () => {\n      const inputArea = document.getElementById(\"sbcInput\");\n      await app.checkInput(inputArea);\n    });\n\n    /* ------------------------------------ */\n    /* Import Button                        */\n    /* ------------------------------------ */\n    // Get the input from the textArea when sbcImportButton is clicked\n    const sbcImportButton = this.element.querySelector(\"#sbcImportButton\");\n    sbcImportButton.addEventListener(\"click\", this.import.bind(this));\n\n    // Reset everything\n    const sbcResetButton = this.element.querySelector(\"#sbcResetButton\");\n    sbcResetButton.addEventListener(\"click\", this.resetSBC.bind(this));\n  }\n\n  /**\n   * Sync the scroll position of the input area with the highlights area\n   *\n   * @param {Event} _ev  The event that triggered the function\n   * @returns {void}\n   */\n  syncScrolls(_ev) {\n    let inputArea = document.getElementById(\"sbcInput\");\n    let backdrop = document.getElementById(\"sbcBackdrop\");\n\n    backdrop.scrollTop = inputArea.scrollTop;\n  }\n\n  /**\n   * Switch between actor types\n   *\n   * @param {HTMLElement} inputArea   The input area element\n   * @param {Event} ev                The event that triggered the function\n   */\n  async toggleActorType(inputArea, ev) {\n    /** @type {sbcTypes.ConfigData} */\n    let config = window.SBC.config;\n    // When the actorTypeToggle is clicked, check if there i input and try to generate an updated preview\n    sbcUtils.log(\n      `Switching between ${config.const.actorType[window.SBC.actorType]} and ${\n        config.const.actorType[+ev.target.value]\n      } actor type.`\n    );\n\n    // Toggle the actor type and recreate the actor\n    window.SBC.actorType = ev.target.value;\n    window.SBC.configInitialized = false;\n    window.SBC.actor = await sbcUtils.reinitActor(window.SBC.actor);\n\n    // Cache the input and reset our data, then reassign the input\n    let text = this.processData.input.text;\n    const appData = this.processData.appData;\n    this.processData = foundry.utils.mergeObject(sbcData.defaultData, { appData });\n    this.processData.input.text = text;\n\n    // Now tell the input element to reparse the input\n    inputArea.value = text;\n    window.SBC.configInitialized = true;\n    inputArea.dispatchEvent(new Event(\"keyup\"));\n  }\n\n  /**\n   * Check the input and try to parse it\n   *\n   * @param {HTMLElement} inputArea  The input area element\n   * @returns {Promise<void>}\n   */\n  async checkInput(inputArea) {\n    if (!window.SBC.configInitialized) return;\n    if (window.SBC.isImporting) return;\n\n    // Reset the data and reassign the input\n    const appData = this.processData.appData;\n    this.processData = foundry.utils.mergeObject(sbcData.defaultData, { appData });\n    this.processData.input.text = inputArea.value.trim();\n\n    // Recreate a fresh actor\n    window.SBC.actor = await sbcUtils.reinitActor(window.SBC.actor);\n\n    // Check, if there is an input and try to parse that\n    if (this.processData.input.text) {\n      this.processData.actorReady = false;\n      // Prepare and parse the input\n      try {\n        await sbcParser.prepareInput(this.processData);\n      } catch (error) {\n        console.error(error);\n      }\n\n      try {\n        await sbcParser.parseInput(this.processData);\n      } catch (error) {\n        inputArea.value = this.processData.input.prepared.data.join(\"\\n\");\n        window.SBC.isImporting = false;\n        await this.render();\n      }\n      inputArea.value = this.processData.input.prepared.data.join(\"\\n\");\n      // if the input could successly be parsed, generate a new preview\n      if (this.processData.input.prepared.success) {\n        window.SBC.isImporting = false;\n        this.processData.actorReady = true;\n        Hooks.callAll(\"sbc.inputParsed\");\n        await this.render();\n      } else {\n        window.SBC.isImporting = false;\n        // The input could not be parsed, show the errors\n        console.error(\"Could not parse the input\");\n        let error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Parse\", \"Could not parse the input\");\n        this.processData.errors.push(error);\n        await this.render();\n      }\n    } else {\n      // There is no input to generate a preview from, reset sbc\n      await this.render();\n    }\n  }\n\n  /**\n   * Import the parsed data\n   *\n   * @returns {Promise<void>}\n   */\n  async import() {\n    if (window.SBC.isImporting) return;\n\n    console.log(\"Importing...\");\n    sbcUtils.log(\"Finished parsing. Importing...\");\n\n    if (!this.processData.input.text) {\n      // If there is no Input\n      const error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Input\", \"No Input found\");\n      this.processData.errors.push(error);\n    } else if (!this.processData.actorReady) {\n      // If the input could not be parsed correctly\n      const error = new sbcError(sbcError.ERRORLEVELS.FATAL, \"Import\", \"Could not create an Actor\");\n      this.processData.errors.push(error);\n    } else {\n      // Create a permanent actor using the data from the temporary one\n      const actorData = window.SBC.actor.toObject();\n      let actorUpdates = pf1.migrations.migrateActorData(actorData, null, { actor: window.SBC.actor });\n\n      // Make sure the actor will be in the correct folder\n      actorUpdates.folder = window.SBC.folderId;\n\n      // Fix health if it's off from max after all that.\n      // Needs to be done here with real actor since the temporary misbehaves with health.\n      const hp = window.SBC.actor.system.attributes.hp;\n      if (hp.value !== hp.max) {\n        actorUpdates = foundry.utils.mergeObject(actorUpdates, {\n          attributes: {\n            hp: {\n              value: hp.max,\n            },\n          },\n        });\n      }\n\n      // Alpha-sort each category of items on the actor\n      let itemUpdates = [];\n      for (const items of Object.values(window.SBC.actor.itemTypes)) {\n        itemUpdates = itemUpdates.concat(\n          items.sort((a, b) => a.name.localeCompare(b.name)).map((i, x) => ({ _id: i.id, sort: 112500 + x * 15 }))\n        );\n      }\n      await window.SBC.actor.updateEmbeddedDocuments(\"Item\", itemUpdates);\n\n      // Update the actor\n      await window.SBC.actor.update(actorUpdates);\n\n      // Make the actor rest so we can recharge things\n      await window.SBC.actor.performRest({ restoreHealth: false });\n\n      this.processData.imported = true;\n      await this.close();\n      return;\n    }\n\n    this.render(true);\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  async resetSBC() {\n    const appData = this.processData.appData;\n    this.processData = foundry.utils.mergeObject(sbcData.defaultData, { appData });\n\n    window.SBC.actor = await sbcUtils.reinitActor(window.SBC.actor);\n    this.render(true);\n  }\n}\n\n/* ------------------------------------ */\n/* Input Delay                          */\n/* ------------------------------------ */\n/**\n * Debounce function to delay the input\n *\n * @param {Function} callback   The function to call after the delay\n * @param {number} wait         The delay in ms\n * @returns {Function}          The debounced function\n */\nfunction _debounce(callback, wait) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      callback.apply(this, args);\n    }, wait);\n  };\n}\n",
    "import { InputDialog } from \"./sbcInput.js\";\nimport { parserMapping } from \"./Parsers/parser-mapping.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport { escapeForRegex, goldRegex } from \"./sbcRegex.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\n/**\n * Utility functions for the Statblock Converter.\n */\nexport class sbcUtils {\n  /**\n   * Creates a temporary actor for the conversion process.\n   * This actor is stored in a hidden WIP folder until they are either imported or the window is closed.\n   *\n   * @returns {Promise<StoredDocument<Actor>|undefined>}  The temporary actor\n   */\n  static async createActor() {\n    let tempActor = await Actor.create({\n      name: \"sbc | Actor Template\",\n      type: window.SBC.config.const.actorType[window.SBC.actorType],\n      folder: window.SBC.wipFolderId,\n    });\n\n    await this.setTokenData(tempActor);\n    return tempActor;\n  }\n\n  /* ------------------------------------ */\n  /* Resetting and Updating               */\n\n  /* ------------------------------------ */\n  /**\n   * Re-initializes the actor for the conversion process.\n   *\n   * @param {Actor} actor      The actor to reinitialize\n   * @returns {Promise<Actor>} The reinitialized actor\n   */\n  static async reinitActor(actor) {\n    if (actor) {\n      const actorCheck = game.actors.get(actor.id);\n      if (actorCheck) {\n        sbcUtils.log(`Deleting actor ${actor.name} with ID ${actor.id}.`, undefined, \"info\");\n        await actor.delete();\n      }\n    }\n    // while (game.actors.getName(\"sbc | Actor Template\")) {\n    //     await game.actors.getName(\"sbc | Actor Template\").delete();\n    // }\n\n    const newActor = await sbcUtils.createActor();\n    return newActor;\n  }\n\n  /**\n   *  Sets up the prototype token with the SBC settings.\n   *\n   * @param {Actor} actor                 The actor to set the token data for\n   * @returns {Promise<Actor|undefined>}  The updated actor or undefined if the actor is not found\n   */\n  static async setTokenData(actor) {\n    let label = actor.type === \"character\" ? \"pc\" : \"npc\";\n    return await actor.update({\n      prototypeToken: {\n        displayName: window.SBC.settings.getSetting(\"displayName\"),\n        sight: {\n          enabled: window.SBC.settings.getSetting(`${label}sight`),\n        },\n        disposition: window.SBC.settings.getSetting(\"disposition\"),\n        displayBars: window.SBC.settings.getSetting(\"displayBars\"),\n        bar1: window.SBC.settings.getSetting(\"attributeBar1\"),\n        bar2: window.SBC.settings.getSetting(\"attributeBar2\"),\n        brightSight: 0,\n      },\n    });\n  }\n\n  /**\n   * Log to the console and errorArea\n   *\n   * @param {any} message Output to the console.\n   * @param {any} [data=null] See {@link https://developer.mozilla.org/en-US/docs/Web/API/console/debug_static#parameters console.debug}\n   * @param {\"debug\"|\"error\"|\"info\"|\"log\"|\"warn\"} [outputFunc=\"debug\"] The log level by log func call (default \"debug\").\n   *\n   * @todo The params should be an object in order to be able to destructure and avoid 'undefined' placeholder.\n   */\n  static log(message, data = null, outputFunc = \"debug\") {\n    const logFunc = console[outputFunc];\n\n    // Skipping debug log when debug is off\n    if (logFunc === \"debug\" && !window.SBC.settings.getSetting(\"debug\")) {\n      return;\n    }\n\n    // Attach triggering line to the log\n    const stack = \"\\n\" + new Error().stack.split(\"\\n\").slice(2, 3).join(\"\\n\");\n    if (data) logFunc(\"sbc-pf1 | \" + message, data, stack);\n    else logFunc(\"sbc-pf1 | \" + message, stack);\n  }\n\n  /**\n   * Generate a placeholder entity for the given input.\n   *\n   * @param {sbcTypes.PlaceholderEntityData} input    The input to generate a placeholder entity for\n   * @param {number} [_line=-1]                       The line in the statblock the entity was found\n   * @returns {Promise<Item>}                         The generated placeholder entity\n   */\n  static async generatePlaceholderEntity(input, _line = -1) {\n    // If the input is NOT found in any of the given compendiums, create a placeholder\n\n    let entityData = {\n      name: input.name ? input.name : input.item ? input.item : \"undefined\",\n      type: input.type ? input.type : null,\n      changes: input.changes || [],\n\n      // Creature-related\n      creatureTypes: input.creatureTypes ? input.creatureTypes : [],\n      creatureSubtypes: input.creatureSubtypes ? input.creatureSubtypes : [],\n      img: input.img ? input.img : \"systems/pf1/icons/skills/yellow_36.jpg\",\n      size: input.size ? input.size : \"med\",\n      sources: input.sources ? input.sources : [],\n\n      // Gear-related\n      subtext: input.subtext ? input.subtext : null,\n      currency: input.currency ? input.currency : null,\n      price: input.price || 0,\n      enhancement: input.enhancement ? input.enhancement : null,\n      mwk: input.mwk ? input.mwk : null,\n      quantity: input.quantity ? input.quantity : null,\n\n      // Class-related\n      wizardClass: input.wizardClass ? input.wizardClass : null,\n      suffix: input.suffix ? input.suffix : null,\n      archetype: input.archetype ? input.archetype : null,\n      level: input.level ? input.level : null,\n\n      // Ability-related\n      specialAbilityType: input.specialAbilityType ? input.specialAbilityType : \"na\",\n      desc: input.desc ? input.desc : \"sbc | Placeholder\",\n\n      // Spell-related\n      // WIP\n    };\n\n    /**\n     * @type {Item}\n     */\n    let entity = null;\n\n    switch (input.type) {\n      case \"container\":\n        entity = new Item.implementation({\n          name: entityData.name,\n          type: \"container\",\n          system: {\n            description: {\n              value: \"sbc | All currency carried was put into this container.\",\n            },\n            currency: {\n              pp: entityData.currency.pp,\n              gp: entityData.currency.gp,\n              sp: entityData.currency.sp,\n              cp: entityData.currency.cp,\n            },\n            weightReduction: 100,\n          },\n          img: \"systems/pf1/icons/items/inventory/pouch-sealed.jpg\",\n        });\n        break;\n\n      case \"feat\":\n      case \"feats\":\n        entity = new Item.implementation({\n          name: entityData.name.capitalize(),\n          type: \"feat\",\n          system: {\n            description: {\n              value:\n                \"sbc | As \" + entityData.name + \" could not be found in any compendium, a placeholder was generated.\",\n            },\n          },\n          img: entityData.img,\n        });\n        break;\n\n      case \"race\":\n        entity = new Item.implementation({\n          name: entityData.name.capitalize(),\n          type: \"race\",\n          system: {\n            creatureTypes: entityData.creatureTypes,\n            description: {\n              value: entityData.desc || \"sbc | As no playable race was found a placeholder was generated.\",\n            },\n            size: entityData.size,\n            creatureSubtypes: entityData.creatureSubtypes,\n            sources: entityData.sources,\n          },\n          img: entityData.img,\n        });\n        break;\n\n      case \"misc\":\n        entity = new Item.implementation({\n          name: entityData.name.capitalize(),\n          type: \"feat\",\n          system: {\n            abilityType: entityData.specialAbilityType,\n            description: {\n              value: entityData.desc,\n            },\n            changes: entityData.changes,\n            subType: \"misc\",\n          },\n          img: entityData.img,\n        });\n        break;\n\n      case \"attack\":\n        entity = new Item.implementation({\n          name: entityData.name.capitalize(),\n          type: \"attack\",\n          system: {\n            description: {\n              value: entityData.desc,\n            },\n            subType: \"misc\",\n          },\n          img: entityData.img,\n        });\n        break;\n\n      case \"classFeat\":\n      case \"class-abilities\":\n        if (entityData.specialAbilityType !== null) {\n          entity = new Item.implementation({\n            name: entityData.name.capitalize(),\n            type: \"feat\",\n            system: {\n              abilityType: entityData.specialAbilityType,\n              description: {\n                value: entityData.desc,\n              },\n              subType: \"classFeat\",\n            },\n            img: entityData.img,\n          });\n        } else {\n          entity = new Item.implementation({\n            name: entityData.name.capitalize(),\n            type: \"feat\",\n            system: {\n              abilityType: \"\",\n              description: {\n                value: entityData.desc,\n              },\n              subType: \"classFeat\",\n            },\n            img: entityData.img,\n          });\n        }\n        break;\n\n      case \"domains\":\n      case \"mysteries\":\n      case \"oppositions\":\n      case \"spirits\":\n      case \"bloodlines\":\n      case \"patrons\":\n      case \"thassilonianSpecialist\":\n      case \"inquisition\":\n        entity = new Item.implementation({\n          name: entityData.name.capitalize(),\n          type: \"feat\",\n          system: {\n            description: {\n              value: \"sbc | As there is no dedicated field for \" + entityData.type + \", this placeholder was created.\",\n            },\n            subType: \"classFeat\",\n          },\n          img: entityData.img,\n        });\n        break;\n\n      case \"loot\": {\n        entity = new Item.implementation({\n          name: entityData.quantity > 1 ? this.singularize(entityData.name) : entityData.name,\n          type: entityData.type,\n          system: {\n            quantity: entityData.quantity,\n            value: entityData.value,\n            price: entityData.price,\n            description: {\n              value:\n                \"sbc | As \" + entityData.name + \" could not be found in any compendium, a placeholder was generated.\",\n            },\n          },\n          img: entityData.img,\n        });\n        break;\n      }\n\n      default:\n        entity = new Item.implementation({\n          name: entityData.name.capitalize(),\n          type: entityData.type,\n          system: {\n            description: {\n              value:\n                \"sbc | As \" + entityData.name + \" could not be found in any compendium, a placeholder was generated.\",\n            },\n          },\n          img: entityData.img,\n        });\n        break;\n    }\n\n    return entity;\n  }\n\n  /* ------------------------------------ */\n  /* Workers                              */\n\n  /* ------------------------------------ */\n\n  /**\n   * Removes the `content` from the `line` and returns the cleaned line.\n   *\n   * @param {string} content  The content to remove from the line\n   * @param {string} line     The line to clean\n   * @returns {string}        The cleaned line\n   */\n  static cleanLine(content, line) {\n    return line.replace(content, \"\").trim();\n  }\n\n  /**\n   * Find first needle occurrence in haystack. Needles ordered longest to shortest\n   *\n   * @param {Array<string>} needles  The array to search in\n   * @param {string} haystack        The string to search for\n   * @returns {string|null}          The found element, or null if none found\n   */\n  static haystackSearch(needles, haystack) {\n    if (!haystack) {\n      return null;\n    }\n\n    needles = needles.sort((a, b) => b.length - a.length);\n    haystack = haystack.toLowerCase();\n    for (const needle of needles) {\n      if (haystack.includes(needle.toLowerCase())) {\n        return needle;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find first needle occurrence in haystack. Needles ordered longest to shortest\n   *\n   * @param {Array<string>} needles  The array to search in\n   * @param {string} haystack        The string to search for\n   * @returns {string|null}          The found element, or null if none found\n   */\n  static haystackRegexSearch(needles, haystack) {\n    if (!haystack) {\n      return null;\n    }\n\n    needles = needles.sort((a, b) => b.length - a.length);\n    haystack = haystack.toLowerCase();\n    for (const needle of needles) {\n      if (haystack.match(new RegExp(needle, \"i\")) !== null) {\n        console.log(needle);\n        return needle;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find all needle matches in haystack\n   *\n   * @param {Array<string>} needles   The array of strings to search for\n   * @param {string} haystack         The string to search in\n   * @returns {Array<string>}         The found elements\n   */\n  static haystackSearchAll(needles, haystack) {\n    if (!haystack) {\n      return null;\n    }\n\n    const matches = [];\n    haystack = haystack.toLowerCase();\n    for (const needle of needles) {\n      if (haystack.includes(needle.toLowerCase())) {\n        matches.push(needle);\n      }\n    }\n\n    return matches;\n  }\n\n  /**\n   * Parses a string for subtext in parentheses and returns the base value and the subtext.\n   *\n   * @param {string} value    The value to parse\n   * @returns {Array<string>} The base value and the subtext\n   */\n  static parseSubtext(value) {\n    // Remove punctuation at the end of the input\n    let input = value.replace(/(^[,;.: ]*|[,;.: ]+$)/g, \"\");\n\n    let startSubtextIndex = input.indexOf(\"(\");\n    let endSubtextIndex = input.indexOf(\")\");\n\n    if (endSubtextIndex === -1) {\n      input += \")\";\n      endSubtextIndex = input.indexOf(\")\");\n    }\n\n    if (startSubtextIndex > -1 && endSubtextIndex > startSubtextIndex) {\n      let baseValue = input.substring(0, startSubtextIndex).trim();\n      let subValue = input.substring(startSubtextIndex + 1, endSubtextIndex).trim();\n      let restValues = [];\n\n      // Check, if there is something left and parse that again\n      if (endSubtextIndex + 1 < input.length) {\n        let rest = input\n          .substring(endSubtextIndex + 1)\n          .replace(/(^[,;.: ]*|[,;.: ]+$)/g, \"\")\n          .trim();\n        restValues = this.parseSubtext(rest);\n      }\n\n      if (!Array.isArray(restValues) || !restValues.length) {\n        return [baseValue, subValue];\n      } else {\n        return [baseValue, subValue, restValues];\n      }\n    } else {\n      return [value];\n    }\n  }\n\n  /**\n   * Returns the key of the given value in the object.\n   *\n   * @param {object} object The object to search in\n   * @param {string} value  The value to search for\n   * @returns {string}      The key of the value\n   */\n  static getKeyByValue(object, value) {\n    return Object.keys(object).find((key) => object[key].toLowerCase() === value.toLowerCase());\n  }\n\n  /**\n   * Returns the modifier for a given attribute value\n   *\n   * @param {number} attribute  The attribute value\n   * @returns {number}          The modifier value\n   */\n  static getModifier(attribute) {\n    return Math.floor((attribute - 10) / 2);\n  }\n\n  /**\n   * Returns the average value of a die roll.\n   *\n   * @param {number} diceSize The size of the dice\n   * @param {number} rate     The rate to use for the average calculation\n   * @returns {number}        The average value\n   */\n  static getDiceAverage(diceSize, rate = 0.5) {\n    return (diceSize + 1) * rate;\n  }\n\n  /**\n   * Returns the total modifier value from the changes on an actor\n   *\n   * @param {Actor} actor         The actor to look for changes\n   * @param {string} target       The change target to look for\n   * @param {string|null} type    The type to look for, if any\n   * @returns {Promise<number>}   The total modifier value, 0 if none found\n   */\n  static async getTotalFromChanges(actor, target, type = null) {\n    let currentItems = actor.items.contents;\n\n    let changeTotal = 0;\n    const actorRollData = actor.getRollData();\n\n    await Promise.all(\n      currentItems.map(async (currentItem) => {\n        // Check if the item has Changes\n        if (currentItem.system.changes) {\n          const changes = currentItem.system.changes;\n          const itemRollData = currentItem.getRollData();\n\n          let targetChange = changes.find(function (element) {\n            if (element.target.toLowerCase() === target.toLowerCase() && (!type || element.type === type)) {\n              return element;\n            }\n          });\n\n          if (targetChange) {\n            let processedFormula = null;\n            if (/@class\\.level/.test(targetChange.formula)) {\n              processedFormula = await Roll.fromTerms(Roll.parse(targetChange.formula, itemRollData)).evaluate();\n            } else {\n              processedFormula = await Roll.fromTerms(Roll.parse(targetChange.formula, actorRollData)).evaluate();\n            }\n\n            changeTotal += processedFormula?.total ?? +targetChange.formula;\n          }\n        }\n      })\n    );\n\n    return Promise.resolve(changeTotal);\n  }\n\n  /**\n   * Formats the given string to change formulas to inline rolls.\n   *\n   * @param {string} string The string to format\n   * @returns {string}      The formatted string\n   */\n  static makeValueRollable(string) {\n    return string.replace(/(\\d+d\\d+)/g, \"[[$1]]\");\n  }\n\n  /**\n   * Formats the given string to be in camelCase.\n   *\n   * @param {string} text The text to camelize\n   * @returns {string}    The camelized text\n   */\n  static camelize(text) {\n    if (!text) {\n      return text;\n    }\n\n    return text.replace(/^([A-Z])|[\\s-_]+(\\w)/g, function (_match, p1, p2, _offset) {\n      if (p2) return p2.toUpperCase();\n      return p1.toLowerCase();\n    });\n  }\n\n  /**\n   * Translates a string\n   *\n   * @param {string} key  The key to translate\n   * @param {object} data The data to pass to the translation\n   * @returns {string}    The translated string\n   */\n  static translate(key, data = {}) {\n    return game.i18n.format(`SBCPF1.${key}`, data);\n  }\n\n  /**\n   * Runs the given operation on each item in the list in parallel.\n   *\n   * @param {Array|object} items         The items to run the operation on\n   * @param {Function} operation  The operation to run on each item\n   * @param {Array} args          The arguments to pass to the operation (each time)\n   * @returns {Promise<Array>}    The results of the operations\n   */\n  static async runParallelOps(items, operation, args = []) {\n    if (Array.isArray(items)) {\n      const promises = items.map(async (item, index) => await operation(item, index, ...args));\n      return await Promise.all(promises);\n    }\n\n    const promises = Object.keys(items).map(async (key) => await operation(items[key], key, ...args));\n    return await Promise.all(promises);\n  }\n\n  /**\n   * Takes a given string and converts all distances and weights in it to the system-defined unit.\n   *\n   * @param {string} string         The string to be converted\n   * @returns {string}              The converted string\n   */\n  static convertStringUnits(string) {\n    // Distance conversions\n    const dashFeet = string.matchAll(/(\\d+)-foot/g);\n    for (const distance of dashFeet) {\n      const [length, unit] = pf1.utils.convertDistance(+distance[1]);\n      string = string.replace(distance[0], length + \"-\" + (unit === \"m\" ? \"meter\" : \"foot\"));\n    }\n\n    const dashMiles = string.matchAll(/(\\d+)-mile/g);\n    for (const distance of dashMiles) {\n      const [length, unit] = pf1.utils.convertDistance(+distance[1], \"mi\");\n      string = string.replace(distance[0], length + \"-\" + (unit === \"km\" ? \"kilometer\" : \"mile\"));\n    }\n\n    const longFeet = string.matchAll(/(\\d+) feet/g);\n    for (const distance of longFeet) {\n      const [length, unit] = pf1.utils.convertDistance(+distance[1]);\n      string = string.replace(distance[0], length + \" \" + (unit === \"m\" ? \"meters\" : \"feet\"));\n    }\n\n    const longMiles = string.matchAll(/(\\d+) miles/g);\n    for (const distance of longMiles) {\n      const [length, unit] = pf1.utils.convertDistance(+distance[1], \"mi\");\n      string = string.replace(distance[0], length + \" \" + (unit === \"km\" ? \"kilometers\" : \"miles\"));\n    }\n\n    const shortFeet = string.matchAll(/(\\d+) ft\\./g);\n    for (const distance of shortFeet) {\n      string = string.replace(distance[0], pf1.utils.convertDistance(+distance[1]).join(\" \"));\n    }\n\n    const shortMiles = string.matchAll(/(\\d+) mi\\b/g);\n    for (const distance of shortMiles) {\n      string = string.replace(distance[0], pf1.utils.convertDistance(+distance[1], \"mi\").join(\" \"));\n    }\n\n    // Weight Conversions\n    const weightSystem = pf1.utils.getWeightSystem();\n\n    const shortPounds = string.matchAll(/(\\d+) lbs?\\./g);\n    for (const weight of shortPounds) {\n      const newWeight = pf1.utils.convertWeight(+weight[1]);\n      string = string.replace(\n        weight[0],\n        newWeight + \" \" + (weightSystem === \"metric\" ? \"kg\" : newWeight !== 1 ? \"lbs.\" : \"lb.\")\n      );\n    }\n\n    const longPounds = string.matchAll(/(\\d+) pounds?/g);\n    for (const weight of longPounds) {\n      const newWeight = pf1.utils.convertWeight(+weight[1]);\n      string = string.replace(\n        weight[0],\n        pf1.utils.convertWeight(newWeight) +\n          \" \" +\n          (weightSystem === \"metric\" ? \"kilogram\" : \"pound\") +\n          (newWeight !== 1 ? \"s\" : \"\")\n      );\n    }\n\n    return string;\n  }\n\n  /**\n   * Takes a given string and attempts to convert it from plural to singular\n   *\n   * @param {string} string       The plural string\n   * @returns {string}            The singularized string\n   */\n  static singularize(string) {\n    return string\n      .replace(/\\(\\d+\\)/g, \"\")\n      .trim()\n      .replace(/ies$/, \"y\")\n      .replaceAll(\"doses of\", \"dose of\")\n      .replace(/s$/, \"\");\n  }\n\n  /**\n   * Takes a given string and capitalizes all words minus certain exceptions like \"of\", \"and\", etc.\n   *\n   * @param {string} string       The string to capitalize\n   * @returns {string}            The capitalized string\n   *\n   * @todo Cases where the world starts with \"(\" are not handled correctly\n   */\n  static capitalize(string) {\n    return (string || \"\")\n      .split(\" \")\n      .map((word) => {\n        if ([\"of\", \"and\", \"or\", \"the\", \"a\", \"an\"].includes(word)) return word;\n        if (word.match(/^[^a-z]/i)) return word.charAt(0) + word.charAt(1).toUpperCase() + word.slice(2);\n        return word.charAt(0).toUpperCase() + word.slice(1);\n      })\n      .join(\" \");\n  }\n\n  /**\n   * Extract a money object from a string\n   *\n   * @param {string} string                                            The string to extract the money from\n   * @returns {{pp: number, gp: number, sp: number, cp: number}|null}  The extracted money object\n   */\n  static getMoneyFromString(string) {\n    const gold = goldRegex().exec(string);\n    if (!gold[0]) {\n      return null;\n    }\n    const goldGroups = gold.groups;\n    return {\n      pp: +(goldGroups.pp || 0),\n      gp: +(goldGroups.gp || 0),\n      sp: +(goldGroups.sp || 0),\n      cp: +(goldGroups.cp || 0),\n    };\n  }\n\n  /**\n   * Convert a money object to gold\n   *\n   * @param {object} money                          The money object\n   * @param {number|null} money.pp                  The platinum pieces\n   * @param {number|null} money.gp                  The gold pieces\n   * @param {number|null} money.sp                  The silver pieces\n   * @param {number|null} money.cp                  The copper pieces\n   * @returns {number}                              The total gold value\n   */\n  static convertMoneyToGold(money) {\n    return +(money.pp || 0) * 10 + +(money.gp || 0) + +(money.sp || 0) / 10 + +(money.cp || 0) / 100;\n  }\n\n  /**\n   * Search a magic ability based on its name and a potential prefix\n   *\n   * @param {string} abilityName                        The name of the magic ability\n   * @param {string} [prefix]                           The prefix to search for\n   * @returns {MagicAbility|null}                       The found magic ability or null\n   */\n  static getMagicAbility(abilityName, prefix) {\n    let searchName = prefix ? `${prefix} ${abilityName}` : abilityName;\n    searchName = searchName.toLowerCase().replace(/[- ]/g, \"\");\n\n    for (let key in window.SBC.config.magicalAbilities.Abilities) {\n      if (key.toLowerCase() === searchName) {\n        return {\n          name: key,\n          ...window.SBC.config.magicalAbilities.Abilities[key],\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Process a given formula using either the actor or item data.\n   *\n   * @param {string} itemFormula  The formula to process\n   * @param {import (\"../pf1/module/documents/actor/actor-base.mjs\").ActorBasePF} actor The actor to process the formula with\n   * @param {import (\"../pf1/module/documents/item/item-base.mjs\").ItemBasePF} item The item to process the formula with\n   * @returns {Promise<sbcTypes.ProcessedFormulaResult>}            The processed formula\n   */\n  static async processFormula(itemFormula, actor, item = null) {\n    const actorRollData = actor.getRollData();\n    const itemRollData = item?.getRollData();\n\n    let processedFormula = null;\n    if (/@class\\.level/.test(itemFormula) && itemRollData) {\n      processedFormula = await Roll.fromTerms(Roll.parse(itemFormula, itemRollData)).evaluate();\n      sbcUtils.log(`Processing ${itemFormula} and got results: `, [\n        processedFormula,\n        itemRollData,\n        Roll.parse(itemFormula, itemRollData),\n      ]);\n    } else {\n      processedFormula = await Roll.fromTerms(Roll.parse(itemFormula, actorRollData)).evaluate();\n      sbcUtils.log(`Processing ${itemFormula} and got results: `, [\n        processedFormula,\n        actorRollData,\n        Roll.parse(itemFormula, actorRollData),\n      ]);\n    }\n\n    return { formula: processedFormula?.formula ?? +itemFormula, total: processedFormula?.total ?? +itemFormula };\n  }\n\n  /**\n   * Update an item with the associated class, if applicable\n   *\n   * @param {import(\"../pf1/module/documents/item/item-feat.mjs\").ItemFeatPF} entity The item to update\n   * @param {Array<import(\"../pf1/module/documents/item/item-class.mjs\").ItemClassPF>} actorClasses The classes of the actor\n   * @returns {Promise<void>}     The updated item\n   */\n  static async addAssociatedClass(entity, actorClasses) {\n    if (entity.system.subType === \"classFeat\" && entity.system.associations.classes?.length > 0) {\n      const itemClasses = entity.system.associations.classes.map((c) => c.toLowerCase());\n      actorClasses = actorClasses.map((c) => c.system.tag);\n      const classMatch = itemClasses.find((c) => actorClasses.includes(c));\n\n      if (classMatch) await entity.updateSource({ \"system.class\": classMatch });\n    }\n  }\n\n  /**\n   * Calculate the percentual similarity of two strings based on their Levenshtein Distance\n   *\n   * @param {string} first     The first string\n   * @param {string} second    The second string\n   * @returns {number}         The levenshtein distance\n   */\n  static stringSimilarity(first, second) {\n    return 1 - this.levenshteinDistance(first, second) / Math.max(first.length, second.length);\n  }\n\n  /**\n   * Calculate the levenshtein distance for two strings\n   * https://en.wikipedia.org/wiki/Levenshtein_distance\n   *\n   * @param {string} first     The first string\n   * @param {string} second    The second string\n   * @returns {number}         The levenshtein distance\n   */\n  static levenshteinDistance(first, second) {\n    if (first === second) return 0;\n\n    if (first.length > second.length) [first, second] = [second, first];\n\n    const _min = (d0, d1, d2, bx, ay) => {\n      return d0 < d1 || d2 < d1 ? (d0 > d2 ? d2 + 1 : d0 + 1) : bx === ay ? d1 : d1 + 1;\n    };\n\n    let [lengthFirst, lengthSecond] = [first.length, second.length];\n\n    while (lengthFirst > 0 && first.charCodeAt(lengthFirst - 1) === second.charCodeAt(lengthSecond - 1)) {\n      lengthFirst--;\n      lengthSecond--;\n    }\n\n    let offset = 0;\n    while (offset < lengthFirst && first.charCodeAt(offset) === second.charCodeAt(offset)) {\n      offset++;\n    }\n\n    lengthFirst -= offset;\n    lengthSecond -= offset;\n\n    if (lengthFirst === 0 || lengthSecond < 3) {\n      return lengthSecond;\n    }\n\n    let x = 0;\n    let y;\n    let d0, d1, d2, d3;\n    let dd, dy, ay;\n    let bx0, bx1, bx2, bx3;\n    let vector = [];\n\n    for (y = 0; y < lengthFirst; y++) {\n      vector.push(y + 1);\n      vector.push(first.charCodeAt(offset + y));\n    }\n\n    let len = vector.length - 1;\n\n    for (; x < lengthSecond - 3; ) {\n      bx0 = second.charCodeAt(offset + (d0 = x));\n      bx1 = second.charCodeAt(offset + (d1 = x + 1));\n      bx2 = second.charCodeAt(offset + (d2 = x + 2));\n      bx3 = second.charCodeAt(offset + (d3 = x + 3));\n      dd = x += 4;\n      for (y = 0; y < len; y += 2) {\n        dy = vector[y];\n        ay = vector[y + 1];\n        d0 = _min(dy, d0, d1, bx0, ay);\n        d1 = _min(d0, d1, d2, bx1, ay);\n        d2 = _min(d1, d2, d3, bx2, ay);\n        dd = _min(d2, d3, dd, bx3, ay);\n        vector[y] = dd;\n        d3 = d2;\n        d2 = d1;\n        d1 = d0;\n        d0 = dy;\n      }\n    }\n\n    for (; x < lengthSecond; ) {\n      bx0 = second.charCodeAt(offset + (d0 = x));\n      dd = ++x;\n      for (y = 0; y < len; y += 2) {\n        dy = vector[y];\n        vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);\n        d0 = dy;\n      }\n    }\n\n    return dd;\n  }\n\n  /**\n   * Check if the given item is a duplicate of an existing item on the actor\n   *\n   * @param {import (\"../pf1/module/documents/actor/actor-pf.mjs\").ActorPF} actor The actor to check for duplicates\n   * @param {string} itemType                                                     The type of the item to check for duplicates\n   * @param {string} itemSubType                                                  The subType of the item to check for duplicates\n   * @param {string} itemName                                                     The name of the item to check for duplicates\n   * @param {import (\"../pf1/module/documents/item/item-pf.mjs\").ItemPF} entity   The entity to check for duplicates\n   * @returns {import (\"../pf1/module/documents/item/item-pf.mjs\").ItemPF|null}   The found duplicate item or null\n   */\n  static checkForDuplicateItem(actor, itemType, itemSubType, itemName, entity) {\n    let currentItems = [];\n    if (!itemType || itemType === \"all\") currentItems = actor.allItems;\n    else currentItems = actor.itemTypes[itemType];\n\n    if (itemSubType) currentItems = currentItems.filter((item) => item.system.subType === itemSubType);\n\n    let duplicateTest = new RegExp(`(^${escapeForRegex(itemName.toLowerCase())})`, \"i\");\n    return currentItems.find(\n      (i) =>\n        duplicateTest.test(i.name.toLowerCase()) ||\n        (i.system.tag && entity.system.tag && i.system.tag === entity.system.tag) ||\n        pf1.utils.createTag(i.name) === pf1.utils.createTag(entity.name)\n    ); // Check first by name and then by tag, if it exists\n  }\n\n  /**\n   * Returns the number with a sign in front of it.\n   *\n   * @param {number|string} number  The number to prefix\n   * @returns {string}              The prefixed number\n   */\n  static prefixNumber(number) {\n    return (\"+\" + number).replace(/\\+([-+])/g, \"$1\");\n  }\n\n  /**\n   * Opens the SBC dialog\n   *\n   * @param {string} statblock The statblock to open the dialog with\n   * @returns {Promise<void>}\n   * @async\n   */\n  static async openSBCDialog(statblock = null) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n\n    if (!sbcInstance.configInitialized) return;\n\n    await sbcUtils.initializeSBC();\n\n    if (!sbcInstance.app) {\n      sbcUtils.log(sbcUtils.translate(\"log.inputDialogDoesNotYetExist\"));\n      sbcInstance.actor = await sbcUtils.createActor();\n\n      sbcInstance.app = new InputDialog({\n        folderId: sbcInstance.folderId,\n        wipFolderId: sbcInstance.wipFolderId,\n        statblock: statblock,\n      });\n\n      parserMapping.initMapping(sbcInstance.app);\n    }\n\n    sbcUtils.log(sbcUtils.translate(\"log.openingInputDialog\"));\n    sbcInstance.app.render(true);\n\n    Hooks.callAll(\"sbc.started\");\n  }\n\n  /**\n   * Initializes the SBC\n   *\n   * @returns {Promise<void>}\n   * @private\n   * @async\n   */\n  static async initializeSBC() {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n    sbcUtils.log(\"Initializing sbc v\" + sbcInstance.config.modData.version);\n\n    const customFolderName = window.SBC.settings.getSetting(\"importFolder\");\n    const customWIPFolderName = \"SBC_WIP\";\n    let searchForExistingFolder = await game.folders.find(\n      (entry) => entry.name === customFolderName && entry.type === \"Actor\"\n    );\n    let searchForExistingWIPFolder = await game.folders.find(\n      (entry) => entry.name === customWIPFolderName && entry.type === \"Actor\"\n    );\n\n    // Check, if a custom input folder still exists, as it could have been deleted after changing the module settings\n    if (!searchForExistingFolder) {\n      const newFolder = await Folder.create({\n        name: customFolderName,\n        type: \"Actor\",\n        color: \"#e76f51\",\n        parent: null,\n      });\n      const info = sbcUtils.translate(\"interfaceMessages.folderCreated\");\n      ui.notifications.info(info);\n      sbcUtils.log(info);\n      searchForExistingFolder = newFolder;\n    }\n    sbcInstance.folderId = searchForExistingFolder.id;\n\n    if (!searchForExistingWIPFolder) {\n      const newWIPFolder = await Folder.create({\n        name: customWIPFolderName,\n        type: \"Actor\",\n        color: \"#e76f51\",\n        parent: searchForExistingFolder,\n      });\n      sbcInstance.wipFolderId = newWIPFolder.id;\n    } else {\n      sbcInstance.wipFolderId = searchForExistingWIPFolder.id;\n      game.actors\n        .filter((actor) => actor.folder?.id === searchForExistingWIPFolder.id)\n        .map(async (actor) => await actor.delete());\n    }\n\n    // If the default actor is PC, change the value down the line\n    sbcInstance.actorType = window.SBC.settings.getSetting(\"defaultActorType\");\n    Hooks.callAll(\"sbc.reset\");\n  }\n\n  /**\n   * Creates a search set from a list of options and a list of classes to mix them with\n   *\n   * @param {Array<string>} options   The options to create the search set from\n   * @param {boolean} includeClasses  Whether to include classes in the search set\n   * @param {Array<string>} subClasses The classes array to use instead to include in the search set\n   * @returns {Set<string>}           The created search set\n   */\n  static createSearchSet(options, includeClasses = false, subClasses = []) {\n    let searchSet = new Set();\n    for (let option of options) {\n      if (!option) continue;\n\n      searchSet.add(option);\n      if (includeClasses) {\n        let classes = subClasses.length\n          ? subClasses\n          : window.SBC.actor.itemTypes.class.filter((c) => c.system.subType !== \"racial\");\n        if (!subClasses.length) {\n          classes = classes\n            .map((i) => i.system.tag.substring(0, 3).toUpperCase())\n            .concat(classes.map((i) => `${i.system.tag[0]}${i.system.tag[2]}${i.system.tag[3]}`.toUpperCase()))\n            .concat(window.SBC.app.processData.characterData.archetypes.map((x) => sbcUtils.capitalize(x)));\n        }\n        let fighterIndex = classes.indexOf(\"FIG\");\n        if (fighterIndex > -1) {\n          classes.splice(fighterIndex, 1);\n          classes.push(\"FGT\");\n        }\n        for (let c of classes) {\n          searchSet.add(`${option} (${c})`);\n        }\n      }\n    }\n    return searchSet;\n  }\n\n  /**\n   * A locale-safe insertion sort of an Array of Objects, not in place. Ignores punctuation and capitalization.\n   * `name` properties in objects will be lowercased.\n   *\n   * @template T\n   * @param {Array.<T & {name: string}>} inputArr - Array to be sorted. Each element must have a name property set\n   * @returns {T[]} - New sorted Array\n   */\n  static sortArrayByName(inputArr) {\n    inputArr = foundry.utils.deepClone(inputArr);\n    for (const elem of inputArr) {\n      elem.name = elem.name.toLocaleLowerCase();\n    }\n    return pf1.utils.naturalSort(inputArr, \"name\", { numeric: true, ignorePunctuation: true });\n  }\n\n  /**\n   * Return the creature type and subtype from the given string, if present.\n   *\n   * @param {string} target - The string to search for the creature type and subtype\n   * @returns {Array<string>} - An array containing the creature type and subtype\n   */\n  static extractCreatureTypeInfo(target) {\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n\n    const enemyType =\n      sbcInstance.config.creatureTypes.find((i) => target.match(new RegExp(\"\\\\b\" + i + \"\\\\b\", \"i\"))) ?? \"humanoid\";\n    const enemySubType = sbcInstance.config.creatureSubTypes.find((i) =>\n      target.match(new RegExp(\"\\\\b\" + i + \"\\\\b\", \"i\"))\n    );\n\n    return [enemyType, enemySubType];\n  }\n}\n",
    "import { sbcUtils } from \"./sbcUtils.js\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\nconst tokenBarAttributes = [\n  \"NONE\",\n  \"attributes.hp\",\n  \"spells.spellbooks.primary.spellPoints\",\n  \"spells.spellbooks.secondary.spellPoints\",\n  \"spells.spellbooks.tertiary.spellPoints\",\n  \"spells.spellbooks.spelllike.spellPoints\",\n  \"details.xp\",\n  \"attributes.ac.normal.total\",\n  \"attributes.ac.flatFooted.total\",\n  \"attributes.ac.touch.total\",\n  \"attributes.cmd.total\",\n  \"attributes.speed.land.total\",\n  \"attributes.speed.land.fly.total\",\n  \"attributes.speed.land.swim.total\",\n  \"attributes.speed.land.climb.total\",\n  \"attributes.speed.land.burrow.total\",\n  \"attributes.sr.total\",\n];\n\nexport class sbcSettings {\n  // Updates the array of custom compendia, which is used to find items, feats, etc. with a higher priority then the pf1.compendia\n  static async updateCustomCompendiums(isInitializing = false) {\n    /** @type {sbcTypes.SBC} */\n    let sbcInstance = window.SBC;\n    await sbcInstance.compendiumSearch.registerDefaultCompendia();\n\n    sbcUtils.log(\"Updating custom compendiums\");\n\n    /** @type {string[]} */\n    let customCompendiums = game.settings\n      .get(sbcInstance.config.modData.mod, \"customCompendiums\")\n      .replace(/\\s/g, \"\")\n      .split(/[,;]/g)\n      .filter((comp) => !!comp);\n\n    if (!customCompendiums.length) {\n      return;\n    }\n    // Replace semicolons with commas\n\n    // Get the names of all available compendiums\n    let packKeys = Array.from(game.packs.keys());\n\n    const invalidCompendiums = [];\n    const validCompendiums = customCompendiums.filter((comp) => {\n      if (sbcInstance.compendiumSearch.isKnownCompendium(comp)) {\n        return false;\n      }\n\n      // ... and check if it's available\n      if (!packKeys.includes(comp)) {\n        // save invalid compendiums for the error message\n        invalidCompendiums.push(comp);\n        return false;\n      }\n\n      // save valid compendiums to overwrite the settings\n      return true;\n    });\n\n    if (!isInitializing) {\n      // If there are invalid compendiums, let the user know\n      if (invalidCompendiums.length > 0) {\n        let error =\n          \"sbc-pf1 | Failed to add the following compendiums to sbc, please check for typos (\" +\n          invalidCompendiums.toString() +\n          \")\";\n        ui.notifications.error(error);\n        sbcUtils.log(error);\n      }\n\n      if (!validCompendiums.length) {\n        return;\n      }\n\n      const info = \"sbc-pf1 | Added the following compendiums to sbc (\" + validCompendiums.toString() + \")\";\n      ui.notifications.info(info);\n      sbcUtils.log(info);\n    }\n\n    await sbcInstance.compendiumSearch.processCompendiums(validCompendiums);\n  }\n\n  // Update the default folder into which statblocks get imported\n  static async updateImportFolder() {\n    sbcUtils.log(\"Updating custom import folder\");\n\n    // Get the custom folder name from the settings\n    let customFolderName = sbcSettings.getSetting(\"importFolder\");\n\n    if (customFolderName !== \"\") {\n      let searchForExistingFolder = null;\n\n      try {\n        searchForExistingFolder = await game.folders.find(\n          (entry) => entry.data.name === customFolderName && entry.data.type === \"Actor\"\n        );\n      } catch (err) {\n        let info = \"sbc-pf1 | Something went wrong while searching for an existing import folder.\";\n        ui.notifications.info(info);\n        sbcUtils.log(info);\n      }\n\n      if (searchForExistingFolder === null) {\n        // No existing folder found\n        let newFolder = await Folder.create({\n          name: customFolderName,\n          type: \"Actor\",\n          color: \"#e76f51\",\n          parent: null,\n        });\n\n        let info = \"Created a custom folder for imported statblocks.\";\n        ui.notifications.info(info);\n        sbcUtils.log(info);\n        return newFolder.id;\n      } else {\n        // Existing folder found\n        return searchForExistingFolder.id;\n      }\n    } else {\n      // No custom import folder defined\n    }\n  }\n\n  /**\n   * Get a setting from the module settings\n   *\n   * @param {string} key  The key of the setting to get\n   * @returns {any}       The value of the setting\n   */\n  static getSetting(key) {\n    // Special handling of the attribute bars\n    if (key.includes(\"attributeBar\")) {\n      let number = parseInt(key.replace(\"attributeBar\", \"\"));\n      if (isNaN(number)) {\n        return {};\n      }\n\n      let attributeKey = game.settings.get(window.SBC.config.modData.mod, number === 1 ? \"bar1\" : \"bar2\");\n      if (attributeKey === \"0\") {\n        return {};\n      } else {\n        return { attribute: tokenBarAttributes[attributeKey] };\n      }\n    }\n\n    return game.settings.get(window.SBC.config.modData.mod, key);\n  }\n}\n\nconst settings = {\n  debug: {\n    default: false,\n    type: Boolean,\n  },\n  defaultActorType: {\n    default: 0,\n    type: String,\n    choices: { 0: \"NPC\", 1: \"PC\" },\n  },\n  autoConvert: {\n    default: false,\n    type: Boolean,\n  },\n  inputDelay: {\n    default: 750,\n    type: Number,\n    range: { min: 250, max: 5000, step: 10 },\n  },\n  importFolder: {\n    default: \"sbc | Imported Statblocks\",\n    type: String,\n    onChange: () => sbcSettings.updateImportFolder(),\n  },\n  customCompendiums: {\n    default: \"\",\n    type: String,\n    onChange: async () => await sbcSettings.updateCustomCompendiums(),\n  },\n  createBuff: {\n    default: true,\n    type: Boolean,\n  },\n  createAttacks: {\n    default: false,\n    type: Boolean,\n  },\n  createAssociations: {\n    default: false,\n    type: Boolean,\n  },\n  rollBonusesIntegration: {\n    default: false,\n    type: Boolean,\n  },\n  pcsight: {\n    default: true,\n    type: Boolean,\n  },\n  npcsight: {\n    default: true,\n    type: Boolean,\n  },\n  pchealth: {\n    default: \"\",\n    type: String,\n    choices: {\n      \"\": \"System default\",\n      discrete: \"Discrete\",\n      continuous: \"Continuous\",\n    },\n  },\n  npchealth: {\n    default: \"\",\n    type: String,\n    choices: {\n      \"\": \"System default\",\n      discrete: \"Discrete\",\n      continuous: \"Continuous\",\n    },\n  },\n  disposition: {\n    default: -1,\n    type: String,\n    choices: { \"-1\": \"Hostile\", 0: \"Neutral\", 1: \"Friendly\" },\n  },\n  displayName: {\n    default: 20,\n    type: String,\n    choices: {\n      0: \"None\",\n      10: \"Control\",\n      20: \"Owner Hover\",\n      30: \"Hover\",\n      40: \"Owner\",\n      50: \"Always\",\n    },\n  },\n  displayBars: {\n    default: 20,\n    type: String,\n    choices: {\n      0: \"None\",\n      10: \"Control\",\n      20: \"Owner Hover\",\n      30: \"Hover\",\n      40: \"Owner\",\n      50: \"Always\",\n    },\n  },\n  bar1: {\n    default: \"24\",\n    type: String,\n    choices: tokenBarAttributes,\n  },\n  bar2: {\n    default: \"0\",\n    type: String,\n    choices: tokenBarAttributes,\n  },\n};\n\nexport const registerSettings = function () {\n  /** @type {sbcTypes.ConfigData} */\n  let config = window.SBC.config;\n\n  Object.entries(settings).forEach(([key, value]) => {\n    game.settings.register(\n      config.modData.mod,\n      key,\n      Object.assign(\n        {\n          name: sbcUtils.translate(`settings.${key}.name`),\n          hint: sbcUtils.translate(`settings.${key}.hint`),\n          scope: \"world\",\n          config: true,\n        },\n        value\n      )\n    );\n  });\n};\n",
    "// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\nimport {\n  CreatureSubTypes,\n  CreatureTypes,\n  Immunities,\n  ItemModifications,\n  MagicalAbilities,\n  Metamagic,\n  SillyGear,\n  Sources,\n  TechColors,\n} from \"./Content/index.js\";\n\n/**\n * This file contains the configuration for the PF1 Statblock Converter module.\n *\n * @type {sbcTypes.ConfigData} sbcConfig   The configuration data for the PF1 Statblock Converter module\n */\nexport const sbcConfig = {\n  modData: {\n    version: \"5.5.0\",\n    mod: \"pf1-statblock-converter\",\n    modName: \"sbc | PF1 Statblock Converter\",\n  },\n  const: {\n    lineheight: 20,\n    crFractions: {\n      \"1/8\": 0.125,\n      \"1/6\": 0.1625,\n      \"1/4\": 0.25,\n      \"1/3\": 0.3375,\n      \"1/2\": 0.5,\n    },\n    actorType: {\n      0: \"npc\",\n      1: \"character\",\n      // 2: \"trap\",\n      // 3: \"haunt\",\n      // 4: \"vehicle\",\n    },\n    suffixMultiples: [\"st\", \"nd\", \"rd\", \"th\"],\n  },\n  sources: Sources,\n  lineCategories: [\n    \"Defense\",\n    \"Offense\",\n    \"Statistics\",\n    \"Special Abilities\",\n    \"Description\",\n    \"Tactics\",\n    \"Ecology\",\n    \"([a-z ]*)?Spells\",\n    \"([a-z ]*)?Extracts\",\n    \"([a-z ]*)?Spell-Like\",\n  ],\n  lineStarts: [\n    \"Source\",\n    \"CR\",\n    \"XP\",\n    \"[LC][GNE]\", // LG, CG, NG, LN, CN, N, LE, CE\n    \"N[GE]?\", // N, NG, NE\n    \"Init\",\n    \"Aura\",\n    \"Senses\",\n    \"Defense\",\n    \"AC\",\n    \"HP\",\n    \"Fort\",\n    \"Resist\",\n    \"Immun(?:e|ities)\", // Immune, Immunities\n    \"DR\",\n    \"Offense\",\n    \"Speed\",\n    \"Spd\",\n    \"Melee\",\n    \"Ranged\",\n    \"Space\",\n    \"Special\",\n    \"^Spell-Like\",\n    \"^(.*) Spell-Like\",\n    \"^Spells\",\n    \"^(.*) Spells\",\n    \"^Extracts\",\n    \"^(.*) Extracts\",\n    \"Constant\",\n    \"At[- ]will\",\n    \"[456789]th\", // 4th, 5th, 6th, 7th, 8th, 9th\n    \"3rd\",\n    \"2nd\",\n    \"1st\",\n    \"Cantrips\",\n    \"Orisons\",\n    \"0\",\n    \"D\\\\s*domain spell\",\n    \"Domains?\",\n    \"Myster[y|ies]\",\n    \"S\\\\s*spirit magic spell\",\n    \"Spirits?\",\n    \"Bloodlines?\",\n    \"Thassilonian Specialization\",\n    \"Patrons?\",\n    \"Statistics\",\n    \"Str\",\n    \"Base\",\n    \"Feats\",\n    \"Skills\",\n    \"Languages?\", // Language, Languages\n    \"Ecology\",\n    \"Environment\",\n    \"Organization\",\n    \"Treasure\",\n    \"S[QR]\", //SQ, SR\n    \"(?:Other |Combat )?Gear\", // Other Gear, Combat Gear\n    \"Gear\",\n    \"(?:M|Fem)ale\", // Male, Female\n    \"Tactics\",\n    \"(?:Before|During) Combat\",\n    \"Morale\",\n    \"(?:Opposition|Prohibited) School\", // Opposition School, Prohibited School\n    \"Defensive Abilities\",\n    \"Immune\",\n    \"Weaknesses\",\n    \"Description\",\n    \"\\\\d+\\\\s*(?:rounds)?\\\\/(day|month|year)\",\n    \".*\\\\((S[PU]|EX|\\\\-\\\\-)\\\\)\", // (Sp), (Su), (Ex), (--),\n    \"\\\\*\",\n  ],\n  armorBonusTypes: [\n    \"touch\",\n    \"flat-footed\",\n    \"natural\",\n    \"size\",\n    \"dex\",\n    \"armor\",\n    \"shield\",\n    \"base\",\n    \"enhancement\",\n    \"dodge\",\n    \"inherent\",\n    \"deflection\",\n    \"morale\",\n    \"luck\",\n    \"sacred\",\n    \"insight\",\n    \"resistance\",\n    \"profane\",\n    \"trait\",\n    \"racial\",\n    \"competence\",\n    \"circumstance\",\n    \"alchemical\",\n    \"penalty\",\n    \"rage\",\n    \"monk\",\n    \"wis\",\n    \"untyped\",\n  ],\n  techColors: TechColors,\n  techTiers: [\n    \"Mark (?:I{1,3}|I?V)\", // Mark I, Mark II, Mark III, Mark IV, Mark V\n    \"Grade (?:I{1,3}|I?V)\", // Grade I, Grade II, Grade III, Grade IV, Grade V\n  ],\n  magicalAbilities: MagicalAbilities,\n  itemModifications: ItemModifications,\n  weaponGroups: {},\n  metamagic: Metamagic,\n  creatureTypes: CreatureTypes,\n  creatureSubTypes: CreatureSubTypes,\n  immunities: Immunities,\n  sillyGear: SillyGear,\n  races: [],\n  classes: [],\n  mythicPaths: [],\n  racialClasses: [],\n  prestigeClassNames: [],\n  templates: [],\n  naturalAttacks: [],\n  initializeConfig: async function () {\n    // /* ------------------------------------ */\n    // /* sbc configuration               \t\t*/\n    // /* ------------------------------------ */\n    // If there are customCompendiums, given as a string in the module settings,\n    // split them and add them to the searchableCompendiums\n    let searchableCompendiums = window.SBC.compendiumSearch.defaultCompendia;\n    /** @type {string} */\n    let customCompendiumSettings = window.SBC.settings.getSetting(\"customCompendiums\");\n\n    // Gather and add all the custom compendiums\n    if (customCompendiumSettings !== \"\") {\n      customCompendiumSettings = customCompendiumSettings.replace(/\\s/g, \"\");\n      searchableCompendiums = searchableCompendiums.concat(customCompendiumSettings.split(/[,;]/g));\n    }\n\n    // Search through all the compendiums to process the class items\n    await indexCompendiums(searchableCompendiums);\n    this.classes.sort();\n    this.mythicPaths.sort();\n    this.racialClasses.sort();\n    this.prestigeClassNames.sort();\n\n    // Grab the natural attacks introduced in the system.\n    let naturalAttacksIndex = await game.packs.get(\"pf1.monster-abilities\").index;\n    for (let entry of naturalAttacksIndex) {\n      if (entry.name !== \"\") {\n        sbcConfig.naturalAttacks.push(entry.name);\n      }\n    }\n\n    // Add the weapon groups to the config\n    for (const [group, name] of Object.entries(pf1.config.weaponGroups)) {\n      let fixedName = name.toLowerCase().replace(/(.*), (.*)/, \"$2 $1\");\n      if (!Object.values(sbcConfig.weaponGroups).includes(name)) sbcConfig.weaponGroups[group] = fixedName;\n    }\n  },\n};\n\n// Wrap the entire operation in an async function to use await\n/**\n * Indexes the compendiums to get the classes, mythic classes, racial classes, and prestige\n *\n * @param {Array<string>} searchableCompendiums   The compendiums to search through\n */\nasync function indexCompendiums(searchableCompendiums) {\n  let classSet = new Set();\n  let prestigeClassSet = new Set();\n  let mythicClassSet = new Set();\n  let racialClassSet = new Set();\n  let raceSet = new Set();\n  let templateSet = new Set();\n\n  // Use map to iterate and return an array of promises\n  const compendiumPromises = searchableCompendiums.map(async (compendium) => {\n    let pack = await game.packs.get(compendium);\n    if (!pack) {\n      return;\n    }\n\n    let index = pack.index;\n    // Use Promise.all to wait for all index entries to be processed\n    await Promise.all(\n      index.map(async (entry) => {\n        if (entry.name === \"\") {\n          return;\n        }\n\n        switch (entry.type) {\n          case \"class\":\n            switch (entry.system?.subType) {\n              case \"prestige\":\n                prestigeClassSet.add(entry.name);\n                break;\n\n              case \"mythic\":\n                mythicClassSet.add(entry.name);\n                break;\n\n              case \"racial\":\n                racialClassSet.add(entry.name);\n                break;\n\n              default:\n                classSet.add(entry.name);\n                break;\n            }\n            break;\n\n          case \"race\":\n            raceSet.add(entry.name);\n            break;\n\n          case \"feat\":\n            switch (entry.system?.subType) {\n              case \"template\":\n                templateSet.add(entry.name.split(\"(\")[0].replace(\"Creature\", \"\").trim());\n                break;\n            }\n        }\n      })\n    );\n  });\n\n  // Wait for all compendiums to be processed\n  await Promise.all(compendiumPromises);\n\n  // Add the classes to the config after all compendiums have been processed\n  sbcConfig.classes = Array.from(classSet).filter((el) => !!el);\n  sbcConfig.mythicPaths = Array.from(mythicClassSet).filter((el) => !!el);\n  sbcConfig.racialClasses = Array.from(racialClassSet).filter((el) => !!el);\n  sbcConfig.prestigeClasses = Array.from(prestigeClassSet).filter((el) => !!el);\n  sbcConfig.races = Array.from(raceSet);\n  sbcConfig.templates = Array.from(templateSet);\n}\n",
    "/*\n * Statblock Converter (SBC) for Pathfinder 1st Edition on FoundryVTT\n *\n * Current Authors: Fair Strides and KitCat\n * Contributions by: Noon, mkahvi\n *\n * Original Author: Lavaeolous\n */\n\nimport { registerSettings, sbcSettings } from \"./sbcSettings.js\";\nimport { sbcUtils } from \"./sbcUtils.js\";\nimport { sbcConfig } from \"./sbcConfig.js\";\nimport { CompendiumOps } from \"./sbcCompendium.js\";\nimport { RollBonusOps } from \"./sbcRollBonuses.mjs\";\n\n// eslint-disable-next-line no-unused-vars\nimport * as sbcTypes from \"./sbcTypes.js\";\n\n/**\n * The global SBC object\n *\n * @type {sbcTypes.SBC}\n */\nwindow.SBC = {\n  app: null,\n  actor: null,\n  actorType: null,\n  folderId: \"\",\n  wipFolderId: \"\",\n  config: sbcConfig,\n  configInitialized: false,\n  compendiumSearch: new CompendiumOps(),\n  isImporting: false,\n  settings: sbcSettings,\n  rollBonusOps: RollBonusOps,\n};\n\n/* ------------------------------------ */\n/* Hooks                                */\n/* ------------------------------------ */\n// Do anything after initialization but before ready\nHooks.once(\"setup\", async () => {\n  registerSettings();\n});\n\n// Do anything once the module is ready\nHooks.once(\"ready\", async () => {\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n  await sbcSettings.updateCustomCompendiums(true);\n  await sbcUtils.initializeSBC();\n  hideWIPFolder();\n\n  Hooks.callAll(\"sbc.loadCustomCompendiums\");\n\n  await sbcInstance.config.initializeConfig();\n\n  console.log(sbcUtils.translate(\"log.configInitialized\"));\n  sbcInstance.configInitialized = true;\n\n  game.modules.get(sbcInstance.config.modData.mod).api = { openSBCDialog: sbcUtils.openSBCDialog };\n});\n\n// Render the sbcButton when the actorDirectory is visible\nHooks.on(\n  \"renderActorDirectory\",\n  /**\n   * @param {*} _app The app that called the hook\n   * @param {JQuery} jq The jQuery object of the app\n   * @param {*} _data The data passed to the app\n   * @returns {void}\n   */\n  (_app, jq, _data) => {\n    hideWIPFolder();\n    if (!game.user.hasPermission(\"ACTOR_CREATE\")) return;\n\n    // Handle rendering the SBC window button\n    sbcUtils.log(sbcUtils.translate(\"log.renderingButton\"));\n    const sbcStartButton = document.createElement(\"button\");\n    sbcStartButton.id = \"startSBCButton\";\n    sbcStartButton.classList.add(\"create-entity\", \"sbcButton\");\n\n    const icon = document.createElement(\"i\");\n    icon.classList.add(\"fas\", \"fa-file-import\");\n    sbcStartButton.appendChild(icon);\n\n    const text = document.createTextNode(sbcUtils.translate(\"sbcButton\"));\n    sbcStartButton.appendChild(text);\n\n    // Append the button to the directory footer\n    jq[0].querySelector(\".directory-footer\").append(sbcStartButton);\n\n    // Handle the click event\n    sbcStartButton.addEventListener(\"click\", async () => await sbcUtils.openSBCDialog());\n  }\n);\n\n// When SBC resets, re-setup the fuzzy-index for searching compendiums\nHooks.on(\"sbc.reset\", async function () {\n  let customCompendiums = [];\n  let customCompendiumSettings = window.SBC.settings.getSetting(\"customCompendiums\");\n\n  if (customCompendiumSettings !== \"\") {\n    customCompendiumSettings = customCompendiumSettings.replace(/\\s/g, \"\");\n    customCompendiums.push(...customCompendiumSettings.split(/[,;]/g));\n    console.log(customCompendiums);\n  }\n\n  await fuzzyIndexPacks(customCompendiums);\n});\n\n// Allow other modules to add custom compendiums\nHooks.on(\n  \"sbc.loadCustomCompendiums\",\n  /**\n   *\n   * @param {Array<string>} compendia The compendiums to load\n   * @returns {Promise<void>}\n   */\n  async function (compendia) {\n    if (!compendia) return;\n    /** @type {sbcTypes.SBC} */\n    const sbcInstance = window.SBC;\n\n    let customCompendiums = new Set();\n    let customCompendiumSettings = window.SBC.settings.getSetting(\"customCompendiums\");\n\n    if (customCompendiumSettings !== \"\") {\n      customCompendiumSettings = customCompendiumSettings.replace(/\\s/g, \"\");\n      customCompendiums = new Set(customCompendiumSettings.split(/[,;]/g));\n    }\n    compendia.forEach((element) => {\n      customCompendiums.add(element);\n    });\n\n    await fuzzyIndexPacks(Array.from(customCompendiums));\n    sbcInstance.config.initializeConfig();\n    game.settings.set(sbcInstance.config.modData.mod, \"customCompendiums\", Array.from(customCompendiums).join(\",\"));\n  }\n);\n\nHooks.on(\n  \"pf1RegisterMaterialTypes\",\n  /**\n   * @param {object} registry The system's materials registry\n   */\n  (registry) => {\n    // Register Silver Material, as it is used in stat blocks\n    const data = registry.get(\"alchemicalSilver\");\n    data.addon = false;\n    data.name = \"PF1.Materials.Types.Silver\";\n    registry.register(\"pf1-statblock-converter\", \"silver\", data);\n  }\n);\n\n/* ------------------------------------ */\n/* Helpers                              */\n/* ------------------------------------ */\n/**\n * Indexes the provided packs for fuzzy searching\n *\n * @param {Array<string>} packs The packs to index\n * @returns {Promise<void>}\n * @private\n * @async\n */\nasync function fuzzyIndexPacks(packs) {\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n  await sbcInstance.compendiumSearch.processCompendiums(packs, { reset: true });\n}\n\n/**\n * Hides the WIP folder\n *\n * @private\n */\nfunction hideWIPFolder() {\n  /** @type {sbcTypes.SBC} */\n  const sbcInstance = window.SBC;\n\n  // Hide the WIP sub-folder, if it exists\n  document.querySelector(`.folder[data-folder-id=\"${sbcInstance.wipFolderId}\"]`)?.remove();\n}\n"
  ],
  "mappings": "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CA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,yEACV,EACA,UAAW,CACT,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,2BACR,YAAa,CAAC,QAAQ,CACxB,EACA,WAAY,CACV,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,gCACR,YAAa,CAAC,SAAS,CACzB,EACA,sBAAuB,CACrB,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,oBAAqB,CACnB,GAAI,EACJ,IAAK,OACL,KAAM,OACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,qBAAsB,CACpB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,kBAAmB,CACjB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,WAAY,CACV,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,4BACR,YAAa,CAAC,QAAQ,CACxB,EACA,sBAAuB,CACrB,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,QAAS,CACP,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,6BACR,YAAa,CAAC,QAAQ,CACxB,EACA,WAAY,CACV,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,uBAAwB,CACtB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,wCACV,EACA,uBAAwB,CACtB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,qCACR,YAAa,CAAC,QAAQ,CACxB,EACA,eAAgB,CACd,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,mEACV,EACA,SAAU,CACR,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,6BACV,EACA,eAAgB,CACd,GAAI,GACJ,IAAK,OACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,UAAW,CACT,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,8BACV,EACA,eAAgB,CACd,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,6BACR,YAAa,CAAC,QAAQ,CACxB,EACA,kBAAmB,CACjB,GAAI,GACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,0EACR,YAAa,CAAC,QAAQ,CACxB,EACA,QAAS,CACP,GAAI,GACJ,IAAK,OACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,kBAAmB,CACjB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,oCACR,YAAa,CAAC,QAAQ,CACxB,EACA,uBAAwB,CACtB,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,wCACV,EACA,mBAAoB,CAClB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,+BACV,EACA,kBAAmB,CACjB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,2CACR,YAAa,CAAC,SAAS,CACzB,EACA,WAAY,CACV,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,QAAS,CACP,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,yBACR,YAAa,CAAC,QAAQ,CACxB,EACA,SAAU,CACR,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,6BACV,EACA,eAAgB,CACd,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,+EACV,EACA,qBAAsB,CACpB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,eAAgB,CACd,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,gBAAiB,CACf,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,sEACR,YAAa,CAAC,QAAQ,CACxB,EACA,sBAAuB,CACrB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,mCACR,YAAa,CAAC,QAAQ,CACxB,EACA,uBAAwB,CACtB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,SAAU,CACR,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,yBACV,EACA,sBAAuB,CACrB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,mCACV,EACA,WAAY,CACV,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,iBAAkB,CAChB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,aAAc,CACZ,GAAI,GACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,iCACV,EACA,kBAAmB,CACjB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,0EACR,YAAa,CAAC,QAAQ,CACxB,EACA,iBAAkB,CAChB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,uBAAwB,CACtB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,oCACR,aAAc,CAAC,SAAU,SAAS,CACpC,EACA,mBAAoB,CAClB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,iBAAkB,CAChB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,iBAAkB,CAChB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,aAAc,CACZ,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,kBAAmB,CACjB,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,WAAY,CACV,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,2BACV,EACA,cAAe,CACb,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,sBAAuB,CACrB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,oCACR,YAAa,CAAC,QAAQ,CACxB,EACA,gBAAiB,CACf,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,iBAAkB,CAChB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,6EACR,YAAa,CAAC,SAAS,CACzB,EACA,aAAc,CACZ,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,eAAgB,CACd,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,kBAAmB,CACjB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,mCACV,EACA,iBAAkB,CAChB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,+BACR,YAAa,CAAC,SAAU,QAAQ,CAClC,EACA,gBAAiB,CACf,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,sEACR,YAAa,CAAC,QAAQ,CACxB,EACA,cAAe,CACb,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,cAAe,CACb,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,wBAAyB,CACvB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,oBAAqB,CACnB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,yBAA0B,CACxB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,oBAAqB,CACnB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,qCACV,EACA,cAAe,CACb,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,QAAS,CACP,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,4BACV,EACA,wBAAyB,CACvB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,uBAAwB,CACtB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,eAAgB,CACd,GAAI,GACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OACE,wHACJ,EACA,kBAAmB,CACjB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,0EACR,YAAa,CAAC,QAAQ,CACxB,EACA,sBAAuB,CACrB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,WAAY,CACV,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,iEACV,EACA,UAAW,CACT,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,0BACV,EACA,oBAAqB,CACnB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,6EACV,EACA,cAAe,CACb,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,UAAW,CACT,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,8BACV,EACA,kBAAmB,CACjB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,iBAAkB,CAChB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,cAAe,CACb,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,sCACV,EACA,SAAU,CACR,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,aAAc,CACZ,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,cAAe,CACb,GAAI,GACJ,IAAK,OACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,UAAW,CACT,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,gEACR,YAAa,CAAC,QAAQ,CACxB,EACA,sBAAuB,CACrB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,cAAe,CACb,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,2BACV,EACA,YAAa,CACX,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,mEACV,EACA,gBAAiB,CACf,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,4EACV,EACA,oBAAqB,CACnB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,UAAW,CACT,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,0BACV,EACA,eAAgB,CACd,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,gBAAiB,CACf,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,qEACV,EACA,wBAAyB,CACvB,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,iBAAkB,CAChB,GAAI,GACJ,IAAK,OACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,kBAAmB,CACjB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,yEACV,EACA,aAAc,CACZ,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,kCACR,YAAa,CAAC,QAAQ,CACxB,EACA,oBAAqB,CACnB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,kCACR,YAAa,CAAC,QAAQ,CACxB,EACA,iBAAkB,CAChB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,cAAe,CACb,GAAI,GACJ,IAAK,OACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,qBAAsB,CACpB,GAAI,EACJ,IAAK,MACL,KAAM,OACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,6EACV,EACA,qBAAsB,CACpB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,kCACV,EACA,kBAAmB,CACjB,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,OACL,KAAM,MACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,oDACP,EACA,eAAgB,CACd,GAAI,EACJ,IAAK,MACL,KAAM,MACN,IAAK,MACL,KAAM,OACN,eAAgB,EAChB,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACF,EACA,IAAK,qDACL,OAAQ,iCACR,aAAc,CAAC,OAAO,CACxB,CACF,EACe,MCn9Jf,IAAM,GAAmB,CACvB,oBACA,gBACA,YACA,aACA,gBACA,aACA,YACA,YACA,aACF,EACe,MCXf,IAAM,GAAsB,CAC1B,UACA,WACA,UACA,YACA,SACA,cACA,cACA,aACA,cACF,EACe,MCXf,IAAM,GAAY,CAChB,cACA,UACA,YACA,gBACA,UACA,WACA,WACA,WACA,QACA,UACA,WACA,iBACA,UACA,aACA,cACA,aACA,aACA,aACA,QACA,SACA,UACA,aACA,UACA,WACA,cACA,YACA,UACA,YACA,cACA,UACA,WACA,SACA,WACA,WACA,WACA,UACA,WACA,UACA,UACA,WACA,aACA,cACA,YACA,SACA,eACA,YACA,UACA,WACA,YACA,WACA,QACA,aACA,WACA,UACA,YACA,QACA,OACA,WACA,mBACA,UACA,YACA,eACA,YACA,SACA,WACA,QACA,gBACA,SACA,QACA,QACA,UACA,UACA,UACA,WACA,YACA,YACA,aACA,uBACA,YACA,aACA,WACA,QACA,YACA,QACA,aACA,SACA,YACA,OACA,UACA,QACA,UACA,WACF,EACe,MC9Ff,IAAM,GAAa,CAAC,QAAS,OAAQ,QAAS,OAAQ,QAAS,SAAU,YAAa,MAAO,OAAO,EACrF,sECDR,IAAM,EAAQ,OAAO,OAAO,CACjC,WAAY,MACZ,YAAa,MACb,WAAY,MACZ,YAAa,MACb,UAAW,MACX,SAAU,MACV,WAAY,MACZ,cAAe,MACf,UAAW,KACb,CAAC,EAEY,GAAW,CAAC,SAAU,SAAU,WAAY,UAAW,QAAS,WAAY,OAAO,EAMnF,GAAY,CACvB,UAAW,CACT,WAAY,KACZ,GAAI,GACJ,UAAW,CAAE,YAAa,GAAM,UAAW,EAAK,EAChD,KAAM,EAAM,aACd,EACA,QAAS,CACP,WAAY,MACZ,GAAI,EACJ,UAAW,CAAE,MAAO,EAAK,EACzB,KAAM,EAAM,aACd,EACA,gBAAiB,CACf,WAAY,KACZ,GAAI,EACJ,UAAW,CAAE,YAAa,GAAM,UAAW,EAAK,EAChD,KAAM,EAAM,aACd,EACA,WAAY,CACV,WAAY,KACZ,GAAI,EACJ,UAAW,CAAE,SAAU,MAAO,EAC9B,KAAM,EAAM,WACd,EACA,UAAW,CACT,WAAY,KACZ,GAAI,EACJ,UAAW,CAAE,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CACd,0BACA,2CACA,YACA,KACA,2BACA,cACA,aACA,MACA,QACA,uBACA,qBACA,oBACA,gBACA,+FACA,OACA,mBACA,qBACA,QACA,YACA,gBACA,aACA,mBACA,iBACF,EACe,MCzBf,IAAM,GAAgB,CACpB,aACA,SACA,YACA,SACA,MACA,gBACA,qBACA,WACA,OACA,WACA,QACA,SACA,QACF,EACe,MCff,IAAM,GAAmB,CACvB,QACA,OACA,SACA,WACA,MACA,UACA,QACA,UACA,SACA,UACA,QACA,YACA,QACA,WACA,SACA,UACA,aACA,UACA,YACA,OACA,WACA,SACA,WACA,UACA,WACA,QACA,QACA,QACA,MACA,QACA,QACA,YACA,MACA,OACA,cACA,OACA,QACA,QACA,YACA,OACA,OACA,cACA,UACA,WACA,OACA,QACA,cACA,aACA,QACA,OACA,UACA,UACA,QACA,SACA,QACA,cACA,SACA,UACA,SACA,SACA,aACA,MACA,MACA,UACA,UACA,aACA,WACA,WACA,UACA,YACA,QACA,SACA,WACA,YACA,eACA,aACA,iBACA,QACA,QACA,SACA,YACA,QACA,SACA,UACF,EACe,MCtFf,IAAM,GAAoB,CAExB,oBACA,gBACA,gBACA,cACA,gBACA,qBACA,oBAGA,YACA,aACA,gBACA,UACA,SACA,UACA,aACA,kBACA,aACA,qBAGA,oCACF,EAEe,MC1Bf,IAAM,GAAa,CACjB,UAAW,CACT,OAAQ,CAAC,WAAW,EACpB,WAAY,CACV,gBACA,QACA,UACA,eACA,WACA,SACA,QACA,OACA,UACA,YACA,aACF,EACA,OAAQ,CACN,qBACA,oCACA,iBACA,gBACA,gBACF,CACF,EACA,OAAQ,CACN,WAAY,CAAC,WAAY,OAAO,CAClC,EACA,KAAM,CACJ,OAAQ,CAAC,WAAW,EACpB,UAAW,CAAC,gBAAiB,SAAU,QAAS,WAAY,YAAa,MAAM,EAC/E,OAAQ,CACN,eACA,iBACA,YACA,kCACA,WACA,eACF,CACF,EACA,MAAO,CACL,UAAW,CAAC,gBAAiB,WAAY,YAAa,SAAU,QAA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,CACF,CACF,EACD,GC3QI,IAAM,GAAY,CACvB,QAAS,CACP,QAAS,QACT,IAAK,0BACL,QAAS,+BACX,EACA,MAAO,CACL,WAAY,GACZ,YAAa,CACX,MAAO,MACP,MAAO,OACP,MAAO,KACP,MAAO,OACP,MAAO,GACT,EACA,UAAW,CACT,EAAG,MACH,EAAG,WAIL,EACA,gBAAiB,CAAC,KAAM,KAAM,KAAM,IAAI,CAC1C,EACA,QAAS,GACT,eAAgB,CACd,UACA,UACA,aACA,oBACA,cACA,UACA,UACA,mBACA,qBACA,sBACF,EACA,WAAY,CACV,SACA,KACA,KACA,YACA,SACA,OACA,OACA,SACA,UACA,KACA,KACA,OACA,SACA,mBACA,KACA,UACA,QACA,MACA,QACA,SACA,QACA,UACA,cACA,mBACA,UACA,eACA,YACA,iBACA,WACA,aACA,aACA,MACA,MACA,MACA,WACA,UACA,IACA,oBACA,WACA,gBACA,0BACA,WACA,cACA,8BACA,WACA,aACA,MACA,OACA,QACA,SACA,aACA,UACA,cACA,eACA,WACA,QACA,0BACA,OACA,eACA,UACA,2BACA,SACA,mCACA,sBACA,SACA,aACA,cACA,yCACA,4BACA,KACF,EACA,gBAAiB,CACf,QACA,cACA,UACA,OACA,MACA,QACA,SACA,OACA,cACA,QACA,WACA,aACA,SACA,OACA,SACA,UACA,aACA,UACA,QACA,SACA,aACA,eACA,aACA,UACA,OACA,OACA,MACA,SACF,EACA,WAAY,GACZ,UAAW,CACT,sBACA,sBACF,EACA,iBAAkB,GAClB,kBAAmB,GACnB,aAAc,CAAC,EACf,UAAW,GACX,cAAe,GACf,iBAAkB,GAClB,WAAY,GACZ,UAAW,GACX,MAAO,CAAC,EACR,QAAS,CAAC,EACV,YAAa,CAAC,EACd,cAAe,CAAC,EAChB,mBAAoB,CAAC,EACrB,UAAW,CAAC,EACZ,eAAgB,CAAC,EACjB,iBAAkB,cAAe,EAAG,CAMlC,IAAI,EAAwB,OAAO,IAAI,iBAAiB,iBAEpD,EAA2B,OAAO,IAAI,SAAS,WAAW,mBAAmB,EAGj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",
  "debugId": "0F69A75B4B1C170264756E2164756E21",
  "names": []
}